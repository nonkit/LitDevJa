<?xml version="1.0" encoding="UTF-8"?>
<doc>
   <assembly>
      <name>LitDev 1.2.2 ja</name>
   </assembly>
   <members>
      <member name="M:Bing.BingSearchContainer.Composite(System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
         <summary>
         </summary>
         <param name="Sources">Bing 検索ソースサンプル値：web+image+video+news+spell</param>
         <param name="Query">Bing 検索クエリのサンプル値：xbox</param>
         <param name="Options">すべてのソースに対するこの要求のオプションを指定します。有効な値は、DisableLocationDetection、EnableHighlighting です。サンプル値：EnableHighlighting</param>
         <param name="WebSearchOptions">Web ソース・タイプへの要求のオプションを指定します。有効な値は、DisableHostCollapsing、DisableQueryAlterations です。サンプル値：DisableQueryAlterations</param>
         <param name="Market">市場。注：すべてのソースがすべての市場をサポートしているわけではありません。サンプル値：en-US</param>
         <param name="Adult">性的に露骨なコンテンツをフィルタリングするために大人の設定が使用されます。サンプル値：中位</param>
         <param name="Latitude">緯度サンプル値：47.603450</param>
         <param name="Longitude">経度サンプル値：-122.329696</param>
         <param name="WebFileType">サンプル値を返すファイル拡張子：XLS</param>
         <param name="ImageFilters">API がサイズ、アスペクト、色、スタイル、面、またはそれらの任意の組み合わせに基づいて送信するレスポンスをフィルタリングする文字列の配列。有効な値は次のとおりです：サイズ：小、サイズ：中、サイズ：大、サイズ：幅：[ 幅 ]、サイズ：高さ：[ 高さ ]、アスペクト比：スクエア、アスペクト比：ワイド、アスペクト比：タル、カラー：モノクロ、スタイル：写真、スタイル：グラフィック、顔：顔、顔：ポートレート、顔：その他。サンプル値：Size：Small + Aspect：Square</param>
         <param name="VideoFilters">API がサイズ、アスペクト、色、スタイル、面、またはそれらの任意の組み合わせに基づいて送信するレスポンスをフィルタリングする文字列の配列。有効な値は次のとおりです。長さ：短、長さ：中、長さ：長、アスペクト：標準、アスペクト：ワイドスクリーン、解像度：低、解像度：中、解像度：高サンプル値：Duration：Short + Resolution：High</param>
         <param name="VideoSortBy">返された結果のソート順サンプル値：Date</param>
         <param name="NewsLocationOverride">Bing の位置検出を無効にします。このパラメータは、en-US 市場にのみ適用されます。サンプル値：US.WA</param>
         <param name="NewsCategory">結果を提供するニュースのカテゴリサンプル値：rt_Business</param>
         <param name="NewsSortBy">返された結果のソート順サンプル値：Date</param>
      </member>
      <member name="M:Bing.BingSearchContainer.Web(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
         <summary>
         </summary>
         <param name="Query">Bing 検索クエリのサンプル値：xbox</param>
         <param name="Options">すべてのソースに対するこの要求のオプションを指定します。有効な値は、DisableLocationDetection、EnableHighlighting です。サンプル値：EnableHighlighting</param>
         <param name="WebSearchOptions">Web ソース・タイプへの要求のオプションを指定します。有効な値は、DisableHostCollapsing、DisableQueryAlterations です。サンプル値：DisableQueryAlterations</param>
         <param name="Market">市場。注：すべてのソースがすべての市場をサポートしているわけではありません。サンプル値：en-US</param>
         <param name="Adult">性的に露骨なコンテンツをフィルタリングするために大人の設定が使用されます。サンプル値：中位</param>
         <param name="Latitude">緯度サンプル値：47.603450</param>
         <param name="Longitude">経度サンプル値：-122.329696</param>
         <param name="WebFileType">サンプル値を返すファイル拡張子：XLS</param>
      </member>
      <member name="M:Bing.BingSearchContainer.Image(System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
         <summary>
         </summary>
         <param name="Query">Bing 検索クエリのサンプル値：xbox</param>
         <param name="Options">すべてのソースに対するこの要求のオプションを指定します。有効な値は、DisableLocationDetection、EnableHighlighting です。サンプル値：EnableHighlighting</param>
         <param name="Market">市場。注：すべてのソースがすべての市場をサポートしているわけではありません。サンプル値：en-US</param>
         <param name="Adult">性的に露骨なコンテンツをフィルタリングするために大人の設定が使用されます。サンプル値：中位</param>
         <param name="Latitude">緯度サンプル値：47.603450</param>
         <param name="Longitude">経度サンプル値：-122.329696</param>
         <param name="ImageFilters">API がサイズ、アスペクト、色、スタイル、面、またはそれらの任意の組み合わせに基づいて送信するレスポンスをフィルタリングする文字列の配列。有効な値は次のとおりです：サイズ：小、サイズ：中、サイズ：大、サイズ：幅：[ 幅 ]、サイズ：高さ：[ 高さ ]、アスペクト比：スクエア、アスペクト比：ワイド、アスペクト比：タル、カラー：モノクロ、スタイル：写真、スタイル：グラフィック、顔：顔、顔：ポートレート、顔：その他。サンプル値：Size：Small + Aspect：Square</param>
      </member>
      <member name="M:Bing.BingSearchContainer.Video(System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String)">
         <summary>
         </summary>
         <param name="Query">Bing 検索クエリのサンプル値：xbox</param>
         <param name="Options">すべてのソースに対するこの要求のオプションを指定します。有効な値は、DisableLocationDetection、EnableHighlighting です。サンプル値：EnableHighlighting</param>
         <param name="Market">市場。注：すべてのソースがすべての市場をサポートしているわけではありません。サンプル値：en-US</param>
         <param name="Adult">性的に露骨なコンテンツをフィルタリングするために大人の設定が使用されます。サンプル値：中位</param>
         <param name="Latitude">緯度サンプル値：47.603450</param>
         <param name="Longitude">経度サンプル値：-122.329696</param>
         <param name="VideoFilters">API がサイズ、アスペクト、色、スタイル、面、またはそれらの任意の組み合わせに基づいて送信するレスポンスをフィルタリングする文字列の配列。有効な値は次のとおりです。長さ：短、長さ：中、長さ：長、アスペクト：標準、アスペクト：ワイドスクリーン、解像度：低、解像度：中、解像度：高サンプル値：Duration：Short + Resolution：High</param>
         <param name="VideoSortBy">返された結果のソート順サンプル値：Date</param>
      </member>
      <member name="M:Bing.BingSearchContainer.News(System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.String)">
         <summary>
         </summary>
         <param name="Query">Bing 検索クエリのサンプル値：xbox</param>
         <param name="Options">すべてのソースに対するこの要求のオプションを指定します。有効な値は、DisableLocationDetection、EnableHighlighting です。サンプル値：EnableHighlighting</param>
         <param name="Market">市場。注：すべてのソースがすべての市場をサポートしているわけではありません。サンプル値：en-US</param>
         <param name="Adult">性的に露骨なコンテンツをフィルタリングするために大人の設定が使用されます。サンプル値：中位</param>
         <param name="Latitude">緯度サンプル値：47.603450</param>
         <param name="Longitude">経度サンプル値：-122.329696</param>
         <param name="NewsLocationOverride">Bing の位置検出を無効にします。このパラメータは、en-US 市場にのみ適用されます。サンプル値：US.WA</param>
         <param name="NewsCategory">結果を提供するニュースのカテゴリサンプル値：rt_Business</param>
         <param name="NewsSortBy">返された結果のソート順サンプル値：Date</param>
      </member>
      <member name="M:Bing.BingSearchContainer.RelatedSearch(System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
         <summary>
         </summary>
         <param name="Query">Bing 検索クエリのサンプル値：xbox</param>
         <param name="Options">すべてのソースに対するこの要求のオプションを指定します。有効な値は、DisableLocationDetection、EnableHighlighting です。サンプル値：EnableHighlighting</param>
         <param name="Market">市場。注：すべてのソースがすべての市場をサポートしているわけではありません。サンプル値：en-US</param>
         <param name="Adult">性的に露骨なコンテンツをフィルタリングするために大人の設定が使用されます。サンプル値：中位</param>
         <param name="Latitude">緯度サンプル値：47.603450</param>
         <param name="Longitude">経度サンプル値：-122.329696</param>
      </member>
      <member name="M:Bing.BingSearchContainer.SpellingSuggestions(System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
         <summary>
         </summary>
         <param name="Query">Bing 検索照会のサンプル値：xblox</param>
         <param name="Options">すべてのソースに対するこの要求のオプションを指定します。有効な値は、DisableLocationDetection、EnableHighlighting です。サンプル値：EnableHighlighting</param>
         <param name="Market">市場。注：すべてのソースがすべての市場をサポートしているわけではありません。サンプル値：en-US</param>
         <param name="Adult">性的に露骨なコンテンツをフィルタリングするために大人の設定が使用されます。サンプル値：中位</param>
         <param name="Latitude">緯度サンプル値：47.603450</param>
         <param name="Longitude">経度サンプル値：-122.329696</param>
      </member>
      <member name="T:LitDev.LDFastArray">
         <summary>
            このオブジェクトは、配列に値を格納する別の高速な方法を提供します。
            1 次元、2 次元、3 次元以上の高次元配列を扱うことができ、配列をファイルに読み書きするためのメソッド（CSV 形式など）を持っています。
            Small Basic 配列と同じように、配列内のさまざまな行が異なる次元または要素数（ジャグ配列）を持つことも可能です。
            内部的には、配列の次元またはサイズを最初に設定する必要がないように、サイズを拡大できるリストを使用します。
            インデックス付けは、1 から始まる整数です。
            1D 配列の場合、追加のソート方法があるので、LDList を使用することをお勧めします。
            3 より大きい次元を持つ配列の要素は、インデックスまたはインデックス変数名のカンマ区切りリストでインデックスされます。
         </summary>
      </member>
      <member name="M:LitDev.LDFastArray.Add">
         <summary>
            新しい配列を作成します。
            これは、データセットに応じて 1 次元、2 次元、3 次元以上の次元配列として使用できる一般的な配列です。
         </summary>
         <returns>配列名。</returns>
      </member>
      <member name="M:LitDev.LDFastArray.Set(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            値を設定します。
            Set1D、Set2D、または Set3D メソッドは、低次元の配列ではわずかに高速です。
         </summary>
         <param name="arrayName">配列名。</param>
         <param name="indices">
            カンマ（またはスペース）で区切られたインデックス値のリスト（より遅い）またはインデックス変数名（より速い）。
            例えば "3,2,6" または "i,j,k"
            これを "" に設定すると、以前に設定されたインデックス変数が使用されます。
         </param>
         <param name="value">設定する値。</param>
      </member>
      <member name="M:LitDev.LDFastArray.Set1D(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            1D の値を設定します。
         </summary>
         <param name="arrayName">配列名。</param>
         <param name="index1">最初の次元の整数インデックス。</param>
         <param name="value">設定する値。</param>
      </member>
      <member name="M:LitDev.LDFastArray.Set2D(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2D 値を設定します。
         </summary>
         <param name="arrayName">配列名。</param>
         <param name="index1">最初の次元の整数インデックス。</param>
         <param name="index2">2 次元の整数インデックス。</param>
         <param name="value">設定する値。</param>
      </member>
      <member name="M:LitDev.LDFastArray.Set3D(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            3D 値を設定します。
         </summary>
         <param name="arrayName">配列名。</param>
         <param name="index1">最初の次元の整数インデックス。</param>
         <param name="index2">2 次元の整数インデックス。</param>
         <param name="index3">3 次元整数インデックス。</param>
         <param name="value">設定する値。</param>
      </member>
      <member name="M:LitDev.LDFastArray.Get(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            値を取得します。
            Get1D、Get2D、または Get3D メソッドは、低次元の配列ではわずかに高速です。
         </summary>
         <param name="arrayName">配列名。</param>
         <param name="indices">
            カンマ（またはスペース）で区切られたインデックス値のリスト（より遅い）またはインデックス変数名（より速い）。
            例えば "3,2,6" または "i,j,k"
            これを "" に設定すると、以前に設定されたインデックス変数が使用されます。
         </param>
         <returns>失敗した場合は配列値か "" を返します。</returns>
      </member>
      <member name="M:LitDev.LDFastArray.Get1D(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            1D の値を取得します。
         </summary>
         <param name="arrayName">配列名。</param>
         <param name="index1">最初の次元の整数インデックス。</param>
         <returns>失敗した場合は配列値か "" を返します。</returns>
      </member>
      <member name="M:LitDev.LDFastArray.Get2D(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2D 値を取得します。
         </summary>
         <param name="arrayName">配列名。</param>
         <param name="index1">最初の次元の整数インデックス。</param>
         <param name="index2">2 次元の整数インデックス。</param>
         <returns>失敗した場合は配列値か "" を返します。</returns>
      </member>
      <member name="M:LitDev.LDFastArray.Get3D(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            3D 値を取得します。
         </summary>
         <param name="arrayName">配列名。</param>
         <param name="index1">最初の次元の整数インデックス。</param>
         <param name="index2">2 次元の整数インデックス。</param>
         <param name="index3">3 次元整数インデックス。</param>
         <returns>失敗した場合は配列値か "" を返します。</returns>
      </member>
      <member name="M:LitDev.LDFastArray.Size(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ディメンションの現在のサイズを取得します。
            Size1、Size2、または Size3 メソッドは、より小さな次元の配列の方がわずかに高速です。
         </summary>
         <param name="arrayName">配列名。</param>
         <param name="indices">
            コンマ（またはスペース）で区切られたインデックスのリスト。
            例えば第 1 次元では ""、第 1 次元では 3 番目の要素の第 2 次元では "3"。
         </param>
         <returns>ディメンションサイズ。</returns>
      </member>
      <member name="M:LitDev.LDFastArray.Size1(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            最初の次元の現在のサイズを取得します。
         </summary>
         <param name="arrayName">配列名。</param>
         <returns>ディメンションサイズ。</returns>
      </member>
      <member name="M:LitDev.LDFastArray.Size2(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2 番目の次元の現在のサイズを取得します。
         </summary>
         <param name="arrayName">配列名。</param>
         <param name="index1">のサイズを取得するための最初のインデックスは、すべての行が同じサイズを持つ場合は 1 になります。</param>
         <returns>ディメンションサイズ。</returns>
      </member>
      <member name="M:LitDev.LDFastArray.Size3(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            3 次元の現在のサイズを取得します。
         </summary>
         <param name="arrayName">配列名。</param>
         <param name="index1">のサイズを取得するための最初のインデックスは、すべての行が同じサイズを持つ場合は 1 になります。</param>
         <param name="index2">のサイズを取得する 2 番目のインデックスは、すべての行が同じサイズを持つ場合は 1 になります。</param>
         <returns>ディメンションサイズ。</returns>
      </member>
      <member name="M:LitDev.LDFastArray.Dimension(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            配列の次元を取得します。
         </summary>
         <param name="arrayName">配列名。</param>
         <returns>配列の次元。</returns>
      </member>
      <member name="M:LitDev.LDFastArray.Remove(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            配列を削除します。
         </summary>
         <param name="arrayName">配列名。</param>
      </member>
      <member name="M:LitDev.LDFastArray.ReadCSV(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            CSV（カンマ区切り値）ファイルを 2D FastArray 配列に読み込みます。
            区切り文字は、LDUtilities.CSVDeliminator を使用してコンマから変更することができます。
         </summary>
         <param name="fileName">CSV ファイルのフルパス。</param>
         <returns>CSV ファイルをインポートした 2D FastArray または ""。</returns>
      </member>
      <member name="M:LitDev.LDFastArray.WriteCSV(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2D FastArray 配列を CSV（カンマ区切り値）ファイルに書き込みます。
            区切り文字は、LDUtilities.CSVDeliminator を使用してコンマから変更することができます。
         </summary>
         <param name="arrayName">2D 配列名。</param>
         <param name="fileName">CSV ファイルのフルパス。</param>
      </member>
      <member name="M:LitDev.LDFastArray.CreateFromValues(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            SmallBasic 配列を FastArray 配列に変換します。
            Small Basic 配列のすべてのインデックスは連続した整数インデックスに置き換えられます。
         </summary>
         <param name="sbArray">Small Basic 配列。</param>
         <returns>新しい FastArray または ""。</returns>
      </member>
      <member name="M:LitDev.LDFastArray.CreateFromIndices(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            SmallBasic 配列（最大 3 次元）を FastArray 配列に変換します。
            このメソッドは、Small Basic 配列インデックスのみを含む配列を作成します。
         </summary>
         <param name="sbArray">Small Basic 配列。</param>
         <returns>新しい FastArray または ""。</returns>
      </member>
      <member name="M:LitDev.LDFastArray.ToArray(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            FastArray 配列を Small Basic 配列に変換します。
         </summary>
         <param name="arrayName">配列名。</param>
         <returns>Small Basic 配列または ""。</returns>
      </member>
      <member name="M:LitDev.LDFastArray.Collapse(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            配列内の空のエントリ "" をすべて削除します。
            内部エントリが削除されると、インデックスまたは次元が変更される可能性があることに注意してください。
         </summary>
         <param name="arrayName">配列名。</param>
      </member>
      <member name="M:LitDev.LDFastArray.Read(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            新しい配列を作成し、ファイルから初期化します。
            ファイルがテキストベースで、書き込みと同じ索引形式でない場合は、各行の 1D 配列が作成されます。
         </summary>
         <param name="fileName">ファイルの絶対パス。</param>
         <param name="binary">バイナリ（"True"）またはテキスト（"False"）形式のファイル。</param>
         <returns>配列名。</returns>
      </member>
      <member name="M:LitDev.LDFastArray.Write(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            配列をファイルに保存します。
            配列が 1D で、テキストとして書き込まれている場合、各エントリは単にインデックスされていない行に書き込まれます。
         </summary>
         <param name="arrayName">配列名。</param>
         <param name="fileName">ファイルの絶対パス。</param>
         <param name="binary">バイナリ（"True"）またはテキスト（"False"）形式のファイル。</param>
      </member>
      <member name="M:LitDev.LDFastArray.Copy(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            配列をコピーします。
         </summary>
         <param name="arrayName">配列名。</param>
         <returns>配列のコピー。</returns>
      </member>
      <member name="T:LitDev.LDVector">
         <summary>
            LD3DView の操作に役立つ 3D ベクトル代数メソッド。
            すべてのベクトルまたは点は、1,2,3 で示される 3 要素配列です。
         </summary>
      </member>
      <member name="M:LitDev.LDVector.Rotate(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            1 つのベクトルを第 2 ベクトルによって定義される方向の周りに回転させます。
         </summary>
         <param name="vector">回転するベクトル。</param>
         <param name="about">回転するベクトル軸の方向。</param>
         <param name="angle">ベクトルを回転させる角度（度単位）。</param>
         <returns>回転したベクトルまたは失敗した場合は ""</returns>
      </member>
      <member name="M:LitDev.LDVector.RotatePoint(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定された中心点と方向について点を回転させます。
         </summary>
         <param name="point">回転させる点。</param>
         <param name="center">回転する点。</param>
         <param name="about">回転するベクトル軸の方向。</param>
         <param name="angle">点を回転させる角度（度単位）。</param>
         <returns>回転した点または失敗時に "" 表示されます。</returns>
      </member>
      <member name="M:LitDev.LDVector.DotProduct(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2 ベクトルの内積を求める。
         </summary>
         <param name="vector1">最初のベクトル。</param>
         <param name="vector2">2 番目のベクトル。</param>
         <returns>ドットプロダクト、または "" 失敗しました。</returns>
      </member>
      <member name="M:LitDev.LDVector.CrossProduct(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2 つのベクトルのベクトル積を求めます。
         </summary>
         <param name="vector1">最初のベクトル。</param>
         <param name="vector2">2 番目のベクトル。</param>
         <returns>失敗した場合のベクトル積または ""。</returns>
      </member>
      <member name="M:LitDev.LDVector.AngleBetween(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2 つのベクトルの間の角度を取得します。
         </summary>
         <param name="vector1">最初のベクトル。</param>
         <param name="vector2">2 番目のベクトル。</param>
         <returns>ベクトル間の角度（度）または失敗時の角度 ""。</returns>
      </member>
      <member name="M:LitDev.LDVector.Normalise(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ベクトルを単位長に正規化する。
         </summary>
         <param name="vector">ベクトル。</param>
         <returns>単位長さの再スケールされたベクトル、または失敗した場合は ""。</returns>
      </member>
      <member name="M:LitDev.LDVector.Length(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ベクトルの長さを取得します。
         </summary>
         <param name="vector">ベクトル。</param>
         <returns>失敗した場合のベクトルの長さまたは ""。</returns>
      </member>
      <member name="M:LitDev.LDVector.Multiply(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            スカラーでベクトルを掛けます。
         </summary>
         <param name="vector">ベクトル。</param>
         <param name="scalar">ベクトルのサイズを変更するためのスカラー番号。</param>
         <returns>再スケーリングされたベクトルまたは "" 失敗した場合。</returns>
      </member>
      <member name="M:LitDev.LDVector.Add(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2 つのベクトルを追加します。
         </summary>
         <param name="vector1">最初のベクトル。</param>
         <param name="vector2">2 番目のベクトル。</param>
         <returns>失敗したときに結果として生じるベクトルまたは ""。</returns>
      </member>
      <member name="M:LitDev.LDVector.Subtract(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            あるベクトルを別のベクトルから引きます。
         </summary>
         <param name="vector1">最初のベクトル。</param>
         <param name="vector2">2 番目のベクトル（最初から減算する）。</param>
         <returns>失敗したときに結果として生じるベクトルまたは ""。</returns>
      </member>
      <member name="T:LitDev.LDTimer">
         <summary>
            追加タイマー。
         </summary>
      </member>
      <member name="M:LitDev.LDTimer.Add">
         <summary>
            新しいタイマーを作成します。このメソッドで作成されたすべてのタイマーは Tick で定義されたイベントサブルーチンを呼び出します。
         </summary>
         <returns>タイマー名。</returns>
      </member>
      <member name="M:LitDev.LDTimer.AddTick(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            新しいタイマーを作成します。このタイマーは、独自のイベントサブルーチンを呼び出します。
         </summary>
         <param name="tick">このタイマーのイベントサブルーチン。</param>
         <returns>タイマー名。</returns>
      </member>
      <member name="M:LitDev.LDTimer.Interval(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            タイマーを開始または再開します。
         </summary>
         <param name="timer">タイマー名。</param>
         <param name="interval">タイマーが Tick イベントを発生させる頻度を指定する間隔（ミリ秒単位）を設定します。この値の範囲は 10 ～ 100000000 です。</param>
      </member>
      <member name="M:LitDev.LDTimer.Pause(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            タイマーを一時停止します。ダニイベントは発生しません。
         </summary>
         <param name="timer">タイマー名。</param>
      </member>
      <member name="M:LitDev.LDTimer.Resume(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            一時停止状態からタイマーを再開します。Tick イベントが発生します。
         </summary>
         <param name="timer">タイマー名。</param>
      </member>
      <member name="P:LitDev.LDTimer.LastTimer">
         <summary>
            イベントを発生させた最後のタイマー。
         </summary>
      </member>
      <member name="E:LitDev.LDTimer.Tick">
         <summary>
            追加チックで作成されたタイマーが発生したときにイベントを発生させます。
         </summary>
      </member>
      <member name="T:LitDev.LDUnits">
         <summary>
            一般的な編集可能な単位変換システム。
            すべての単位と次元は大文字と小文字が区別されます。
            基本単位は、単一の次元と名前で構成され、すべて独立しています。
            組立単位は、基本単位または他の組立単位からなる記述、名前、および単位定義、およびオプションの加算項（通常は 0）で構成されます。
            単位は分割によって解析されます。/ + - と * を使用して、かっこ付き（）の項を優先し、組立単位の変換を再帰的に行います。
            値（特に、小数点 "." またはマイナス "-" を含むもの）は、（）内に含める必要があります。
            単位の先頭に接頭辞または数値を前置することができます（たとえば、m は mili 0.001、K は kilo 1000 など）。
            どの単位にも累乗の指数を後置することができます。
            典型的な単位は "mile/hr"、"m/s2" または "MJ/day" などであり、基本単位と組立単位の任意の組み合わせとすることができます。
            次元的に同じ単位のペアであれば変換できます。
            加算値は、非複合単位の変換（例えば、C から F への変換）にのみ使用されます。
            接頭辞単位が不明瞭にならないようにするには、完全な接頭辞名を使用します（たとえば、min は 60 seconds または 0.001 inches は miliin にする必要があります）。
            通貨換算は毎日更新されます。
         </summary>
      </member>
      <member name="M:LitDev.LDUnits.Convert(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ある単位から別の単位に値を変換する。
         </summary>
         <param name="value">変換する値。</param>
         <param name="fromUnit">変換前の単位。</param>
         <param name="toUnit">変換後の単位。</param>
         <returns>
            変換された値または "FAILED"（通常、存在しない単位または次元の不一致）。
         </returns>
      </member>
      <member name="M:LitDev.LDUnits.GetErrors">
         <summary>
            変換が失敗した場合、または追加された単位または定数の競合が見つかった場合に、エラーメッセージの配列を取得します。
         </summary>
         <returns>エラーメッセージまたは "" の配列。</returns>
      </member>
      <member name="M:LitDev.LDUnits.GetDimensions(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            単位の次元の配列を取得します。
         </summary>
         <param name="unit">次元を取得する単位。</param>
         <returns>
            次元でインデックスされ次数の値を持つ配列または ""。
         </returns>
      </member>
      <member name="M:LitDev.LDUnits.GetBaseUnits">
         <summary>
            現在の基本単位のリストを取得します。
         </summary>
         <returns>
            使用可能な基本単位の配列で、単位の次元で示されます。
            配列の値は基本単位の次元の名前です。
         </returns>
      </member>
      <member name="M:LitDev.LDUnits.GetDerivedUnits">
         <summary>
            現在の組立単位のリストを取得します。
         </summary>
         <returns>
            利用可能な組立単位名でインデックスされた配列。
            配列の値は、基本単位（または組立単位）で表され（説明）が添えられます。
         </returns>
      </member>
      <member name="M:LitDev.LDUnits.GetConstants">
         <summary>
            現在の定数のリストを取得します。
         </summary>
         <returns>
            定数名に（説明）を添えてインデックスされた、利用可能な定数の配列。
            配列の値は定数値です。
         </returns>
      </member>
      <member name="M:LitDev.LDUnits.GetPrefixes">
         <summary>
            現在の接頭辞のリストを取得します。
         </summary>
         <returns>
            接頭辞名でインデックスされた利用可能な接頭辞の配列。
            配列の値は接頭辞の値です。
         </returns>
      </member>
      <member name="M:LitDev.LDUnits.AddBaseUnit(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            システムに基本単位を追加します。
         </summary>
         <param name="dimension">基本単位の次元（例：TEMPERATURE）。</param>
         <param name="name">単位名（既存の単位名と衝突しないよう注意）。</param>
      </member>
      <member name="M:LitDev.LDUnits.AddDerivedUnit(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            組立単位をシステムに追加します。
         </summary>
         <param name="description">オプションで、組立単位の長い名前または説明。</param>
         <param name="name">単位名（既存の単位名と衝突しないよう注意）。</param>
         <param name="units">組立単位の定義。</param>
         <param name="add">オプションの加算項。</param>
      </member>
      <member name="M:LitDev.LDUnits.AddConstant(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            システムに次元のない定数を追加します。
         </summary>
         <param name="description">オプションの長い名前または定数の説明。</param>
         <param name="name">定数名（既存の定数名と衝突しないよう注意）。</param>
         <param name="value">定数の値。</param>
      </member>
      <member name="M:LitDev.LDUnits.Export">
         <summary>
            現在の単位系をファイル（現在のプログラムフォルダの units.txt）にエクスポートします。
         </summary>
      </member>
      <member name="M:LitDev.LDUnits.Import">
         <summary>
            ファイル（現在のプログラムフォルダの units.txt）から単位系をインポートします。
         </summary>
      </member>
      <member name="T:LitDev.LDFigures">
         <summary>
            吹き出し、円弧、矢印のような追加の形状。
         </summary>
      </member>
      <member name="M:LitDev.LDFigures.AddArc(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            円弧形状を追加します。
         </summary>
         <param name="width">形状の幅。</param>
         <param name="height">形状の高さ。</param>
         <param name="startAngle">開始角度（度）。</param>
         <param name="endAngle">終了角度（度）。</param>
         <param name="thickness">弧の太さ（ピクセル単位）。</param>
         <returns>形状の名前。</returns>
      </member>
      <member name="M:LitDev.LDFigures.AddBlockArrow(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ブロックの矢印の形を追加します。
         </summary>
         <param name="width">形状の幅。</param>
         <param name="height">形状の高さ。</param>
         <param name="thickness">矢印の軸の相対的な厚さ、例えば。0.25 です。</param>
         <param name="arrowAngle">矢印の頭の角度（度）。</param>
         <param name="direction">矢印の方向："Up"（上）、"Down"（下）、"Left"（左） または "Right"（右）。</param>
         <returns>形状の名前。</returns>
      </member>
      <member name="M:LitDev.LDFigures.AddCallout(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            吹き出し図形を追加します。
         </summary>
         <param name="width">形状の幅。</param>
         <param name="height">形状の高さ。</param>
         <param name="text">コールアウトテキスト。</param>
         <param name="style">コールアウトスタイル："Cloud"（雲）、"Oval"（楕円）、"Rectangle"（長方形）、または "RoundedRectangle"（角丸長方形）。</param>
         <param name="anchor">コールアウトサイズに対するコールアウトアンカーの位置（例："X=0;Y=1.25;"）</param>
         <returns>形状の名前。</returns>
      </member>
      <member name="M:LitDev.LDFigures.AddLineArrow(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            線の矢印の形を追加します。
         </summary>
         <param name="width">形状の幅。</param>
         <param name="height">形状の高さ。</param>
         <param name="size">矢印の頭のサイズ（ピクセル単位）。</param>
         <param name="bend">矢印の曲げ量（例えば、0 は直線、0.5 は滑らかに曲がる）。</param>
         <param name="startArrow">開始矢印のタイプ："None"（なし）、"Arrow"（矢印）、"Open"（開く）、"Oval"（楕円） または "Stealth"（ステルス）。</param>
         <param name="endArrow">終わりの矢印のタイプ："None"（なし）、"Arrow"（矢印）、"Open"（開く）、"Oval"（楕円） または "Stealth"（ステルス）。</param>
         <param name="startCorner">開始角位置："BottomLeft"、"BottomRight"、"TopLeft" または "TopRight"。矢印は反対側のコーナーで終了します。</param>
         <returns>形状の名前。</returns>
      </member>
      <member name="M:LitDev.LDFigures.AddRegularPolygon(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            正多角形を追加します。
         </summary>
         <param name="width">形状の幅。</param>
         <param name="height">形状の高さ。</param>
         <param name="corners">コーナーの数。</param>
         <param name="radius">星形の相対半径（例えば、五角形の場合は 1、尖った星の場合は 0.5）。</param>
         <returns>形状の名前。</returns>
      </member>
      <member name="T:LitDev.LDEffect">
         <summary>
            任意の図形またはコントロールに視覚効果を適用します。
         </summary>
      </member>
      <member name="M:LitDev.LDEffect.Clear(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            エフェクトをクリアします。
         </summary>
         <param name="shapeName">エフェクトをクリアする図形。</param>
      </member>
      <member name="M:LitDev.LDEffect.DropShaddow(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ドロップシャドーエフェクトを適用します。
         </summary>
         <param name="shapeName">効果を適用する図形。</param>
         <param name="properties">
            プロパティ名でインデックスされた任意のプロパティの配列（ないときは ""）：
            BlurRadius（デフォルトは 5）
            Color（色、デフォルトでは "Black" - 黒）
            Direction（方向、デフォルトは 315）
            Opacity（不透明度、デフォルト値 1）
            ShadowDepth（デフォルトは 5）
         </param>
      </member>
      <member name="M:LitDev.LDEffect.Blur(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ぼかし効果を適用します。
         </summary>
         <param name="shapeName">効果を適用する図形。</param>
         <param name="properties">
            プロパティ名でインデックスされた任意のプロパティの配列（ないときは ""）：
            KernelType（デフォルト "Gaussian" または "Box"）
            Radius（半径、デフォルトは 5）
         </param>
      </member>
      <member name="M:LitDev.LDEffect.Bloom(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ブルーム効果を適用します。
         </summary>
         <param name="shapeName">効果を適用する図形。</param>
         <param name="properties">
            プロパティ名でインデックス付けされた任意のプロパティの配列（ないときは ""）：
            BaseIntensity（デフォルトは 1）
            BaseSaturation（デフォルト 1）
            BloomIntensity（デフォルトは 1.25）
            BloomSaturation（デフォルトは 1）
            Threshold（しきい値、デフォルトは 0.25）
         </param>
      </member>
      <member name="M:LitDev.LDEffect.ColourTone(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            色調効果を適用します。
         </summary>
         <param name="shapeName">効果を適用する図形。</param>
         <param name="properties">
            プロパティ名でインデックス付けされた任意のプロパティの配列（ないときは ""）：
            Desaturation（不飽和度、デフォルトは 0.5）
            ToneAmount（デフォルトは 0.5）
            LightColor（デフォルト "#FFE580"）
            DarkColor（デフォルトでは "#338000"）
         </param>
      </member>
      <member name="M:LitDev.LDEffect.Embossed(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            浮き彫り効果を適用します。
         </summary>
         <param name="shapeName">効果を適用する図形。</param>
         <param name="properties">
            プロパティ名でインデックス付けされた任意のプロパティの配列（ないときは ""）：
            Amount（量、デフォルトは 3）
            Color（色、デフォルトは "Gray" - グレー）
            Height（高さ、デフォルトは 0.001）
         </param>
      </member>
      <member name="M:LitDev.LDEffect.Magnify(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            拡大効果を適用します。
         </summary>
         <param name="shapeName">効果を適用する図形。</param>
         <param name="properties">
            プロパティ名でインデックス付けされた任意のプロパティの配列（ないときは ""）：
            Amount（量、デフォルトは 0.5）
            Center（中心、デフォルトでは "X=0.5;Y=0.5;"）
            InnerRadius（内径、デフォルトは 0.2）
            OuterRadius（外径、デフォルトは 0.4）
         </param>
      </member>
      <member name="M:LitDev.LDEffect.Monochrome(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            モノクロ効果を適用します。
         </summary>
         <param name="shapeName">効果を適用する図形。</param>
         <param name="properties">
            プロパティ名でインデックス付けされた任意のプロパティの配列（ないときは ""）：
            Color（色、デフォルトは "White" - 白）
         </param>
      </member>
      <member name="M:LitDev.LDEffect.Pixelate(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ピクセル効果を適用します。
         </summary>
         <param name="shapeName">効果を適用する図形。</param>
         <param name="properties">
            プロパティ名でインデックス付けされた任意のプロパティの配列（ないときは ""）：
            Pixelation（ピクセル化、デフォルトは 0.75）
         </param>
      </member>
      <member name="M:LitDev.LDEffect.Ripple(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            リップル効果を適用します。
         </summary>
         <param name="shapeName">効果を適用する図形。</param>
         <param name="properties">
            プロパティ名でインデックス付けされた任意のプロパティの配列（ないときは ""）：
            Center（中心、デフォルトでは "X=0.5;Y=0.5;"）
            Freequency（頻度、デフォルトは 40）
            Magnitude（大きさ、デフォルトは 0.1）
            Phase（フェーズ、デフォルト 10）
         </param>
      </member>
      <member name="M:LitDev.LDEffect.Sharpen(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            シャープ効果を適用します。
         </summary>
         <param name="shapeName">効果を適用する図形。</param>
         <param name="properties">
            プロパティ名でインデックス付けされた任意のプロパティの配列（ないときは ""）：
            金額（デフォルトは 2）
            高さ（デフォルト 0.0005）
         </param>
      </member>
      <member name="M:LitDev.LDEffect.Swirl(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            渦巻き効果を適用します。
         </summary>
         <param name="shapeName">効果を適用する図形。</param>
         <param name="properties">
            プロパティ名でインデックス付けされた任意のプロパティの配列（ないときは ""）：
            AngleFrequency（デフォルト 45）
            Center（中心、デフォルトでは "X=0.5;Y=0.5;"）
            TwistAmount（デフォルトは 10）
         </param>
      </member>
      <member name="T:LitDev.LDBits">
         <summary>
            バイナリフラグをビットとして単一の数に格納するビット単位のロジック。
            32 ビットの数値が内部的に使用されます。
            これは、1 つの番号に格納された 1 と 0 の 32 次元配列のようなものです。
            ビット（1 ～ 32）は 1 からインデックスされます。
         </summary>
      </member>
      <member name="M:LitDev.LDBits.SetBit(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            数字にビットを設定します。
         </summary>
         <param name="var">ビットを設定する数値。</param>
         <param name="bit">設定するビット（1 ～ 32）。</param>
         <returns>ビットを設定した変更番号。</returns>
      </member>
      <member name="M:LitDev.LDBits.UnsetBit(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            数字のビットを解除します。
         </summary>
         <param name="var">ビットを設定解除するための数値。</param>
         <param name="bit">設定を解除するビット（1 ～ 32）。</param>
         <returns>bit を設定しないで変更した数値。</returns>
      </member>
      <member name="M:LitDev.LDBits.GetBit(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            数値のビット値を取得します。
         </summary>
         <param name="var">テストする数値。</param>
         <param name="bit">テストするビット（1 ～ 32）。</param>
         <returns>0（未設定）または 1（設定済み）。</returns>
      </member>
      <member name="M:LitDev.LDBits.Not(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            論理的には数字ではありません。
         </summary>
         <param name="var">番号は Not。</param>
         <returns>Not 番号（すべてのビットが反転）。</returns>
      </member>
      <member name="M:LitDev.LDBits.AndBits(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            論理的に 2 つの数字。
         </summary>
         <param name="var1">最初の番号。</param>
         <param name="var2">2 番目の番号。</param>
         <returns>And 番号（両方の入力ビットが設定されている）。</returns>
      </member>
      <member name="M:LitDev.LDBits.OrBits(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            論理的にまたは 2 つの数字。
         </summary>
         <param name="var1">最初の番号。</param>
         <param name="var2">2 番目の番号。</param>
         <returns>Or 番号（いずれかの入力ビットが設定されている場合）。</returns>
      </member>
      <member name="M:LitDev.LDBits.XOrBits(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            論理的に XOr 2 の数字。
         </summary>
         <param name="var1">最初の番号。</param>
         <param name="var2">2 番目の番号。</param>
         <returns>XOr 番号（入力ビットのみが設定されている）。</returns>
      </member>
      <member name="M:LitDev.LDBits.GetBits(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ビット値の配列を取得します。
         </summary>
         <param name="var">ビットを得るための数。</param>
         <returns>ビットの 32 次元配列（0 または 1）。</returns>
      </member>
      <member name="T:LitDev.LDLogic">
         <summary>
            論理演算。
            これらのオプションで使用する式を評価するには、LDMath.Evaluate3 を使用します。
            例：
            input = 3.1
            result = LDLogic.Switch(LDMath.Evaluate3(input + "&lt;5"),"OK","New input required")
         </summary>
      </member>
      <member name="M:LitDev.LDLogic.Not(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            Not 演算子。
            Not("True") = "False"
            Not("False") = "True"
         </summary>
         <param name="value">操作する値（"True" または "False"）。</param>
         <returns>"True" または "False"。</returns>
      </member>
      <member name="M:LitDev.LDLogic.Or(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            Or 演算子。
            Or("True","True") = "True"
            Or("False","False") = "False"
            Or("True","False") = "True"
            Or("False","True") = "True"
         </summary>
         <param name="value1">最初の値（"True" または "False"）。</param>
         <param name="value2">2 番目の値（"True" または "False"）。</param>
         <returns>"True" または "False"。</returns>
      </member>
      <member name="M:LitDev.LDLogic.And(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            And 演算子。
            And("True","True") = "True"
            And("False","False") = "False"
            And("True","False") = "False"
            And("False","True") = "False"
         </summary>
         <param name="value1">最初の値（"True" または "False"）。</param>
         <param name="value2">2 番目の値（"True" または "False"）。</param>
         <returns>"True" または "False"。</returns>
      </member>
      <member name="M:LitDev.LDLogic.XOr(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            XOr（排他的論理和）演算子。
            XOr("True","True") = "False"
            XOr("False","False") = "False"
            XOr("True","False") = "True"
            XOr("False","True") = "True"
         </summary>
         <param name="value1">最初の値（"True" または "False"）。</param>
         <param name="value2">2 番目の値（"True" または "False"）。</param>
         <returns>"True" または "False"。</returns>
      </member>
      <member name="M:LitDev.LDLogic.LT(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            より小さい演算子。
            value1 が value2 より小さいかどうかをチェックします。
            また、字句の比較が行われる文字列に対しても機能します。
         </summary>
         <param name="value1">最初の値。</param>
         <param name="value2">2 番目の値。</param>
         <returns>"True" または "False"。</returns>
      </member>
      <member name="M:LitDev.LDLogic.LE(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            より小さいか等しい演算子。
            value1 が value2 以下かどうかをチェックします。
            また、字句の比較が行われる文字列に対しても機能します。
         </summary>
         <param name="value1">最初の値。</param>
         <param name="value2">2 番目の値。</param>
         <returns>"True" または "False"。</returns>
      </member>
      <member name="M:LitDev.LDLogic.GT(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            より大きい演算子。
            value1 が value2 より大きいかどうかをチェックします。
            また、字句の比較が行われる文字列に対しても機能します。
         </summary>
         <param name="value1">最初の値。</param>
         <param name="value2">2 番目の値。</param>
         <returns>"True" または "False"。</returns>
      </member>
      <member name="M:LitDev.LDLogic.GE(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            より大きいか等しい演算子。
            value1 が value2 以上かどうかをチェックします。
            また、字句の比較が行われる文字列に対しても機能します。
         </summary>
         <param name="value1">最初の値。</param>
         <param name="value2">2 番目の値。</param>
         <returns>"True" または "False"。</returns>
      </member>
      <member name="M:LitDev.LDLogic.EQ(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            等価演算子。
            value1 が value2 と等しいかどうかをチェックします。
            また、字句の比較が行われる文字列に対しても機能します。
         </summary>
         <param name="value1">最初の値。</param>
         <param name="value2">2 番目の値。</param>
         <returns>"True" または "False"。</returns>
      </member>
      <member name="M:LitDev.LDLogic.NE(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            不等式演算子。
            value1 が value2 と等しくないかどうかをチェックします。
            また、字句の比較が行われる文字列に対しても機能します。
         </summary>
         <param name="value1">最初の値。</param>
         <param name="value2">2 番目の値。</param>
         <returns>"True" または "False"。</returns>
      </member>
      <member name="M:LitDev.LDLogic.Switch(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            簡易条件文。
         </summary>
         <param name="condition">"True" または "False" と評価される条件または変数。</param>
         <param name="value1">condition が "True" の場合に返す値。</param>
         <param name="value2">condition が "False" の場合に返す値。</param>
         <returns>value1 または value2。</returns>
      </member>
      <member name="P:LitDev.LDLogic.CaseSensitive">
         <summary>
            文字列の比較が大文字と小文字を区別するか（"true"、デフォルト）、そうでないか（"False"）を設定します。
         </summary>
      </member>
      <member name="T:LitDev.LDClipboard">
         <summary>
            クリップボードメソッド。
         </summary>
      </member>
      <member name="M:LitDev.LDClipboard.Clear">
         <summary>
            クリップボードをクリアします。
         </summary>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDClipboard.GetImage">
         <summary>
            クリップボードからイメージを ImageList にロードします。
         </summary>
         <returns>ImageList 名または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDClipboard.SetImage(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ImageList イメージをクリップボードに設定します。
         </summary>
         <param name="imageName">ImageList イメージ。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDClipboard.GetFileList">
         <summary>
            クリップボードからファイル名の配列を取得します。
         </summary>
         <returns>ファイルの配列または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDClipboard.SetFileList(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ファイルのリストをクリップボードに設定します。
         </summary>
         <param name="fileList">ファイル名の配列（または単一ファイル）（フルパス）。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDClipboard.GetText">
         <summary>
            クリップボードからテキストを取得します。
         </summary>
         <returns>クリップボードのテキストまたは "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDClipboard.SetText(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            テキストをクリップボードに設定します。
         </summary>
         <param name="text">クリップボードに追加するテキスト。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="P:LitDev.LDClipboard.ImageTransparency">
         <summary>
            透明を含む SetImage の拡張フォーマットを使用します（"True" デフォルトまたは "False"）。
            この拡張形式は、貼り付けたときに一部のアプリケーションで認識されないことがあります。
         </summary>
      </member>
      <member name="E:LitDev.LDClipboard.ClipboardChanged">
         <summary>
            クリップボードのステータスが変更されたときのイベント。
         </summary>
      </member>
      <member name="T:LitDev.LDChart">
         <summary>
            チャートコントロール。
         </summary>
      </member>
      <member name="M:LitDev.LDChart.AddChart(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            チャートコントロールを作成します。
            現在の GraphicsWindow.BackgroundColor がバックグラウンドで使用されます。
            現在の GraphicsWindow.PenColor および Font プロパティがラベルテキストに使用されます。
            例えば：
            GraphicsWindow.FontName = "Segoe UI"
            GraphicsWindow.FontBold = "False"
         </summary>
         <param name="width">グラフの幅。</param>
         <param name="height">チャートの高さ。</param>
         <returns>チャートの図形名。</returns>
      </member>
      <member name="M:LitDev.LDChart.SetData(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            グラフのデータを設定します。
         </summary>
         <param name="chartName">チャート名。</param>
         <param name="data">
            設定するデータ（1D 配列）は、項目名です。
            例：
            data["Fred"] = 25
            data["Mary"] = 15
            data["John"] = 40
         </param>
      </member>
      <member name="M:LitDev.LDChart.Properties(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            チャートのプロパティを設定します。
         </summary>
         <param name="chartName">チャート名。</param>
         <param name="style">
            チャートのスタイルは次のとおりです。
            "Pie"（デフォルト）
            "Doughnut"（ドーナツ）
            "Bubble"（バブル）
            "Bar"（バー）
            "Column"（カラム）
         </param>
         <param name="scale">チャートの縮尺係数。デフォルトは 1 です。</param>
      </member>
      <member name="M:LitDev.LDChart.ColourMap(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            チャートの色マッピングを設定します。
         </summary>
         <param name="chartName">チャート名。</param>
         <param name="hue">色相（カラー 0 ～ 360）、デフォルトは 0（赤色）。</param>
         <param name="saturation">彩度（強度 0 ～ 1）。デフォルトは 0.5。</param>
         <param name="lightness">明度（明るさ 0 ～ 1）。デフォルトは 0.5。</param>
         <param name="hsl">
            異なるセグメントに変更するパラメータは次のとおりです。
            "Hue"（色相）（デフォルト）の虹色
            "Saturation"（彩度）色の濃さが増す
            "Lightness"（明度）明るさを増す
         </param>
         <param name="start">[0 ～ 1] の範囲のカラーバリエーションの開始値。デフォルトは 0 です。</param>
         <param name="end">[0 ～ 1] の範囲のカラーバリエーションの終了値。デフォルトは 1 です。</param>
         <param name="centralColour">チャートを中心としたオプションの円形グラデーションカラーです（デフォルトは ""）。</param>
      </member>
      <member name="M:LitDev.LDChart.Legend(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            凡例プロパティを設定します。
         </summary>
         <param name="chartName">チャート名。</param>
         <param name="scale">凡例とテキストラベルの縮尺係数、デフォルトは 1</param>
         <param name="legend">
            凡例スタイルは、次のとおりです。
            "なし" 凡例なし
            "Legend" セパレート凡例
            "Overlay" の名前がチャートの上に重なる
            "Percent" グラフの上に重なるパーセント値
            "Legend_Percent"（既定値）別の凡例と割合のオーバーレイチャート
         </param>
         <param name="background">凡例ラベルのテキストの背景色は "True" または "False"（デフォルト）です。</param>
      </member>
      <member name="M:LitDev.LDChart.Highlight(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            チャート値を強調表示します（セグメントを移動します）。
         </summary>
         <param name="chartName">チャート名。</param>
         <param name="label">セグメントラベル。</param>
         <param name="fraction">セグメントを移動する半径の一部（0 を返す）。</param>
      </member>
      <member name="M:LitDev.LDChart.Update(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            グラフを再描画（更新）します。
            強調表示されたセグメントがリストアされたり、変更されたチャートプロパティが適用されます。
         </summary>
         <param name="chartName">チャート名。</param>
      </member>
      <member name="P:LitDev.LDChart.DoughnutFraction">
         <summary>
            ドーナツチャートの半径分数が削除され、デフォルトは 0.7 です。
         </summary>
      </member>
      <member name="P:LitDev.LDChart.HighlightDuration">
         <summary>
            ハイライトアニメーションの時間（ミリ秒）。デフォルトは 100 です。
         </summary>
      </member>
      <member name="P:LitDev.LDChart.LastChart">
         <summary>
            最後にクリックされたグラフ。
         </summary>
      </member>
      <member name="P:LitDev.LDChart.LastLabel">
         <summary>
            最後にクリックされたグラフセグメントラベル。
         </summary>
      </member>
      <member name="E:LitDev.LDChart.ValueClicked">
         <summary>
            チャートセグメントがクリックされたときのイベント。
         </summary>
      </member>
      <member name="T:LitDev.LDMathX">
         <summary>
            拡張された数学の方法。
         </summary>
      </member>
      <member name="M:LitDev.LDMathX.FFTForward(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            FFT（高速フーリエ変換）を計算します。
         </summary>
         <param name="real">FFT を計算するための実際の値の配列。</param>
         <returns>
            複素数データ（実振幅と虚数位相）の配列、または "FAILED"。
            各複合対について、インデックスは実数部であり、値は虚数部です。
         </returns>
      </member>
      <member name="M:LitDev.LDMathX.FFTInverse(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            FFT（高速フーリエ変換）の逆数。
         </summary>
         <param name="complex">
            複素数データの配列（実振幅と虚数位相）。
            各複合対について、インデックスは実数部であり、値は虚数部です。
         </param>
         <returns>逆 FFT 値または "FAILED" の配列。</returns>
      </member>
      <member name="M:LitDev.LDMathX.FFTReal(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            複雑なデータの配列の真の部分を取得します。
         </summary>
         <param name="complex">
            複素数データの配列（実振幅と虚数位相）。
            各複合対について、インデックスは実数部であり、値は虚数部です。
         </param>
         <returns>データの実数部分の配列、または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDMathX.FFTImaginary(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            複雑なデータの配列の虚数部分を取得します。
         </summary>
         <param name="complex">
            複素数データの配列（実振幅と虚数位相）。
            各複合対について、インデックスは実数部であり、値は虚数部です。
         </param>
         <returns>データの虚数部分の配列、または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDMathX.FFTComplex(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            実数部と虚数部の配列から複素数値の配列を作成します。
         </summary>
         <param name="real">実データの配列。</param>
         <param name="imaginary">虚偽のデータの配列。</param>
         <returns>
            複素数データ（実振幅と虚数位相）の配列、"MISMATCH" または "FAILED"。
            各複合対について、インデックスは実数部であり、値は虚数部です。
         </returns>
      </member>
      <member name="T:LitDev.LDResources">
         <summary>
            リソースをバイナリファイルに保存して読み込みます。
            リソースは、拡張子 sbres を持つソースと同じ名前と場所を持つ単一のファイルに格納されます。
            リソースは、すべての ImageList イメージ、Sound.Play で再生されたすべてのサウンド、オプションで他のファイルや変数を隠します。
         </summary>
      </member>
      <member name="M:LitDev.LDResources.CleanTemp">
         <summary>
            一時的なサウンドファイルを削除します。
         </summary>
      </member>
      <member name="M:LitDev.LDResources.AddText(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            テキストを追加するか、または保存するリソースに（配列を含めて）変更することができます。
         </summary>
         <param name="text">リソースに追加するテキストまたは Small Basic 変数。</param>
      </member>
      <member name="M:LitDev.LDResources.AddFile(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            保存するリソースにファイルを追加します。
         </summary>
         <param name="fileName">ファイルへのフルパス。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDResources.ExtractFile(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            保存されたファイルを現在のディレクトリ（Program.Directory）に抽出します。
         </summary>
         <param name="fileName">Files メソッドによって返されたファイル名。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDResources.Save">
         <summary>
            すべてのリソースを sbres ファイルに保存します。
            これには、すべての ImageList イメージ、プレランサウンド（Sound.Play）、追加されたファイルまたはテキスト / 変数が含まれます。
         </summary>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDResources.Load">
         <summary>
            以前に保存したすべてのリソースを sbres ファイルからロードします。
            ImageList とサウンドはすべて自動的にロードされ、使用できる状態になります。
            サウンドファイルは、Sound.Play で必要とされるので、%temp% フォルダに再作成されます。
         </summary>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="P:LitDev.LDResources.Texts">
         <summary>
            ロードされたすべてのテキスト / 変数の配列リストを取得します。
         </summary>
      </member>
      <member name="P:LitDev.LDResources.Files">
         <summary>
            ExtractFile メソッドで抽出できる、ロードされたファイルの配列を取得します。
         </summary>
      </member>
      <member name="P:LitDev.LDResources.Images">
         <summary>
            ImageList で使用するためにプリロードされた読み込まれたイメージの配列を取得します。
         </summary>
      </member>
      <member name="P:LitDev.LDResources.Sounds">
         <summary>
            Sound.Play で使用するためにロード済みのサウンドの配列を取得します。
         </summary>
      </member>
      <member name="T:LitDev.LDDictionary">
         <summary>
            このクラスは、オンラインディクショナリサービスへのアクセスを提供します。
            バージョン 1.0 の代替として失敗する辞書オブジェクト。
         </summary>
      </member>
      <member name="M:LitDev.LDDictionary.GetDefinition(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            単語の定義を英語で取得します。
         </summary>
         <param name="word">
            定義する単語。
         </param>
         <returns>
            指定された単語の定義。
         </returns>
      </member>
      <member name="M:LitDev.LDDictionary.GetDefinitionInFrench(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            単語の定義をフランス語で取得します。
         </summary>
         <param name="word">
            定義する単語。
         </param>
         <returns>
            指定された単語の定義。
         </returns>
      </member>
      <member name="M:LitDev.LDDictionary.GetDefinitionInSpanish(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            スペイン語で単語の定義を取得します。
         </summary>
         <param name="word">
            定義する単語。
         </param>
         <returns>
            指定された単語の定義。
         </returns>
      </member>
      <member name="F:LitDev.FormEvents.components">
         <summary>
            必要なデザイナー変数。
         </summary>
      </member>
      <member name="M:LitDev.FormEvents.Dispose(System.Boolean)">
         <summary>
            使用中のリソースをクリーンアップします。
         </summary>
         <param name="disposing">管理されたリソースを廃棄する必要がある場合は true、それ以外の場合は false。</param>
      </member>
      <member name="M:LitDev.FormEvents.InitializeComponent">
         <summary>
            Designer サポートの必須メソッド - 変更しない
            コードエディタでこのメソッドの内容を返します。
         </summary>
      </member>
      <member name="T:LitDev.LDController">
         <summary>
            1 つ以上の USB 接続のゲームコントローラ（ゲームパッドやジョイスティックなど）からの入力を取得します。接続されているデバイスが 2 つ以上ある場合は、1 から番号が付けられます。

            このオブジェクトを使用する前に、.Net 4.0 の SlimDX ランタイムをインストールする必要があります（http://slimdx.org/download.php）。
         </summary>
      </member>
      <member name="M:LitDev.LDController.Buttons(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            コントローラーボタンの押した状態を取得します。
         </summary>
         <param name="controller">1 からインデックスされた USB 接続コントローラ番号（ジョイスティックまたはゲームパッドなど）。</param>
         <returns>ボタンの状態の配列（"True" または "False"）</returns>
      </member>
      <member name="M:LitDev.LDController.Sliders(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            コントローラスライダのスライダ位置を取得します。
         </summary>
         <param name="controller">1 からインデックスされた USB 接続コントローラ番号（ジョイスティックまたはゲームパッドなど）。</param>
         <returns>スライダ位置の配列（0 ～ 100）</returns>
      </member>
      <member name="M:LitDev.LDController.POV(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            コントローラの POV（Point Of View）を取得します。
         </summary>
         <param name="controller">1 からインデックスされた USB 接続コントローラ番号（ジョイスティックまたはゲームパッドなど）。</param>
         <returns>POV 値（度）の（X、Y、Z）</returns>
      </member>
      <member name="M:LitDev.LDController.Position(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            コントローラのジョイスティックの位置を取得します。
         </summary>
         <param name="controller">1 からインデックスされた USB 接続コントローラ番号（ジョイスティックまたはゲームパッドなど）。</param>
         <returns>（X、Y、Z）位置値の配列（-100 ～ 100）</returns>
      </member>
      <member name="M:LitDev.LDController.Rotation(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            コントローラのジョイスティックの回転を取得します。
         </summary>
         <param name="controller">1 からインデックスされた USB 接続コントローラ番号（ジョイスティックまたはゲームパッドなど）。</param>
         <returns>（X、Y、Z）回転値の配列（-100 ～ 100）</returns>
      </member>
      <member name="P:LitDev.LDController.Count">
         <summary>
            接続されているコントローラの数を取得します。
         </summary>
      </member>
      <member name="T:LitDev.LDWaveForm">
         <summary>
            RC（遠隔制御）デバイスを制御するための PPM（パルス位置変調）サウンド信号を作成します。
            http://blogs.msdn.com/b/smallbasic/archive/2014/05/10/smallbasic-pulse-position-modulation-extension.aspx を参照してください。
            同時に非同期に再生できるシンプルなサウンド波形を追加して作成します。

            このオブジェクトを使用する前に、.Net 4.0 の SlimDX ランタイムをインストールする必要があります（http://slimdx.org/download.php）。
         </summary>
      </member>
      <member name="M:LitDev.LDWaveForm.Stop(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            再生音を止めてください。
         </summary>
         <param name="waveName">音波の名前。</param>
      </member>
      <member name="M:LitDev.LDWaveForm.PlaySineWave(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            正弦波を演奏する。
         </summary>
         <param name="frequency">周波数（HZ）。</param>
         <param name="duration">期間（ミリ秒）。これが負の場合、波形は繰り返されます（期間）。</param>
         <returns>波の名前または失敗時の ""</returns>
      </member>
      <member name="M:LitDev.LDWaveForm.PlaySquareWave(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            方形波を演奏する。
         </summary>
         <param name="frequency">周波数（HZ）。</param>
         <param name="duration">期間（ミリ秒）。これが負の場合、波形は繰り返されます（期間）。</param>
         <returns>波の名前または失敗時の ""</returns>
      </member>
      <member name="M:LitDev.LDWaveForm.PlayWave(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ユーザー定義の波形を再生します。
         </summary>
         <param name="frequency">周波数（HZ）。</param>
         <param name="duration">期間（ミリ秒）。これが負の場合、波形は繰り返されます（期間）。</param>
         <param name="waveform">
            反復波のためのフォーム。
            これは配列で、インデックスは相対的な増加時間（実際の値は周波数に対して正規化されます）で、値は振幅（-1 対 1）です。
            三角波の例は、"0=-1;1=1;2=-1;" です。
         </param>
         <returns>波の名前または失敗時の ""</returns>
      </member>
      <member name="M:LitDev.LDWaveForm.PlayHarmonics(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ユーザー定義の波形を高調波の和として再生します。
         </summary>
         <param name="frequency">周波数（HZ）。</param>
         <param name="duration">期間（ミリ秒）。これが負の場合、波形は繰り返されます（期間）。</param>
         <param name="harmonics">
            高調波振幅。
            これは配列で、インデックスは基本周波数（2、3 など）の高調波倍数であり、値は高調波の相対振幅です。
            方形波は、（https://en.wikipedia.org/wiki/Square_wave）によって形成することができます：
            For i = 3 To 21 Step 2
              harmonics[i] = 1/i
            EndFor
            squareWave = LDWaveForm.PlayHarmonics(256,1000,harmonics)
         </param>
         <returns>波の名前または失敗時の ""</returns>
      </member>
      <member name="M:LitDev.LDWaveForm.PlayWavFile(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            wav ファイルを再生します。
         </summary>
         <param name="fileName">* .wav ファイル。</param>
         <param name="duration">期間（ミリ秒）。これが負の場合、波形は繰り返されます（期間）。</param>
         <returns>波の名前または失敗時の ""</returns>
      </member>
      <member name="M:LitDev.LDWaveForm.PlayDX7(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            DX7 を再生します。
         </summary>
         <param name="channels">各チャンネルの値の配列（0 ～ 1 の値、通常は 8 チャンネル）。</param>
         <returns>波の名前または失敗時の ""</returns>
      </member>
      <member name="P:LitDev.LDWaveForm.Volume">
         <summary>
            波形を再生する音量（0 ～ 100）。
         </summary>
      </member>
      <member name="P:LitDev.LDWaveForm.Pan">
         <summary>
            左（-100）から右（100）のステレオパンニング（デフォルトは 0）。
         </summary>
      </member>
      <member name="P:LitDev.LDWaveForm.Loop">
         <summary>
            サウンドを "True" または "False" のデフォルトで連続的にループします。
            Lopping サウンドは、再生中に Stop メソッドを呼び出すことで停止できます。
         </summary>
      </member>
      <member name="P:LitDev.LDWaveForm.Async">
         <summary>
            サウンドを非同期で再生します（サウンドが完了する前に戻ります）。デフォルトは "True" または "False" です。
         </summary>
      </member>
      <member name="P:LitDev.LDWaveForm.Amplitude">
         <summary>
            信号の振幅（最大値は 2^15 = 32768、デフォルトは 20262）。
         </summary>
      </member>
      <member name="T:LitDev.LDxml">
         <summary>
            xml ファイルの解析方法。
         </summary>
      </member>
      <member name="M:LitDev.LDxml.Open(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            既存の xml ファイルを開きます。他のメソッドを使用するには、このメソッドを呼び出す必要があります。
         </summary>
         <param name="fileName">
            xml ファイルのフルパスを開きます。
            これが "" の場合、新しい空の XML 文書が作成されます。
         </param>
         <returns>文書の名前または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDxml.Switch(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            開いている別の xml ドキュメントに切り替えます。すべての文書の現在のノードが保存されます。
         </summary>
         <param name="docName">Open メソッドによって返された名前。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDxml.FirstNode">
         <summary>
            現在のノードを最初のドキュメントノードに設定します。
         </summary>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDxml.NextSibling">
         <summary>
            現在のノードがある場合は、そのノードを次の兄弟ノードに移動します。
         </summary>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDxml.PreviousSibling">
         <summary>
            現在のノードがある場合は、そのノードを前の兄弟ノードに移動します。
         </summary>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDxml.FirstChild">
         <summary>
            現在のノードがある場合は、そのノードを最初の子ノードに移動します。
         </summary>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDxml.LastChild">
         <summary>
            現在のノードを最後の子ノードに移動します（存在する場合）。
         </summary>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDxml.Parent">
         <summary>
            現在のノードを親ノードに移動します（存在する場合）。
         </summary>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDxml.AddNode(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            新しいノードを追加します。
            現在のノードは変更されず、新しいノードに更新されません。
         </summary>
         <param name="name">新しいノード要素名。</param>
         <param name="attributes">新しいノードまたは "" の属性の配列（属性名でインデックスされた値）。</param>
         <param name="text">新しいノードまたは "" の内部テキスト。</param>
         <param name="location">
            ノードが挿入されている場所。
            "Append" - 現在のノードの子ノードの最後に挿入します。
            "Prepend" - 現在のノードの子ノードの先頭に挿入します。
            "Before" - 現在のノードの前に挿入します。
            "After" - 現在のノードの後に挿入します。
         </param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDxml.RemoveNode">
         <summary>
            現在のノードとすべての子ノードを削除します。
            前の兄弟が存在しない場合、現在のノードは前の兄弟ノードまたは親ノードにリセットされます。
         </summary>
         <returns>新しい現在のノード "SIBLING"、"PARENT" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDxml.Save(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在の XML 文書をファイルに保存します。
         </summary>
         <param name="fileName">xml を書き込むためのファイルへのフルパス。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDxml.ToArray">
         <summary>
            現在の XML 文書を Small Basic 配列に変換します。
            配列の構造および深さは、かなり複雑であり得る。
            各ノードには、オプションの配列 "Attributes"（属性） と "Children"（子） または "Data"（データ） があります。
            子ノードがある場合、最初に数字でインデックスされ、同じ名前の複数の子を区切ります。
         </summary>
         <returns>Small Basic 配列または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDxml.FromArray(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ToArray メソッドの逆関数を実行し、配列定義から xml ドキュメントを作成します。
         </summary>
         <param name="array">正しい形式の Small Basic 配列。</param>
         <returns>文書の名前または "FAILED"。</returns>
      </member>
      <member name="P:LitDev.LDxml.NodeType">
         <summary>
            現在のノードの型を取得します。
            多くのタイプのうちの 1 つであるが、一般的には "Element"（要素） または "Text"（テキスト） です。
         </summary>
      </member>
      <member name="P:LitDev.LDxml.NodeName">
         <summary>
            現在のノードの名前を取得するか、失敗した場合に "" を取得します。
         </summary>
      </member>
      <member name="P:LitDev.LDxml.NodeInnerText">
         <summary>
            現在のノードとすべての子の内部テキストを取得するか、失敗した場合は "" 取得します。
         </summary>
      </member>
      <member name="P:LitDev.LDxml.ChildrenCount">
         <summary>
            現在のノードの子の数を取得します。
         </summary>
      </member>
      <member name="P:LitDev.LDxml.AttributesCount">
         <summary>
            現在のノードの属性の数を取得します。
         </summary>
      </member>
      <member name="P:LitDev.LDxml.Attributes">
         <summary>
            失敗した場合に属性名または "" でインデックス付けされた属性テキスト値の配列を取得します。
         </summary>
      </member>
      <member name="T:LitDev.LDftp">
         <summary>
            ftp メソッド。
         </summary>
      </member>
      <member name="M:LitDev.LDftp.Upload(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ftp でファイルをアップロードする。
         </summary>
         <param name="localFile">アップロードするローカルファイルへのフルパス。</param>
         <param name="remoteFile">アップロードするリモートファイルへのフルパス（サーバー上）。</param>
         <param name="ftpServerIP">ftp サーバアドレス（または IP）。</param>
         <param name="ftpUserID">ユーザー ID。</param>
         <param name="ftpPassword">ユーザーのパスワード。</param>
         <returns>非同期の場合、"SUCCESS"（成功）、"FAILED"（失敗） または "PENDING"（保留）。</returns>
      </member>
      <member name="M:LitDev.LDftp.Download(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ftp でファイルをダウンロードする。
         </summary>
         <param name="localFile">ダウンロードするローカルファイルへのフルパス。</param>
         <param name="remoteFile">ダウンロードするリモートファイルへのフルパス（サーバー上）。</param>
         <param name="ftpServerIP">ftp サーバアドレス（または IP）。</param>
         <param name="ftpUserID">ユーザー ID。</param>
         <param name="ftpPassword">ユーザーのパスワード。</param>
         <returns>非同期の場合、"SUCCESS"（成功）、"FAILED"（失敗） または "PENDING"（保留）。</returns>
      </member>
      <member name="M:LitDev.LDftp.Delete(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ftp でファイルを削除する。
         </summary>
         <param name="remoteFile">削除するリモートファイルへのフルパス（サーバー上）。</param>
         <param name="ftpServerIP">ftp サーバアドレス（または IP）。</param>
         <param name="ftpUserID">ユーザー ID。</param>
         <param name="ftpPassword">ユーザーのパスワード。</param>
         <returns>非同期の場合、"SUCCESS"（成功）、"FAILED"（失敗） または "PENDING"（保留）。</returns>
      </member>
      <member name="M:LitDev.LDftp.ListFiles(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ftp でリモートフォルダのリストを取得します（非同期のみ）。
         </summary>
         <param name="remoteFolder">一覧表示するリモートフォルダへのフルパス（サーバー上）。</param>
         <param name="ftpServerIP">ftp サーバアドレス（または IP）。</param>
         <param name="ftpUserID">ユーザー ID。</param>
         <param name="ftpPassword">ユーザーのパスワード。</param>
         <returns>ファイル名とフォルダ名の配列、または "FAILED"。配列はファイル名でインデックスされ、値には追加情報が含まれます。</returns>
      </member>
      <member name="P:LitDev.LDftp.LastFTPFile">
         <summary>
            最後の非同期 FTP ファイルが転送されました。
         </summary>
      </member>
      <member name="P:LitDev.LDftp.LastFTPStatus">
         <summary>
            最後の非同期 FTP ファイルステータス（"SUCCESS"（成功） または "FAILED"（失敗））
         </summary>
      </member>
      <member name="P:LitDev.LDftp.UseBinary">
         <summary>
            ftp 転送がバイナリ（デフォルト）か ascii を使用するかどうかを設定するか取得します。（"True" または "False"）。
         </summary>
      </member>
      <member name="P:LitDev.LDftp.DoAssync">
         <summary>
            ftp 転送が非同期に実行されるかどうかを設定または取得します（デフォルトは "True" または "False"）。
            非同期 FTP 転送はすぐに戻り、バックグラウンドで完了します。
            tranfer が終了すると、イベント FTPComplete が呼び出されます。
         </summary>
      </member>
      <member name="E:LitDev.LDftp.FTPComplete">
         <summary>
            非同期 FTP 転送が完了したときのイベント。
         </summary>
      </member>
      <member name="T:LitDev.LDFastShapes">
         <summary>
            標準の Small Basic Shape 操作よりも高速な Shape メソッド。
            これは、主に、ゲームループで更新された多数の図形がある場合の図形移動用です。
            主な図形コマンドのみがサポートされています。これは、頻繁に何回も繰り返されるものなので、サポートされています。
            最初に図形を作成してから登録し（ShapeIndex）、他のメソッドで使用される整数インデックスを返す必要があります。
            すべての変更が一緒に処理されるときに（Update）が呼び出されるまで、変更の視覚的な更新は行われません。
            パフォーマンスの向上は、整数インデックス作成とバッチ更新の両方からもたらされます。
         </summary>
      </member>
      <member name="M:LitDev.LDFastShapes.ShapeIndex(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            このオブジェクトで使用する図形を登録します。
            このコマンドは潜在的に遅いため、時間的に重要な視覚的な更新が行われる前に呼び出される必要があります。
            モーションがシミュレートされる前にすべての形状を作成して登録する。
         </summary>
         <param name="shapeName">作成された図形の名前。</param>
         <returns>
            このオブジェクトの他のメソッドで使用するインデックスです。
            インデックスは 1 から始まる整数で、登録された各図形ごとにインクリメントされます。
            -1 はエラーです。
         </returns>
      </member>
      <member name="M:LitDev.LDFastShapes.Update">
         <summary>
            前回の更新以降に変更されたこのオブジェクトによって設定された図形のすべてのプロパティを更新します。
            このメソッドが呼び出されるまで、図形は視覚的に更新されません。
         </summary>
      </member>
      <member name="M:LitDev.LDFastShapes.Move(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定された名前の図形を新しい位置に移動します。
         </summary>
         <param name="index">
            移動する図形のインデックス（ShapeIndex から返されます）。
         </param>
         <param name="x">
            新しい位置の x 座標。
         </param>
         <param name="y">
            新しい位置の y 座標。
         </param>
      </member>
      <member name="M:LitDev.LDFastShapes.GetLeft(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定された図形の左座標を取得します。
         </summary>
         <param name="index">
            図形のインデックス（ShapeIndex によって返される）。
         </param>
         <returns>
            図形の左座標。
         </returns>
      </member>
      <member name="M:LitDev.LDFastShapes.GetTop(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定された図形の上の座標を取得します。
         </summary>
         <param name="index">
            図形のインデックス（ShapeIndex によって返される）。
         </param>
         <returns>
            図形の上の座標。
         </returns>
      </member>
      <member name="M:LitDev.LDFastShapes.SetOpacity(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            図形がどのように不透明にレンダリングされるかを設定します。
         </summary>
         <param name="index">
            図形のインデックス（ShapeIndex によって返される）。
         </param>
         <param name="level">
            0 ～ 100 の不透明度レベル。0 は完全に透明で 100 は完全に不透明です。
         </param>
      </member>
      <member name="M:LitDev.LDFastShapes.GetOpacity(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            図形の不透明度を取得します。
         </summary>
         <param name="index">
            図形のインデックス（ShapeIndex によって返される）。
         </param>
         <returns>
            0 ～ 100 の値のオブジェクトの不透明度。0 は完全に透明で 100 は完全に不透明です。
         </returns>
      </member>
      <member name="M:LitDev.LDFastShapes.Rotate(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定された名前の図形を指定された角度に回転します。
         </summary>
         <param name="index">
            図形のインデックス（ShapeIndex によって返される）。
         </param>
         <param name="angle">
            形状を回転させる角度。
         </param>
      </member>
      <member name="M:LitDev.LDFastShapes.Zoom(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定したズームレベルを使用して図形をスケールします。
         </summary>
         <param name="index">
            図形のインデックス（ShapeIndex によって返される）。
         </param>
         <param name="scaleX">
            x 軸ズームレベル。
         </param>
         <param name="scaleY">
            y 軸ズームレベル。
         </param>
      </member>
      <member name="M:LitDev.LDFastShapes.HideShape(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            既に追加された図形を非表示にします。
         </summary>
         <param name="index">
            図形のインデックス（ShapeIndex によって返される）。
         </param>
      </member>
      <member name="M:LitDev.LDFastShapes.ShowShape(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            以前は隠した図形を表示します。
         </summary>
         <param name="index">
            図形のインデックス（ShapeIndex によって返される）。
         </param>
      </member>
      <member name="T:LitDev.LDColours">
         <summary>
            Standard SmallBasic の色と他のカラーユーティリティを取得します。
         </summary>
      </member>
      <member name="M:LitDev.LDColours.HSLtoRGB(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            色相、彩度、明度（HSL）の色を SmallBasic で使用される赤、緑、青（RGB）の色に変換します。
         </summary>
         <param name="H">色相（0 ～ 360）。</param>
         <param name="S">飽和（0 ～ 1）。</param>
         <param name="L">明度（0 ～ 1）。</param>
         <returns>RGB カラー</returns>
      </member>
      <member name="M:LitDev.LDColours.SetOpacity(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            色の不透明度を変更します。
         </summary>
         <param name="colour">変更する色。</param>
         <param name="opacity">不透明度（0 ～ 255）。</param>
         <returns>変更された色。</returns>
      </member>
      <member name="M:LitDev.LDColours.GetRed(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            色の赤コンポーネントを取得します。
         </summary>
         <param name="colour">コンポーネントを取得するための色。</param>
         <returns>赤のコンポーネント（0 ～ 255）。</returns>
      </member>
      <member name="M:LitDev.LDColours.GetGreen(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            色の緑の成分を取得します。
         </summary>
         <param name="colour">コンポーネントを取得するための色。</param>
         <returns>緑のコンポーネント（0 ～ 255）。</returns>
      </member>
      <member name="M:LitDev.LDColours.GetBlue(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            色の青成分を取得します。
         </summary>
         <param name="colour">コンポーネントを取得するための色。</param>
         <returns>青のコンポーネント（0 ～ 255）。</returns>
      </member>
      <member name="M:LitDev.LDColours.GetOpacity(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            色の不透明度コンポーネントを取得します。
         </summary>
         <param name="colour">コンポーネントを取得するための色。</param>
         <returns>不透明成分（0 ～ 255）。</returns>
      </member>
      <member name="M:LitDev.LDColours.GetHue(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            色の色相成分を取得します。
         </summary>
         <param name="colour">コンポーネントを取得するための色。</param>
         <returns>色相成分（0 ～ 360）。</returns>
      </member>
      <member name="M:LitDev.LDColours.GetSaturation(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            色の彩度成分を取得します。
         </summary>
         <param name="colour">コンポーネントを取得するための色。</param>
         <returns>彩度成分（0 ～ 1）。</returns>
      </member>
      <member name="M:LitDev.LDColours.GetLightness(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            色の明度成分を取得します。
         </summary>
         <param name="colour">コンポーネントを取得するための色。</param>
         <returns>明度成分（0 ～ 1）。</returns>
      </member>
      <member name="T:LitDev.LDArray">
         <summary>
            標準の SmallBasic 配列よりもはるかに高速な 1 次元配列メソッドです。

            100 ～ 1000 以上の要素を持つ配列に役立ちます。
            エラーが発生すると、"FAILED" という戻り値が返されます。
         </summary>
      </member>
      <member name="M:LitDev.LDArray.Create(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            新しい配列を作成します（数字や文字列に使用できます）。
         </summary>
         <param name="maxSize">
            配列内の要素の最大数。
         </param>
         <returns>
            配列名または "FAILED"。
         </returns>
      </member>
      <member name="M:LitDev.LDArray.Delete(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            既存の配列を削除します（一般的には必要ありませんが、多数の配列が作成されている場合はメモリを節約できます）。
         </summary>
         <param name="array">
            配列名。
         </param>
         <returns>
            成功のためには "FAILED" または ""。
         </returns>
      </member>
      <member name="M:LitDev.LDArray.SetValue(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            値を配列で設定します。
         </summary>
         <param name="array">
            配列名。
         </param>
         <param name="index">
            値を追加するインデックスです（インデックスは 1 から始まります）。
         </param>
         <param name="value">
            値。
         </param>
         <returns>
            成功のためには "FAILED" または ""。
         </returns>
      </member>
      <member name="M:LitDev.LDArray.GetValue(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            値を配列で取得します。
         </summary>
         <param name="array">
            配列名。
         </param>
         <param name="index">
            値を取得するインデックスです（インデックスは 1 から始まります）。
         </param>
         <returns>
            値または "FAILED"。
         </returns>
      </member>
      <member name="M:LitDev.LDArray.CopyNew(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            1 つの配列を新しい配列にコピーします。
         </summary>
         <param name="array">
            コピーする配列。
         </param>
         <returns>
            配列のコピーまたは "FAILED"。
         </returns>
      </member>
      <member name="M:LitDev.LDArray.Copy(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ある配列を別の配列にコピーします。
            2 つの配列の次元は同じでなければなりません。
         </summary>
         <param name="array1">
            コピー元の配列。
         </param>
         <param name="array2">
            コピー先の配列。
         </param>
         <returns>
            成功のためには "FAILED" または ""。
         </returns>
      </member>
      <member name="M:LitDev.LDArray.CopyToSBArray(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            LDArray 型を SmallBasic 配列型にコピーします。

            SmallBasic インデックスが必ずしも連続した整数ではないため、逆オペレーション（SmallBasic から LDArray へ）は不可能です。
            また、SmallBasic 配列は空の文字列値を保持できないため、これらはコピーされません。
         </summary>
         <param name="array">
            配列名。
         </param>
         <returns>
            SmallBasic 配列または "FAILED"。
         </returns>
      </member>
      <member name="M:LitDev.LDArray.Sort(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            LDArray でソートを実行します。

            デフォルトでは、ソートは文字列値であるため、10 は 2 の前に来ます。
            数値でソートするには、すべての値が数値（または空）でなければなりません。

            空の値はソートの最後に置かれます。
            入力配列はソートされた配列に置き換えられます。
         </summary>
         <param name="array">並べ替える配列。</param>
         <returns>
            成功のためには "FAILED" または ""。
         </returns>
      </member>
      <member name="M:LitDev.LDArray.Count(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            配列内の空でない要素の数を取得します。
         </summary>
         <param name="array">配列名。</param>
         <returns>配列内の空でない値の数。</returns>
      </member>
      <member name="M:LitDev.LDArray.SortIndex(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            配列のソート順のインデックスの配列を取得します。

            デフォルトでは、ソートは文字列値であるため、10 は 2 の前に来ます。
            数値でソートするには、すべての値が数値（または空）でなければなりません。

            空の値はソートの最後に置かれます。
            入力配列は変更されず、並べ替える配列と同じサイズでインデックス配列を事前に作成する必要があります。
         </summary>
         <param name="array">インデックスの順序ソートを取得するための配列。</param>
         <param name="index">ソートされた配列のインデックス順を保持する配列。</param>
         <returns>
            成功のためには "FAILED" または ""。
         </returns>
      </member>
      <member name="M:LitDev.LDArray.Search(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            searchstring を含む値を持つインデックスの配列を取得します。
            検索で大文字と小文字が区別されます。
            入力配列は変更されず、照合する配列と同じサイズで照合配列を作成しておく必要があります。
         </summary>
         <param name="array">一致するかどうかを調べる配列。</param>
         <param name="searchstring">検索する文字列。</param>
         <param name="match">一致した値のインデックスを保持する配列。</param>
         <returns>
            見つかった一致の数。
         </returns>
      </member>
      <member name="M:LitDev.LDArray.Save(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            配列をファイルに保存します。
         </summary>
         <param name="array">保存する配列。</param>
         <param name="fileName">ファイルを保存するファイルパス。</param>
         <returns>
            保存される要素の数。
         </returns>
      </member>
      <member name="M:LitDev.LDArray.Load(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ファイルから配列をロードします。
         </summary>
         <param name="array">
            データをロードする配列。
            配列はすでに存在していなければなりません。
         </param>
         <param name="fileName">配列をロードするファイルパス。</param>
         <returns>
            ロードされた要素の数。
         </returns>
      </member>
      <member name="M:LitDev.LDArray.CreateFromIndices(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            Small Basic 配列のインデックスから新しい配列を作成します。
         </summary>
         <param name="sbArray">Small Basic 配列。</param>
         <returns>
            新しい配列または "FAILED"。
         </returns>
      </member>
      <member name="M:LitDev.LDArray.CreateFromValues(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            Small Basic 配列の値から新しい配列を作成します。
         </summary>
         <param name="sbArray">Small Basic 配列。</param>
         <returns>
            新しい配列または "FAILED"。
         </returns>
      </member>
      <member name="M:LitDev.LDArray.GetIndex(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            Small Basic 配列内の値の最初の出現のインデックスを取得します。
         </summary>
         <param name="sbArray">Small Basic 配列。</param>
         <param name="value">検索する値。</param>
         <returns>配列内の値のインデックス。存在しない場合は ""、または "FAILED" の場合。</returns>
      </member>
      <member name="T:LitDev.LDControls">
         <summary>
            GraphicsWindow のコントロール。
         </summary>
      </member>
      <member name="M:LitDev.LDControls.AddTreeView(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ツリービューのダイアログコントロールを追加します。
         </summary>
         <param name="tree">
            ツリービューデータを含む 2D 配列。

            最初のインデックスは行またはノード番号で、2 番目のインデックスは現在のノードの親ノードです（最上位レベルの場合は 0）。
            配列の値は、現在のノードの表示テキストです。

            tree[1][0] = "Level 1"
            tree[2][1] = "Level 1 1"
            tree[3][1] = "Level 1 2"
            tree[4][0] = "Level 2"
         </param>
         <param name="width">コントロールの幅。</param>
         <param name="height">コントロールの高さ。</param>
         <returns>ツリービューの図形名。</returns>
      </member>
      <member name="M:LitDev.LDControls.TreeViewExpand(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            入力ノードの下のツリービューでノードを展開 / 折りたたむ。
         </summary>
         <param name="shapeName">ツリービューの図形名。</param>
         <param name="node">展開 / 崩壊するノード番号、0 はすべてのノードを漸増 / 崩壊させる。</param>
         <param name="expand">"True" または "False" を展開または折りたたむ</param>
         <param name="recursive">再帰的にノードを展開 / 折りたたむ（すべての子ノード）"True" または "False"</param>
      </member>
      <member name="M:LitDev.LDControls.TreeViewSelect(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ツリービュー内のノードを選択します。
         </summary>
         <param name="shapeName">ツリービューの図形名。</param>
         <param name="node">選択するノード。</param>
      </member>
      <member name="M:LitDev.LDControls.TreeViewGetSelected(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            選択されたツリービューを取得します。
         </summary>
         <param name="shapeName">ノードを取得するためのツリービュー。</param>
         <returns>ツリービューの選択されたノード。</returns>
      </member>
      <member name="M:LitDev.LDControls.TreeViewContent(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ツリービューツリーを置き換えます。
         </summary>
         <param name="shapeName">ツリービューの図形名。</param>
         <param name="tree">
            ツリービューデータを含む 2D 配列。

            最初のインデックスは行またはノード番号で、2 番目のインデックスは現在のノードの親ノードです（最上位レベルの場合は 0）。
            配列の値は、現在のノードの表示テキストです。

            tree[1][0] = "Level 1"
            tree[2][1] = "Level 1 1"
            tree[3][1] = "Level 1 2"
            tree[4][0] = "Level 2"
         </param>
      </member>
      <member name="M:LitDev.LDControls.TreeViewGetData(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ツリービューツリーからデータを取得します。
         </summary>
         <param name="shapeName">ツリービューの図形名。</param>
         <returns>
            ツリービューデータを含む 2D 配列。

            最初のインデックスは行またはノード番号で、2 番目のインデックスは現在のノードの親ノードです（最上位レベルの場合は 0）。
            配列の値は、現在のノードの表示テキストです。

            tree[1][0] = "Level 1"
            tree[2][1] = "Level 1 1"
            tree[3][1] = "Level 1 2"
            tree[4][0] = "Level 2"
         </returns>
      </member>
      <member name="M:LitDev.LDControls.TreeViewEdit(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ツリービューノードの編集可能なステータスを変更します。
         </summary>
         <param name="shapeName">ツリービューの図形名。</param>
         <param name="node">選択するノード。</param>
         <param name="editable">編集可能な TextBox を "True" にしたり、編集不可能な "False" にします。</param>
      </member>
      <member name="M:LitDev.LDControls.AddRichTextBox(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            RichTextBox を追加します。
            ドラッグアンドドロップは、このコントロールに対して自動的に設定されます。
         </summary>
         <param name="width">RichTextBox の幅。</param>
         <param name="height">RichTextBox の高さ。</param>
         <returns>RichTextBox の名前。</returns>
      </member>
      <member name="M:LitDev.LDControls.AddContextMenu(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            コンテキストメニューをサポートするコントロールまたは図形の右クリックコンテキストメニューを追加します。
         </summary>
         <param name="shapeName">コントロール名または図形名。</param>
         <param name="items">コンテキストメニュー項目の選択テキストの配列。</param>
         <param name="images">
            オプションの画像アイコンの配列。いずれかまたはすべてが "" である可能性があります。
            ImageList.LoadImage またはローカルまたはネットワークイメージファイルの結果である可能性があります。
         </param>
      </member>
      <member name="M:LitDev.LDControls.RichTextBoxSave(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            RichTextBox テキストを保存し、rtf 形式のファイルに書式設定します。
         </summary>
         <param name="shapeName">RichTextBox コントロール。</param>
         <param name="fileName">テキストと書式を保存するファイル。</param>
         <returns>なし。</returns>
      </member>
      <member name="M:LitDev.LDControls.RichTextBoxLoad(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            rtf 形式のファイルから RichTextBox にテキストと書式をロードします。
         </summary>
         <param name="shapeName">RichTextBox コントロール。</param>
         <param name="fileName">テキストと書式をロードするファイル。</param>
         <param name="append">既存のテキストに "True" または "False" を追加します。</param>
         <returns>なし。</returns>
      </member>
      <member name="M:LitDev.LDControls.RichTextBoxMargins(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            RichTextBox 段落のマージン（ピクセル単位）を設定します。
            RichTextBoxSetText を使用して追加（または作成）された各テキストに対して、新しい段落が作成されます。
         </summary>
         <param name="left">左余白（デフォルトは 0）。</param>
         <param name="right">右マージン（デフォルトは 0）。</param>
         <param name="top">上マージン（デフォルトは 0）。</param>
         <param name="bottom">ボトムマージン（デフォルトは 0）。</param>
      </member>
      <member name="M:LitDev.LDControls.RichTextBoxSetText(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            RichTextBox にテキスト（書式なし）を設定します。
         </summary>
         <param name="shapeName">RichTextBox コントロール。</param>
         <param name="text">読み込むテキスト。</param>
         <param name="append">
            既存のテキストに "True" または "False" を追加します。
            テキストが追加されると、新しい段落が作成されます。段落の余白を設定するには RichTextBoxMargins を参照してください。
         </param>
         <returns>なし。</returns>
      </member>
      <member name="M:LitDev.LDControls.RichTextBoxGetText(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            RichTextBox でテキスト（未フォーマット）を取得します。
         </summary>
         <param name="shapeName">RichTextBox コントロール。</param>
         <returns>テキスト。</returns>
      </member>
      <member name="M:LitDev.LDControls.RichTextBoxSelection(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在の RichTextBox プロパティを使用して、選択した RichTextBox テキストのフォントスタイルを設定します。
         </summary>
         <param name="shapeName">RichTextBox コントロール。</param>
         <returns>なし。</returns>
      </member>
      <member name="M:LitDev.LDControls.RichTextBoxWord(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在の RichTextBox のプロパティを使用して、語句のフォントスタイルを設定します。
         </summary>
         <param name="shapeName">RichTextBox コントロール。</param>
         <param name="text">変更するテキスト（RichTextBoxCaseSensitive パラメータで設定された大文字小文字の区別）。</param>
         <param name="mode">
            設定する単語またはフレーズのインスタンスを制御します。
            0  - すべてのインスタンス
            1  - 最初のインスタンス
            2  - 最後のインスタンス
         </param>
         <returns>なし。</returns>
      </member>
      <member name="M:LitDev.LDControls.RichTextBoxDefault(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在の RichTextBox のプロパティを使用して、デフォルトのフォントスタイルを設定します。
            RichTextBoxFontDecoration はこのオプションでは使用できません。
         </summary>
         <param name="shapeName">RichTextBox コントロール。</param>
         <returns>なし。</returns>
      </member>
      <member name="M:LitDev.LDControls.RichTextBoxClear(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            RichTextBox からすべてのテキストをクリアします。
         </summary>
         <param name="shapeName">RichTextBox コントロール。</param>
         <returns>なし。</returns>
      </member>
      <member name="M:LitDev.LDControls.AddBrowser(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            Web ブラウザを追加します。
         </summary>
         <param name="width">ブラウザの幅。</param>
         <param name="height">ブラウザの高さ。</param>
         <param name="url">読み込む HTML ペイン（例：http://smallbasic.com または www.google.com）</param>
         <returns>ブラウザのコントロール名。</returns>
      </member>
      <member name="M:LitDev.LDControls.BrowserSetURL(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            Web ブラウザのページを設定します。
         </summary>
         <param name="shapeName">ブラウザ名。</param>
         <param name="url">読み込む HTML ペイン（例：http://smallbasic.com または www.google.com）</param>
      </member>
      <member name="M:LitDev.LDControls.BrowserNavigate(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ブラウザページを前後に移動します。
         </summary>
         <param name="shapeName">ブラウザ名。</param>
         <param name="direction">"F" または "B" の順または逆方向。</param>
      </member>
      <member name="M:LitDev.LDControls.BrowserHistory(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ブラウザの履歴の配列を取得します（読み込まれたページ）。
         </summary>
         <param name="shapeName">ブラウザ名。</param>
         <returns>歴史の中の URL の配列。</returns>
      </member>
      <member name="M:LitDev.LDControls.AddListBox(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            リストボックスのダイアログコントロールを追加します。
         </summary>
         <param name="list">
            リストボックスデータを含む配列。

            最初のインデックスは行またはノード番号で、配列の値は現在のノードの表示テキストです。

            list[1] = "Option 1"
            list[2] = "Option 2"
            list[3] = "Option 3"
            list[4] = "Option 4"

            これは LDArray または LDList でもかまいません。
         </param>
         <param name="width">コントロールの幅。</param>
         <param name="height">コントロールの高さ。</param>
         <returns>リストボックスの図形名。</returns>
      </member>
      <member name="M:LitDev.LDControls.ListBoxSelect(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            リストボックス内の 1 つまたは複数のノードを選択します。
         </summary>
         <param name="shapeName">リストボックスの図形名。</param>
         <param name="node">
            選択するノード番号。
            選択モードが単一でない場合は、ノードの配列になります（ListBoxSelectionMode を参照）。
         </param>
      </member>
      <member name="M:LitDev.LDControls.ListBoxGetSelected(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            選択されたリストボックスを取得します。
         </summary>
         <param name="shapeName">ノードを取得するリストボックス。</param>
         <returns>
            選択されたノード番号のリストボックス。
            選択モードが単一でない場合（ListBoxSelectionMode を参照）、ノードの配列が返されます。
            選択されたノードがない場合の戻り値は "" です。
         </returns>
      </member>
      <member name="M:LitDev.LDControls.AddComboBox(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            コンボボックスダイアログコントロールを追加します。
         </summary>
         <param name="list">
            コンボボックスデータを含む配列。

            最初のインデックスは行またはノード番号で、配列の値は現在のノードの表示テキストです。

            list[1] = "Option 1"
            list[2] = "Option 2"
            list[3] = "Option 3"
            list[4] = "Option 4"
         </param>
         <param name="width">コントロールの幅。</param>
         <param name="height">コントロールのドロップダウンの高さ。</param>
         <returns>コンボボックスの図形名。</returns>
      </member>
      <member name="M:LitDev.LDControls.ComboBoxSelect(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            コンボボックス内のノードを選択します。
         </summary>
         <param name="shapeName">コンボボックスの図形名。</param>
         <param name="node">選択するノード。</param>
      </member>
      <member name="M:LitDev.LDControls.ComboBoxGetSelected(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            コンボボックスの選択されたノードを取得します。
         </summary>
         <param name="shapeName">ノードを取得するためのコンボボックス。</param>
         <returns>コンボボックス選択ノード。</returns>
      </member>
      <member name="M:LitDev.LDControls.ListBoxSelectionMode(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            リストボックスコントロールの選択モードを設定します。
         </summary>
         <param name="shapeName">リストボックスのコントロール名。</param>
         <param name="mode">
            次のいずれか：
            "Single" - 単一選択（デフォルト）。
            "Multiple"（複数） - コントロールキーを使用した複数の選択。
            "Extended"（拡張） - コントロールとシフトキーを使用した拡張選択。
         </param>
      </member>
      <member name="M:LitDev.LDControls.AddCheckBox(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            チェックボックスのダイアログコントロールを追加します。
         </summary>
         <param name="title">コントロールのタイトル。</param>
         <returns>チェックボックスの図形名。</returns>
      </member>
      <member name="M:LitDev.LDControls.CheckBoxState(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            チェックボックスのチェック状態を設定します。
         </summary>
         <param name="shapeName">チェックボックスの図形名。</param>
         <param name="state">チェックボックスのチェック状態（"True" または "False"）。</param>
      </member>
      <member name="M:LitDev.LDControls.CheckBoxGetState(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            チェックボックスのチェック状態を取得します。
         </summary>
         <param name="shapeName">状態を取得するためのチェックボックス。</param>
         <returns>チェックボックスはチェックされた状態。</returns>
      </member>
      <member name="M:LitDev.LDControls.SetCursorToEnd(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            カーソルキャレットをテキストボックスまたはリッチテキストボックスの末尾までスクロールします。
            これは、複数行テキストボックスまたはリッチテキストボックス用です。
         </summary>
         <param name="shapeName">テキストボックスの図形名。</param>
      </member>
      <member name="M:LitDev.LDControls.SetCursorPosition(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            カーソルキャレットをテキストボックス内の指定された位置に設定します。
         </summary>
         <param name="shapeName">テキストボックスの図形名。</param>
         <param name="position">カーソル文字の位置（0 が最初の文字の前にあるか、たとえば 1000 などの大きな値がカーソルを最後に設定します）。</param>
      </member>
      <member name="M:LitDev.LDControls.SetSpellCheck(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            テキストボックスまたはリッチテキストボックスのスペルチェックを設定します。
         </summary>
         <param name="shapeName">textbox または richtextbox の図形名。</param>
         <param name="state">"True" または "False"</param>
      </member>
      <member name="M:LitDev.LDControls.AddRadioButton(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ラジオボタンコントロールを追加します。
            グループ内のラジオボタンは 1 つだけ設定できます（排他的です）。
         </summary>
         <param name="title">ラジオボタンのテキストの説明。</param>
         <param name="group">ラジオボタンをグループ化するための名前。</param>
         <returns>ラジオボタンの形状名。</returns>
      </member>
      <member name="M:LitDev.LDControls.RadioButtonSet(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ラジオボタンを選択します。
         </summary>
         <param name="shapeName">設定するラジオボタン。</param>
      </member>
      <member name="M:LitDev.LDControls.RadioButtonGet(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ラジオボタンの状態を取得します。
         </summary>
         <param name="shapeName">ラジオボタンは状態を取得します。</param>
         <returns>ラジオボタンの状態。</returns>
      </member>
      <member name="M:LitDev.LDControls.AllowDrop(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ドラッグ＆ドロップができるように図形を設定します。
            現在、ドロップされたファイルを処理するために FileDropped イベントを使用せずに実装されているのは以下のものだけです：
            TextBox へのファイルパス（または MultiLineTextBox へのファイルパス）。
            RichTextBox でファイルが開かれました。
            DocumentViewer で開いた XPS ファイル。
            画像または背景で設定された画像。
            MediaPlayer 用のメディア（有効なメディアがすでにロードされている場合のみ有効）。
         </summary>
         <param name="shapeName">ドロップまたは "Background"（背景） を許可する図形。</param>
      </member>
      <member name="M:LitDev.LDControls.AddMediaPlayer(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            メディアプレーヤーを追加する（ビデオなどを再生するため）。
            ドラッグアンドドロップは、このコントロールに対して自動的に設定されます。
         </summary>
         <param name="width">メディアプレーヤーの幅。</param>
         <param name="height">メディアプレーヤーの高さ。</param>
         <returns>メディアプレーヤーのコントロール名。</returns>
      </member>
      <member name="M:LitDev.LDControls.MediaPlayerVolume(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            メディアプレーヤーの音量を設定します。
         </summary>
         <param name="shapeName">メディアプレーヤー名。</param>
         <param name="volume">ボリューム（0 ～ 1）のデフォルトは 0.5。</param>
      </member>
      <member name="M:LitDev.LDControls.MediaPlayerSpeed(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            メディアプレーヤーの再生速度を設定します。
         </summary>
         <param name="shapeName">メディアプレーヤー名。</param>
         <param name="speed">速度（0 ～ 100）はデフォルト 1（通常の再生）。</param>
      </member>
      <member name="M:LitDev.LDControls.MediaPlayerLoad(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            メディアプレーヤーのメディアを設定します。
         </summary>
         <param name="shapeName">メディアプレーヤー名。</param>
         <param name="media">ロードするメディア。画像、音楽またはビデオファイル、jp、mp3、mpg、avi、wmv など</param>
      </member>
      <member name="M:LitDev.LDControls.MediaPlayerStop(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            メディアプレーヤーの再生を停止する（現在ロードされているメディアを使用）。
         </summary>
         <param name="shapeName">メディアプレーヤー名。</param>
      </member>
      <member name="M:LitDev.LDControls.MediaPlayerPlay(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            メディアプレーヤーの再生を開始します（現在ロードされているメディアを使用します）。
         </summary>
         <param name="shapeName">メディアプレーヤー名。</param>
      </member>
      <member name="M:LitDev.LDControls.MediaPlayerPause(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            メディアプレーヤーの再生を一時停止する（現在ロードされているメディアを使用）。
         </summary>
         <param name="shapeName">メディアプレーヤー名。</param>
      </member>
      <member name="M:LitDev.LDControls.MediaPlayerSeek(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            メディアプレーヤーの位置を決める（現在ロードされているメディアを使用）。
         </summary>
         <param name="shapeName">メディアプレーヤー名。</param>
         <param name="seek">新しい再生位置（ms）。</param>
      </member>
      <member name="M:LitDev.LDControls.MediaPlayerPlayTime(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            メディアの再生時間を取得します（現在ロードされているメディアを使用します）。
         </summary>
         <param name="shapeName">メディアプレーヤー名。</param>
         <returns>メディア再生時間（ms）。</returns>
      </member>
      <member name="M:LitDev.LDControls.MediaPlayerPosition(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在のメディアを使用してメディアの現在の位置を取得します。
         </summary>
         <param name="shapeName">メディアプレーヤー名。</param>
         <returns>メディアの現在の位置（ミリ秒）。</returns>
      </member>
      <member name="M:LitDev.LDControls.MediaPlayerStretch(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ビジュアルメディアのストレッチを設定する - ビジュアルがその領域をどのように満たすか。
         </summary>
         <param name="shapeName">メディアプレーヤー名。</param>
         <param name="stretch">
            ストレッチ法。使用可能なストレッチオプションは次のとおりです。
            "None"（なし）（コンテンツは元のサイズを保持します）。
            "Uniform"（統一）（コンテンツは、ネイティブのアスペクト比を維持しながら宛先のサイズに合わせてサイズ変更されます - デフォルト）。
            "Fill"（塗りつぶし）（コンテンツのサイズが目的の寸法を満たすようにリサイズされます。アスペクト比は保持されません）。
            "UniformToFill"（コンテンツは、ネイティブのアスペクト比を維持しながら必要に応じてクリッピングすると、コピー先のサイズを満たすようにサイズが変更されます）。
         </param>
      </member>
      <member name="M:LitDev.LDControls.ListBoxContent(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            リストボックスリストを置き換えます。
         </summary>
         <param name="shapeName">リストボックスの図形名。</param>
         <param name="list">
            リストボックスデータを含む配列。

            最初のインデックスは行またはノード番号で、配列の値は現在のノードの表示テキストです。

            list[1] = "Option 1"
            list[2] = "Option 2"
            list[3] = "Option 3"
            list[4] = "Option 4"

            これは LDArray または LDList でもかまいません。
         </param>
      </member>
      <member name="M:LitDev.LDControls.ComboBoxContent(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            コンボボックスのリストを置き換えます。
         </summary>
         <param name="shapeName">コンボボックスの図形名。</param>
         <param name="list">
            コンボボックスデータを含む配列。

            最初のインデックスは行またはノード番号で、配列の値は現在のノードの表示テキストです。

            list[1] = "Option 1"
            list[2] = "Option 2"
            list[3] = "Option 3"
            list[4] = "Option 4"
         </param>
      </member>
      <member name="M:LitDev.LDControls.AddProgressBar(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            プログレスバーコントロールを追加します。
         </summary>
         <param name="width">コントロールの幅。</param>
         <param name="height">コントロールの高さ。</param>
         <param name="orientation">水平または垂直（"H" または "V"）。</param>
         <returns>進行状況バーの形状名。</returns>
      </member>
      <member name="M:LitDev.LDControls.ProgressBarValue(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            進行状況バーの値（進行状況）を設定します。
         </summary>
         <param name="shapeName">進行状況バーの形状名。</param>
         <param name="value">進捗値（0 ～ 100）。</param>
      </member>
      <member name="M:LitDev.LDControls.AddSlider(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            スライダコントロールを追加します。
         </summary>
         <param name="width">コントロールの幅。</param>
         <param name="height">コントロールの高さ。</param>
         <param name="orientation">水平または垂直（"H" または "V"）。</param>
         <returns>スライダ図形の名前。</returns>
      </member>
      <member name="M:LitDev.LDControls.SliderValue(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            スライダの値（位置）を設定します。
         </summary>
         <param name="shapeName">スライダ図形の名前。</param>
         <param name="value">スライダの値（0 ～ 100）。</param>
      </member>
      <member name="M:LitDev.LDControls.SliderGetValue(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            スライダの値（位置）を取得します。
         </summary>
         <param name="shapeName">スライダ図形の名前。</param>
         <returns>スライダの値（0 ～ 100）。</returns>
      </member>
      <member name="M:LitDev.LDControls.AddPasswordBox(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            パスワードボックスコントロールを追加します（文字が表示されていない texbox と、リターンが押されたときだけ PasswordEntered イベントが追加されます）。
         </summary>
         <param name="width">コントロールの幅。</param>
         <param name="height">コントロールの高さ。</param>
         <param name="length">パスワードの最大文字数。</param>
         <returns>パスワードボックスの形状の名前。</returns>
      </member>
      <member name="M:LitDev.LDControls.AddDocumentViewer(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ドキュメントビューアのダイアログコントロールを追加します。
            これで XPS ドキュメント（MS バージョンの PDF）を表示できます。
            ドラッグアンドドロップは、このコントロールに対して自動的に設定されます。
         </summary>
         <param name="width">コントロールの幅。</param>
         <param name="height">コントロールの高さ。</param>
         <returns>ドキュメントビューアの図形名。</returns>
      </member>
      <member name="M:LitDev.LDControls.DocumentViewerLoadXPS(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            XPS ファイルをドキュメントビューアのダイアログコントロールに読み込みます。
         </summary>
         <param name="shapeName">ドキュメントビューアコントロール。</param>
         <param name="fileName">ロードして表示する XPS ファイル。</param>
      </member>
      <member name="M:LitDev.LDControls.MenuChecked(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            メニュー項目のチェック状態を取得します。
         </summary>
         <param name="shapeName">メニュー図形名。</param>
         <param name="itemName">メニュー項目名。</param>
         <returns>"True" または "False"。</returns>
      </member>
      <member name="M:LitDev.LDControls.AddMenu(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            メニューコントロールを追加します。
         </summary>
         <param name="width">コントロールの幅。</param>
         <param name="height">コントロールの高さ。</param>
         <param name="menuList">
            メニュー項目の配列。インデックスはメニュー表示名で、値は親表示名です。
            トップレベルの表示名は "Main" にする必要があります。名前は click イベントで返されるので一意でなければなりません。
            セパレータは一意でなければならず、選択できないため、"-"、"--"、"---" などです。

            menuList["File"] = "Main"
            menuList["Open"] = "File"
            menuList["-"] = "File"
            menuList["Exit"] = "File"
            menuList["Help"] = "Main"
            menuList["Show Help"] = "Help"
         </param>
         <param name="iconList">
            オプションのアイコンイメージの配列（URL または ImageList）またはなしの場合は ""。

            iconList["File"] = Program.Directory+"/file.png"
         </param>
         <param name="checkList">
            チェック可能な項目、または none の項目を識別するためのオプションの配列。
            値は、最初にチェックされた状態 "True" または "False" です。

            checkList["Show Help"] = "True"
         </param>
         <returns>メニュー図形名。</returns>
      </member>
      <member name="M:LitDev.LDControls.MenuBackground(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            サブメニューの背景色を設定します。
            メインのトップメニューは、LDShapes.BrushColour で個別に着色することができます。
            セパレータは色付けされておらず、しばしばトップメニューに色付けするのが最善の方法です。
         </summary>
         <param name="shapeName">メニュー図形名。</param>
         <param name="colour">背景色です。</param>
      </member>
      <member name="M:LitDev.LDControls.TextBoxTab(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            TextBox がタブを受け入れるか、それを使用して次のコントロールを配置するかを設定します。
         </summary>
         <param name="shapeName">TextBox または RichTextBox の名前。</param>
         <param name="acceptsTab">"True" または "False"（デフォルト）。</param>
      </member>
      <member name="M:LitDev.LDControls.AddListView(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ListView コントロールを追加します。
         </summary>
         <param name="width">コントロールの幅。</param>
         <param name="height">コントロールの高さ。</param>
         <param name="headings">リストビューの見出しの配列。</param>
         <returns>リストビューの図形名。</returns>
      </member>
      <member name="M:LitDev.LDControls.ListViewColAlignment(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            リストビュー列の配置を設定します。
         </summary>
         <param name="shapeName">リストビューコントロール。</param>
         <param name="col">列番号（1 からのインデックス）。</param>
         <param name="alignment">"Left"（左）、"Center"（中央） または "Right"（右）</param>
      </member>
      <member name="M:LitDev.LDControls.ListViewSetRow(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            リストビューコントロールにデータの行を追加します。
         </summary>
         <param name="shapeName">リストビューコントロール。</param>
         <param name="row">
            行番号（1 からインデックス）。
            行番号が現在の行数より大きい場合、新しい行が追加されます。それ以外の場合は、行データが上書きされます。
         </param>
         <param name="values">値の配列（各列に 1 つ）。</param>
      </member>
      <member name="M:LitDev.LDControls.ListViewGetRow(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            リストビューコントロールから 1 行のデータを取得します。
         </summary>
         <param name="shapeName">リストビューコントロール。</param>
         <param name="row">行番号（1 からインデックス）。</param>
         <returns>値の配列（各列に 1 つずつ）または失敗した場合には ""</returns>
      </member>
      <member name="M:LitDev.LDControls.ListViewRowCount(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            リストビューコントロールの行数を取得します。
         </summary>
         <param name="shapeName">リストビューコントロール。</param>
         <returns>リストビュー内の行数。</returns>
      </member>
      <member name="M:LitDev.LDControls.ListViewDeleteRow(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            リストビューコントロールからデータの行を削除します。
         </summary>
         <param name="shapeName">リストビューコントロール。</param>
         <param name="row">
            行番号（1 からインデックス）。
            行番号が現在の行数より大きい場合、何も処理は行われません。
         </param>
      </member>
      <member name="M:LitDev.LDControls.ListViewClear(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            リストビューコントロールからすべての行を削除します。
         </summary>
         <param name="shapeName">リストビューコントロール。</param>
      </member>
      <member name="M:LitDev.LDControls.ListViewEdit(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            リストビューを編集可能な状態に変更します。
         </summary>
         <param name="shapeName">リストビューの図形名。</param>
         <param name="editable">編集可能なテキストボックスまたは編集不可能な TextBlock の "True"。</param>
      </member>
      <member name="M:LitDev.LDControls.TextBoxReadOnly(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            テキストボックスの読み取り専用状態を設定します。
         </summary>
         <param name="shapeName">テキストボックスコントロール。</param>
         <param name="readOnly">"True" または "False"（デフォルト）。</param>
      </member>
      <member name="M:LitDev.LDControls.AddDataView(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データビューコントロールを追加します。
            すべての行と列は 1 からインデックスされます。
            このコントロールは、常に GraphicsWindow 内の他のすべてのオブジェクトの上に表示されます。
         </summary>
         <param name="width">コントロールの幅。</param>
         <param name="height">コントロールの高さ。</param>
         <param name="headings">データビューの見出しの配列。</param>
         <returns>データビューの図形名。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewGetSelected(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データビュー内の選択されたすべてのセルのリストを取得します。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <returns>
            選択された行と列の 2 次元配列。
            cells[1][1] = 行、cells[1][2] = 列。
         </returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewSetFocus(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            フォーカスをデータビューセルに設定します。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <param name="row">行番号。</param>
         <param name="col">列番号。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewGetFocus(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            フォーカスのある現在のデータビューセルを取得します。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <returns>行番号と列番号がフォーカスのある 1 次元配列、または ""。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewSetValue(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データビューのセル値を設定します。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <param name="row">行番号。</param>
         <param name="col">列番号。</param>
         <param name="value">設定する値。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewGetValue(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データビューのセル値を取得します。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <param name="row">行番号。</param>
         <param name="col">列番号。</param>
         <returns>セルの値または ""。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewClear(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データビューのすべての行をクリアします。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewSetRow(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データビューのコントロールにデータの行を追加します。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <param name="row">
            行番号。
            行番号が現在の行数より大きい場合、新しい行が追加されます。それ以外の場合は、行データが上書きされます。
         </param>
         <param name="values">値の配列（各列に 1 つ）。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewDeleteRow(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データビューコントロールから行を削除します。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <param name="row">行番号。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewGetRow(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データビューコントロールからデータの行を取得します。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <param name="row">行番号。</param>
         <returns>値の配列（各列に 1 つずつ）または失敗した場合には ""</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewRowCount(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データビューコントロールの行数を取得します。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <returns>データビューの行数。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewAllowSort(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ヘッダーをクリックしてデータビューコントロールを列ソートできるようにします。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <param name="allow">"True"（デフォルト）を許可するか、"False" を許可しない。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewSaveAsCSV(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データビュー全体を CSV（カンマ区切りの値）テキストファイルに書き出します。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <param name="fileName">csv ファイルの絶対パス。</param>
         <param name="append">csv ファイルに "True" または "False" を追加します。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewReadFromCSV(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            csv（カンマ区切りの値）テキストファイルからデータビューコントロールにデータを追加します。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <param name="fileName">csv ファイルの絶対パス。</param>
         <param name="append">データビュー "True" または "False" に追加します。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewSetColumnComboBox(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データビューの列コントロールを、選択可能な値の ComboBox に変更します。
            これは、データビューが作成された後、データが追加される前に設定する必要があります。
            データビューがデータベースにバインドされている場合は、LDDataBase.EditTable が設定された後でこれを設定します。
            セルに対して取得および設定する値は、data パラメータで設定したラベルです。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <param name="col">列番号。</param>
         <param name="data">コンボボックスのデータ選択の配列。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewSetColumnButton(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データビューの列コントロールを Buttons に変更します。
            これは、データビューが作成された後、データが追加される前に設定する必要があります。
            データビューがデータベースにバインドされている場合は、LDDataBase.EditTable が設定された後でこれを設定します。
            これらのセルのデータはボタンのタイトルになります。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <param name="col">列番号。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewSetColumnCheckBox(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データビュー列コントロールを CheckBoxes に変更します。
            これは、データビューが作成された後、データが追加される前に設定する必要があります。
            データビューがデータベースにバインドされている場合は、LDDataBase.EditTable が設定された後でこれを設定します。
            これらのセルのデータは、"True" または "False" でなければなりません。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <param name="col">列番号。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewColumnSort(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データビューエントリを列でソートします。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <param name="col">並べ替える列番号。</param>
         <param name="ascending">昇順（"True"）または降順（"False"）に並べ替えます。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewColumnReadOnly(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            dataview 列を読み取り専用に設定します。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <param name="col">列番号。</param>
         <param name="readOnly">読み取り専用として "True" または "False"（デフォルト）を設定します。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewColumnVisible(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データビューの列を表示するかどうかを設定します。
            これは、たとえば、データベースの ID 列を隠すために使用できます。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <param name="col">列番号。</param>
         <param name="visible">"True"（デフォルト）または "False" として表示されます。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewAllowUserEntry(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ユーザーが最後の行にデータを追加できるようにします。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <param name="allow">ユーザーデータの入力を "True"（デフォルト）または "False" にします。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewColumnWidths(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            列の幅を設定します。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <param name="widths">列の幅の配列。"" 自動サイズ変更にリセットします。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewRowColours(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データの背景と前景（ペン）の色の行を設定します。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <param name="row">行番号。これを 0 に設定すると、交互の行がすべて設定されます。</param>
         <param name="background">背景色。</param>
         <param name="foreground">フォアグラウンドカラー。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDControls.DataViewColAlignment(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データビュー列の配置を設定します。
         </summary>
         <param name="shapeName">データビューコントロール。</param>
         <param name="col">列番号。</param>
         <param name="alignment">"Left"（左）、"Center"（中央） または "Right"（右）</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDControls.SetButtonStyle(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ボタンのスタイルを変更します。
         </summary>
         <param name="shapeName">変更するボタン。</param>
         <param name="brushUnpressed">非押しボタンの色は、グラデーションブラシです。</param>
         <param name="brushMouseOver">マウスの上にあるときのボタンの色は、グラデーションブラシでもかまいません。</param>
         <param name="brushPressed">押したボタンの色は、グラデーションブラシでもかまいません。</param>
         <param name="penUnpressed">非押されたボタンのテキストフォントの色。</param>
         <param name="penMouseOver">マウスの上にあるときのボタンのテキストフォント色。</param>
         <param name="penPressed">押されたボタンのテキストフォントの色です。</param>
         <param name="radius">ボタンの角の半径（デフォルトは 9）。</param>
         <param name="shine">' 輝き ' 効果を適用するか、"True"（デフォルト）または "False" を適用します。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="P:LitDev.LDControls.LastTreeView">
         <summary>
            選択が変更された最後のツリービュー。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastTreeViewIndex">
         <summary>
            最後のツリービュー選択で索引（行番号）が変更されました。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastContextControl">
         <summary>
            選択された最後の右クリックコンテキストメニュー項目の形状または形状。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastContextItem">
         <summary>
            最後に選択した図形またはコントロールの右クリックコンテキストメニュー項目のインデックス。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.RichTextBoxIndentToTab">
         <summary>
            最初の文字のインデントをタブに変換する "True"（デフォルト）または "False"。
            RichTextBox の行の最初の文字としてタイプされたタブは、これが "True" に設定されていない限りインデントを作成します。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.RichTextBoxFontBold">
         <summary>
            フォントの太字スタイルは "True" または "False" です。
            RichTextBoxSelection、RichTextBoxWord または RichTextBoxDefault が呼び出される前にこれを設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.RichTextBoxFontItalic">
         <summary>
            斜体のフォント "True" または "False"。
            RichTextBoxSelection、RichTextBoxWord または RichTextBoxDefault が呼び出される前にこれを設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.RichTextBoxFontUnderline">
         <summary>
            フォントには、"True" または "False" のスタイルが適用されます。
            RichTextBoxSelection、RichTextBoxWord または RichTextBoxDefault が呼び出される前にこれを設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.RichTextBoxFontSize">
         <summary>
            フォントポイントのサイズ。
            RichTextBoxSelection、RichTextBoxWord または RichTextBoxDefault が呼び出される前にこれを設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.RichTextBoxFontFamily">
         <summary>
            例えば、フォントファミリー。"Century Gothic"（センチュリーゴシック）。
            RichTextBoxSelection、RichTextBoxWord または RichTextBoxDefault が呼び出される前にこれを設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.RichTextBoxFontForeground">
         <summary>
            フォントの前景色。
            RichTextBoxSelection、RichTextBoxWord または RichTextBoxDefault が呼び出される前にこれを設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.RichTextBoxFontBackground">
         <summary>
            フォントの背景色。
            RichTextBoxSelection、RichTextBoxWord または RichTextBoxDefault が呼び出される前にこれを設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.RichTextBoxTextAlignment">
         <summary>
            テキストの配置 "Center"（中央） "Left"（左） "Right"（右） または "Justify"（正当化）。
            AddRichTextBox が呼び出される前にこれを設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.RichTextBoxReadOnly">
         <summary>
            リッチテキストボックス "True" または "False" の読み取り専用状態。
            AddRichTextBox が呼び出される前にこれを設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.RichTextBoxCaseSensitive">
         <summary>
            単語またはフレーズの強調表示が大文字と小文字を区別するかどうか（"True" または "False"（デフォルト））。
            RichTextBoxWord が呼び出される前にこれを設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastRichTextBox">
         <summary>
            イベントが発生したリッチテキストボックス。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastBrowser">
         <summary>
            ページがロードされた最後のブラウザ。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastBrowserPage">
         <summary>
            最後にロードされたブラウザページ（URL）。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastListBox">
         <summary>
            選択肢が変更された最後のリストボックス。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastListBoxIndex">
         <summary>
            最後のリストボックス選択で、インデックス（行番号）が変更されました。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastComboBox">
         <summary>
            選択が変更された最後のコンボボックス。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastComboBoxIndex">
         <summary>
            最後のコンボボックス選択がインデックス（行番号）を変更しました。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastCheckBox">
         <summary>
            最後にクリックされたチェックボックス。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastCheckBoxState">
         <summary>
            最後のチェックボックスのチェック状態（"True" または "False"）。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastRadioButton">
         <summary>
            選択された最後のラジオボタン。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastRadioButtonGroup">
         <summary>
            選択された最後のラジオボタンのグループ名。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastDropShape">
         <summary>
            ファイルがドロップされた最後のオブジェクト。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastDropFiles">
         <summary>
            最後に削除されたファイルを含む配列。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastMediaPlayer">
         <summary>
            イベントが発生した最後のメディアプレーヤー。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.SliderMaximum">
         <summary>
            スライダの最大値（デフォルトは 100）、最小値は常に 0 です。
            AddSlider を呼び出す前にこれを設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastSlider">
         <summary>
            イベントが発生した最後のスライダです。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastSliderValue">
         <summary>
            最後のスライダ値。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastPasswordBox">
         <summary>
            イベントが発生したパスワードボックス。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastPassword">
         <summary>
            最後に入力したパスワード。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastMenuControl">
         <summary>
            最後に選択したメニューコントロール。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastMenuItem">
         <summary>
            最後に選択されたメニュー項目。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastListView">
         <summary>
            選択肢が変更された最後のリストビュー。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastListViewRow">
         <summary>
            選択された行番号の最後のリストビュー。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastListViewColumn">
         <summary>
            最後のリストビュー選択された列番号。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastDataView">
         <summary>
            選択が変更された最後のデータビュー。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastDataViewCellValueChanged">
         <summary>
            値が変更されたデータビューセルのセルの行、列、および値を取得します。
            これは 3 要素の配列です。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastDataViewButtonClicked">
         <summary>
            クリックされた最後のデータビューボタンのセルの行、列、および値を取得します。
            これは 3 要素の配列です。
         </summary>
      </member>
      <member name="P:LitDev.LDControls.LastDataBaseTable">
         <summary>
            データビュー選択が変更された最後のデータベーステーブル。
         </summary>
      </member>
      <member name="E:LitDev.LDControls.TreeViewItemChanged">
         <summary>
            ツリービューの選択が変更されたとき、または選択されたアイテムがクリックされたときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDControls.ContextMenuClicked">
         <summary>
            図形またはコントロールの右クリックコンテキストメニュー項目が選択されたときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDControls.RichTextBoxTextTyped">
         <summary>
            テキストがリッチテキストボックスに入力されたときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDControls.BrowserPageLoaded">
         <summary>
            ブラウザページがロードされたときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDControls.ListBoxItemChanged">
         <summary>
            リストボックスの選択が変更されたとき、または選択されたアイテムがクリックされたときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDControls.ComboBoxItemChanged">
         <summary>
            コンボボックスの選択が変更または選択されたときにイベントがクリックされます。
         </summary>
      </member>
      <member name="E:LitDev.LDControls.CheckBoxChanged">
         <summary>
            チェックボックスがクリックされたときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDControls.RadioButtonClicked">
         <summary>
            ラジオボタンの選択が変更されたときに発生するイベント（クリックされたイベント）。
         </summary>
      </member>
      <member name="E:LitDev.LDControls.FileDropped">
         <summary>
            AllowDrop で設定されたオブジェクトにファイルがドロップされたときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDControls.MediaPlayerEnded">
         <summary>
            メディアプレーヤーが現在のメディアの再生を終了したときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDControls.MediaPlayerOpened">
         <summary>
            メディアプレーヤーが新しいメディアを開くときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDControls.SliderChanged">
         <summary>
            スライダが変更されたときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDControls.PasswordEntered">
         <summary>
            パスワードが入力されたときのイベント（Return キーが押されたとき）。
         </summary>
      </member>
      <member name="E:LitDev.LDControls.MenuClicked">
         <summary>
            メニュー項目が選択されたときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDControls.ListViewSelectionChanged">
         <summary>
            リストビュー選択が変更されたときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDControls.DataViewSelectionChanged">
         <summary>
            データビューの選択が変更されたときのイベント。
            このイベントは、DataView ボタンのクリックに対して呼び出されず、DataViewButtonClicked を使用します。
            このイベントは、dataview チェックボックスまたはコンボボックスのクリックに対して呼び出されず、DataViewCellValueChanged を使用します。
         </summary>
      </member>
      <member name="E:LitDev.LDControls.DataViewButtonClicked">
         <summary>
            データビューボタンがクリックされたときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDControls.DataViewCellValueChanged">
         <summary>
            データビューセルの値がコミットされた後、たとえばセルから離れて選択することによって変更されたときのイベント。
         </summary>
      </member>
      <member name="T:LitDev.LDCall">
         <summary>
            関数を任意の拡張子から、またはコンパイル済みの SmallBasic exe から非同期的に引数付きで呼び出します。
         </summary>
      </member>
      <member name="M:LitDev.LDCall.Function(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            1 つの入力引数を持つ関数として Small Basic Sub を呼び出します。

            入力引数は "args" という配列にコピーされます。
            結果は、"return" と呼ばれる変数（配列でもよい）に入れなければなりません。
            変数 "args" は、プログラムの開始時に "" に設定する必要があります。
            入力パラメータは変更されず、"args" と "return" はリターン時に "" に設定されます。
         </summary>
         <param name="funcName">Small Basic サブ名。</param>
         <param name="arg1">入力値（配列でもよい）。</param>
         <returns>関数の結果は、オプションの変数 "return" またはエラーメッセージに保持されます。</returns>
      </member>
      <member name="M:LitDev.LDCall.Function2(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2 つの入力引数を持つ関数として Small Basic Sub を呼び出します。

            詳細は関数を参照してください。
         </summary>
         <param name="funcName">
         </param>
         <param name="arg1">最初の入力値（配列でもよい）。</param>
         <param name="arg2">2 番目の入力値（配列でもよい）。</param>
         <returns>関数の結果は、変数 "return" またはエラーメッセージに保持されます。</returns>
      </member>
      <member name="M:LitDev.LDCall.Function3(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            Small Basic Sub を 3 つの入力引数を持つ関数として呼び出します。

            詳細は関数を参照してください。
         </summary>
         <param name="funcName">
         </param>
         <param name="arg1">最初の入力値（配列でもよい）。</param>
         <param name="arg2">2 番目の入力値（配列でもよい）。</param>
         <param name="arg3">3 番目の入力値（配列でもよい）。</param>
         <returns>関数の結果は、変数 "return" またはエラーメッセージに保持されます。</returns>
      </member>
      <member name="M:LitDev.LDCall.Function4(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            4 つの入力引数を持つ関数として Small Basic Sub を呼び出します。

            詳細は関数を参照してください。
         </summary>
         <param name="funcName">
         </param>
         <param name="arg1">最初の入力値（配列でもよい）。</param>
         <param name="arg2">2 番目の入力値（配列でもよい）。</param>
         <param name="arg3">3 番目の入力値（配列でもよい）。</param>
         <param name="arg4">4 番目の入力値（配列でもよい）。</param>
         <returns>関数の結果は、変数 "return" またはエラーメッセージに保持されます。</returns>
      </member>
      <member name="M:LitDev.LDCall.Function5(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            5 つの入力引数を持つ関数として Small Basic Sub を呼び出します。

            詳細は関数を参照してください。
         </summary>
         <param name="funcName">
         </param>
         <param name="arg1">最初の入力値（配列でもよい）。</param>
         <param name="arg2">2 番目の入力値（配列でもよい）。</param>
         <param name="arg3">3 番目の入力値（配列でもよい）。</param>
         <param name="arg4">4 番目の入力値（配列でもよい）。</param>
         <param name="arg5">5 番目の入力値（配列でもよい）。</param>
         <returns>関数の結果は、変数 "return" またはエラーメッセージに保持されます。</returns>
      </member>
      <member name="M:LitDev.LDCall.CallAsync(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            任意の拡張メソッドを非同期に呼び出します。
            LDCallAsync の例を参照してください。
            dll、extension、obj、引数がすべて "" の場合、メソッドは SmallBasic プログラムのサブルーチンになります。
         </summary>
         <param name="dll">拡張子 dll（例："LitDev.dll" または "SmallBasicLibrary.dll"）。</param>
         <param name="extension">拡張名前空間（通常、SmallBasicLibrary.dll の場合は "LitDev" や "MicroSoft.SmallBasic.Library" などの dll 名と同じです）。</param>
         <param name="obj">拡張オブジェクト名。</param>
         <param name="method">拡張メソッド名。</param>
         <param name="arguments">引数の配列またはなしの場合は ""。単一の引数は配列内にある必要はありません。</param>
         <returns>"PENDING"（保留中） または失敗時のエラーメッセージ。</returns>
      </member>
      <member name="M:LitDev.LDCall.Include(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            以前にコンパイルされたプログラムを参照して、からサブルーチンメソッドを使用する。
         </summary>
         <param name="path">セカンダリコンパイルされた Small Basic プログラム（.exe）へのフルパス</param>
         <returns>インクルードファイルの名前か、失敗した場合は "" です。</returns>
      </member>
      <member name="M:LitDev.LDCall.CallInclude(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            インクルードされたコンパイル済みのファイルでメソッドを呼び出します。
         </summary>
         <param name="include">Include メソッドによって返されたインクルードファイル名。</param>
         <param name="method">付属の exe で呼び出すサブルーチン名。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDCall.Compile(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            セカンダリ Small Basic ファイルをコンパイルします。
            ご使用の OS のデフォルトの場所に Small Basic がインストールされていると仮定します。
         </summary>
         <param name="path">コンパイルする小さな基本ファイル（.sb）。</param>
         <returns>コンパイルされたファイル（.exe）のパスまたは失敗した場合は ""。</returns>
      </member>
      <member name="P:LitDev.LDCall.LastCall">
         <summary>
            最後の非同期呼び出し名。
         </summary>
      </member>
      <member name="P:LitDev.LDCall.LastResult">
         <summary>
            最後の非同期呼び出し戻り値。
         </summary>
      </member>
      <member name="E:LitDev.LDCall.CallComplete">
         <summary>
            非同期サブルーチンメソッド呼び出しが完了したときのイベント。
         </summary>
      </member>
      <member name="T:LitDev.LD3DView">
         <summary>
            GraphicsWindow での 3D ビジュアライゼーション。

            座標には次の指示があり、GraphicsWindow の座標には対応していません。
            X  - 左（-）から右（+）
            Y  - 下（-）から上（+）
            Z  -  Far（-）から Near（+）

            基礎となる方法の詳細については、http://msdn.microsoft.com/en-us/library/ms747437%28v=vs.90%29.aspx を参照してください。
            AddShape メソッドのいくつかは HelixToolkit を使用しています（SmallBasic 用に再コンパイルされ、わずかに変更されています）。http://helixToolkit.codeplex.com

            また、ベクトル代数法については LDVector を参照してください。
         </summary>
      </member>
      <member name="M:LitDev.LD3DView.AddView(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            3DView（GraphicsWindow 図形）を追加します。
         </summary>
         <param name="width">3DView の幅。</param>
         <param name="height">3DView の高さ。</param>
         <param name="performance">
            品質のスピードに賛成するフラグ "True" または "False"。
            "True" はビジュアルクリッピング（3DView を幅と高さにクリップする）、ヒットテスト（未使用）、アンチエイリアス（不要）を削除します。
         </param>
         <returns>3DView ビューポート 3D の名前。</returns>
      </member>
      <member name="M:LitDev.LD3DView.AutoControl(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            カメラの自動制御を設定します。
            このモードは、主にシーン内を移動するための一般的なカメラコントロールです（フライバイモード）。
            マウスホイールで前後に移動します（Shift ダウンで速く、Ctrl で遅くなります）。
            Yaw と Pitch カメラはマウスの左ボタンで動きます。
            Y、A、D、または Left、Right キーで、W、S、Up、Down キーで前後に移動します。
            カメラを右マウスボタンで動かす。
            中心にくるオブジェクトをダブルクリック（回転中心 1）します。
            右にダブルクリックすると上方向が Y にリセットされます。
            Yaw と Pitch のシーンを Shift キーで移動し、オブジェクトを選択してマウスの左ボタンを押すと、シーンが回転します。
            X、Y、Z キーはビュー方向と上方向を（0,0,0）に向かってこれらの方向に向けるように変更し、Shift キーを押しながら負方向に移動します。
         </summary>
         <param name="pitchRoll">ピッチとロールの動きを許可する、"True" または "False"。</param>
         <param name="shift">マウスコントロールの Shift / Control キー修飾子に "True" または "False" を許可します。</param>
         <param name="keyDistance">キーを使用してシーンを表示する距離（0 は X、Y、Z キーのショートカットを防止し、-1 は A、D、W、S、および矢印キーも禁止します）。</param>
         <param name="speed">前方および後方速度倍率（デフォルトは 1）。</param>
      </member>
      <member name="M:LitDev.LD3DView.AutoControl2(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            カメラの自動制御を設定します。
            このモードは主に、シーンを移動するのではなく、3D シーンを回転して表示することです（検査モード）。
            マウスホイールを使用してズームインまたはズームアウトします（シフトダウンで速く、コントロールダウンで遅くなります）。
            A、D または左、右キーで左右にパン、W、S または上でパンを上下に上下に移動します。
            中心にくるオブジェクトをダブルクリック（回転中心 1）します。
            右にダブルクリックすると上方向が Y にリセットされます。
            ヨーとピッチのシーンは、シーンを回転させるオブジェクトを選択した後、左マウスボタンで動きます。
            右マウスボタンでシーンを移動する。
            X、Y、Z キーはビュー方向と上方向を、選択した中心に向かってこれらの方向に向けるように変更します。
         </summary>
         <param name="keyDistance">キーを使用してシーンを表示する距離です（0 は X、Y、Z キーのショートカットを防ぎます）。</param>
         <param name="speed">前方および後方速度倍率（デフォルトは 1）。</param>
      </member>
      <member name="M:LitDev.LD3DView.AddGeometry(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ジオメトリオブジェクトを追加します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="points">空白またはコロン区切りのポイント座標のリスト。</param>
         <param name="indices">各三角形のインデックスの空白またはコロン区切りリスト（外側の面の場合は反時計回り）。</param>
         <param name="normals">オプションで、各ノードまたは "" の外側の法線のリストを空白またはコロンで区切ったリスト。</param>
         <param name="colour">オブジェクトのカラーまたはグラデーションブラシ。</param>
         <param name="materialType">
            オブジェクトの素材。
            使用可能なオプションは次のとおりです。
            "E" Emmissive  - 一定の明るさ。
            "D" 拡散 - ライトの影響を受けます。
            "S" 鏡面反射 - 鏡面ハイライト。
         </param>
         <returns>3DView ジオメトリの名前。</returns>
      </member>
      <member name="M:LitDev.LD3DView.AddImage(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ジオメトリオブジェクトにイメージを追加します。
            ジオメトリ "スキン" は、1 つの画像内に複数のセグメント画像を含むことができる。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="geometryName">ジオメトリオブジェクト。</param>
         <param name="textures">
            各ノードのテクスチャ座標の空白またはコロン区切りリスト。
            各ノードは、0 と 1 との間の 2 つの値を有し、ノードへの x、y 画像マッピングを示す。
            テクスチャが以前に設定されている場合、デフォルトは "" に設定されます。
         </param>
         <param name="imageName">
            ジオメトリにロードするイメージ。
            ImageList.LoadImage またはローカルまたはネットワークイメージファイルから返された値。
            ここではカラーブラシやグラデーションブラシを使用することもできます。
         </param>
         <param name="materialType">
            オブジェクトの素材。
            使用可能なオプションは次のとおりです。
            "E" Emmissive  - 一定の明るさ。
            "D" 拡散 - ライトの影響を受けます。
            "S" Specular  - 追加の鏡面ハイライト。
         </param>
      </member>
      <member name="M:LitDev.LD3DView.MoveCamera(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            カメラビューの方向と位置を移動します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="yaw">左 / 右回転度（ヨー）。</param>
         <param name="pitch">アップ / ダウンの度合い（度）（ピッチ）。</param>
         <param name="roll">ビュー方向の度合い（回転）に関するスピンビュー。</param>
         <param name="move">デバイス座標の（ビュー方向に沿った）前方 / 後方移動。</param>
      </member>
      <member name="M:LitDev.LD3DView.ResetCamera(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            カメラの位置をリセットし、方向と上方向ベクトルを表示します（オプション）。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="xPos">カメラの x 位置。</param>
         <param name="yPos">カメラの y 位置。</param>
         <param name="zPos">カメラの z 位置。</param>
         <param name="xDir">カメラの x 方向。</param>
         <param name="yDir">カメラの y 方向。</param>
         <param name="zDir">カメラの z 方向。</param>
         <param name="xUp">カメラのオプションの x 方向または ""。</param>
         <param name="yUp">カメラのオプションの y 方向、または ""。</param>
         <param name="zUp">カメラの任意の z 方向、または ""。</param>
      </member>
      <member name="M:LitDev.LD3DView.CameraProperties(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            視野角、遠近距離、遠方距離を設定します。
            これらはすべて、基本的な視点のカメラプロパティです。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="nearDistance">
            近いクリッピング距離（例えば壁ヒット検出などの近くの物体を改善することができる）。
            負の値は 0.001 です（デフォルトは 0.125）。
         </param>
         <param name="farDistance">
            遠方のクリッピング距離（パフォーマンスを向上させることができます）。
            負の値は無限大（デフォルト）です。
         </param>
         <param name="angle">
            カメラの視野角（度単位）（視点消失点に影響します）。
            これが負の場合は、正方形（視点なし）のカメラが使用され、ビューの幅は -angle に設定されます）。
         </param>
      </member>
      <member name="M:LitDev.LD3DView.GetCameraPosition(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            カメラの位置を取得します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <returns>カメラの位置座標の配列。</returns>
      </member>
      <member name="M:LitDev.LD3DView.GetCameraDirection(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            カメラの方向を取得します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <returns>カメラ方向ベクトルの配列。</returns>
      </member>
      <member name="M:LitDev.LD3DView.GetCameraUpDirection(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            カメラを上に向ける。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <returns>カメラの上方向ベクトルの配列。</returns>
      </member>
      <member name="M:LitDev.LD3DView.AddDirectionalLight(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指向性光源を追加します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="colour">明るい色。</param>
         <param name="xDir">光の x 方向。</param>
         <param name="yDir">光の y 方向。</param>
         <param name="zDir">光の z 方向。</param>
         <returns>3DView ライトの名前。</returns>
      </member>
      <member name="M:LitDev.LD3DView.AddAmbientLight(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            環境光源を追加します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="colour">明るい色。</param>
         <returns>3DView ライトの名前。</returns>
      </member>
      <member name="M:LitDev.LD3DView.AddSpotLight(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指向性スポット光源を追加します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="colour">明るい色。</param>
         <param name="xPos">光の x 位置。</param>
         <param name="yPos">光の y 位置。</param>
         <param name="zPos">光の z 位置。</param>
         <param name="xDir">光の x 方向。</param>
         <param name="yDir">光の y 方向。</param>
         <param name="zDir">光の z 方向。</param>
         <param name="angle">円錐角は光を度で表します。</param>
         <param name="range">光の範囲。</param>
         <returns>3DView ライトの名前。</returns>
      </member>
      <member name="M:LitDev.LD3DView.AddPointLight(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            無指向性の点光源を追加します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="colour">明るい色。</param>
         <param name="xPos">光の x 位置。</param>
         <param name="yPos">光の y 位置。</param>
         <param name="zPos">光の z 位置。</param>
         <param name="range">光の範囲。</param>
         <returns>3DView ライトの名前。</returns>
      </member>
      <member name="M:LitDev.LD3DView.RotateGeometry(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ジオメトリオブジェクトを中心に回転します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="geometryName">ジオメトリオブジェクト。</param>
         <param name="x">回転するベクトルの X 方向。</param>
         <param name="y">回転するベクトルの Y 方向。</param>
         <param name="z">ベクトルの Z 方向を回転させます。</param>
         <param name="angle">回転する角度（度単位）。</param>
      </member>
      <member name="M:LitDev.LD3DView.RotateGeometry2(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ジオメトリオブジェクトの中心を回転させます（2 番目の回転）。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="geometryName">ジオメトリオブジェクト。</param>
         <param name="x">回転するベクトルの X 方向。</param>
         <param name="y">回転するベクトルの Y 方向。</param>
         <param name="z">ベクトルの Z 方向を回転させます。</param>
         <param name="angle">回転する角度（度単位）。</param>
      </member>
      <member name="M:LitDev.LD3DView.RotateGeometry3(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ジオメトリオブジェクトをその中心（第 3 回転）について回転します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="geometryName">ジオメトリオブジェクト。</param>
         <param name="x">回転するベクトルの X 方向。</param>
         <param name="y">回転するベクトルの Y 方向。</param>
         <param name="z">ベクトルの Z 方向を回転させます。</param>
         <param name="angle">回転する角度（度単位）。</param>
      </member>
      <member name="M:LitDev.LD3DView.ScaleGeometry(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ジオメトリオブジェクトの中心を基準にして拡大 / 縮小（ズーム）します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="geometryName">ジオメトリオブジェクト。</param>
         <param name="scaleX">X スケールファクタ。</param>
         <param name="scaleY">Y スケールファクタ。</param>
         <param name="scaleZ">Z スケールファクタ。</param>
      </member>
      <member name="M:LitDev.LD3DView.TranslateGeometry(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ジオメトリオブジェクトを変換（移動）します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="geometryName">ジオメトリオブジェクト。</param>
         <param name="dx">X 方向の平行移動。</param>
         <param name="dy">Y 方向の平行移動</param>
         <param name="dz">Z 方向の平行移動。</param>
      </member>
      <member name="M:LitDev.LD3DView.ModifyObject(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ライトオブジェクトまたはジオメトリオブジェクトに対してアクションを実行します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="geometryName">ジオメトリまたはライトの名前。</param>
         <param name="action">
            実行するアクション。
            許可されるアクションは次のとおりです。
            "X" 削除
            "H" hide
            "S" ショー
         </param>
      </member>
      <member name="M:LitDev.LD3DView.CloneObject(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ジオメトリオブジェクトとそのすべてのプロパティの完全なコピーを作成します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="geometryName">コピーするオブジェクトの名前。</param>
         <returns>新しいコピーされた 3DView オブジェクト名。</returns>
      </member>
      <member name="M:LitDev.LD3DView.HitTest(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            3DView でヒットテストを実行します。
            座標の負の値は、デフォルトで画面中心（カメラビュー）になります。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="x">3DView 内の GraphicsWindow 座標の x 座標。</param>
         <param name="y">3DView 内の GraphicsWindow 座標の y 座標。</param>
         <returns>ヒットしたオブジェクト名とその距離を持つ配列、またはヒットしなかった配列。</returns>
      </member>
      <member name="M:LitDev.LD3DView.Freeze(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ジオメトリオブジェクトをフリーズしてパフォーマンスを少し向上させてください。それを変更することはできません。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="geometryName">フリーズするオブジェクト。</param>
      </member>
      <member name="M:LitDev.LD3DView.AnimateRotation(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ジオメトリの回転を軸ベクトルを中心にアニメーション化します。
            これは第 2 の回転を使用し、第 1 の回転は他の軸の回転に対してまだ利用可能です。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="geometryName">アニメーション化するジオメトリオブジェクト。</param>
         <param name="xDir">回転するベクトルの X 方向。</param>
         <param name="yDir">回転するベクトルの Y 方向。</param>
         <param name="zDir">ベクトルの Z 方向を回転させます。</param>
         <param name="startAngle">開始角度（度）です（例：0）。</param>
         <param name="endAngle">最後の角度（度）（例：360）。</param>
         <param name="duration">アニメーションの継続時間（秒単位の時間）。</param>
         <param name="repeats">アニメーションを繰り返す回数です（-1 は永遠に続きます）。</param>
      </member>
      <member name="M:LitDev.LD3DView.AnimateRotation2(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ジオメトリの回転を軸ベクトルを中心にアニメーション化します。
            これは第 3 の回転を使用し、第 1 の回転は他の軸の回転に対してまだ利用可能です。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="geometryName">アニメーション化するジオメトリオブジェクト。</param>
         <param name="xDir">回転するベクトルの X 方向。</param>
         <param name="yDir">回転するベクトルの Y 方向。</param>
         <param name="zDir">ベクトルの Z 方向を回転させます。</param>
         <param name="startAngle">開始角度（度）です（例：0）。</param>
         <param name="endAngle">最後の角度（度）（例：360）。</param>
         <param name="duration">アニメーションの継続時間（秒単位の時間）。</param>
         <param name="repeats">アニメーションを繰り返す回数です（-1 は永遠に続きます）。</param>
      </member>
      <member name="M:LitDev.LD3DView.AnimateTranslation(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ジオメトリ変換をアニメートします。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="geometryName">アニメーション化するジオメトリオブジェクト。</param>
         <param name="x">アニメートする X 位置。</param>
         <param name="y">アニメーションする位置は Y。</param>
         <param name="z">アニメーションする Z 位置。</param>
         <param name="duration">アニメーションの長さ（秒）。</param>
      </member>
      <member name="M:LitDev.LD3DView.LoadModel(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ファイルからジオメトリモデルをロードします。
            サポートされている形式には、3ds、lwo、obj、objz、stl、および off があります。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="fileName">
            ロードするファイル。
            多くの場合、同じフォルダ内に同じ名前の画像ファイルなどが必要です。
         </param>
         <returns>ジオメトリ名が追加された配列。</returns>
      </member>
      <member name="M:LitDev.LD3DView.AddSphere(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            （0,0,0）を中心とする球体ジオメトリオブジェクトを追加します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="radius">球の半径。</param>
         <param name="divisions">球の区画で、デフォルトは 10（三角形の数と滑らかさに影響します）。</param>
         <param name="colour">オブジェクトのカラーまたはグラデーションブラシ。</param>
         <param name="materialType">
            オブジェクトの素材。
            使用可能なオプションは次のとおりです。
            "E" Emmissive  - 一定の明るさ。
            "D" 拡散 - ライトの影響を受けます。
            "S" 鏡面反射 - 鏡面ハイライト。
         </param>
         <returns>3DView ジオメトリの名前。</returns>
      </member>
      <member name="M:LitDev.LD3DView.AddTube(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            チューブジオメトリオブジェクトを追加します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="path">空白またはコロン区切りの 3D ポイント座標のリスト。</param>
         <param name="diameter">チューブの直径。</param>
         <param name="divisions">チューブの半径方向の分割（デフォルトは 10）（三角形の数と滑らかさに影響します）。</param>
         <param name="colour">オブジェクトのカラーまたはグラデーションブラシ。</param>
         <param name="materialType">
            オブジェクトの素材。
            使用可能なオプションは次のとおりです。
            "E" Emmissive  - 一定の明るさ。
            "D" 拡散 - ライトの影響を受けます。
            "S" 鏡面反射 - 鏡面ハイライト。
         </param>
         <returns>3DView ジオメトリの名前。</returns>
      </member>
      <member name="M:LitDev.LD3DView.AddRevolute(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            回転ジオメトリオブジェクトを追加します。これは、（0,0,0）で始まり上を指すサーフェスです。
            その形状は、設定点（Y、Z）によって定義され、ここで、Y は、0 から表面に沿った垂直距離であり、Z は、回転半径です。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="path">回転形状を記述する 2D 点座標のリストをスペースまたはコロンで区切ったもの。</param>
         <param name="divisions">半径方向の分割、デフォルトは 10（三角形と滑らかさの数に影響します）。</param>
         <param name="colour">オブジェクトのカラーまたはグラデーションブラシ。</param>
         <param name="materialType">
            オブジェクトの素材。
            使用可能なオプションは次のとおりです。
            "E" Emmissive  - 一定の明るさ。
            "D" 拡散 - ライトの影響を受けます。
            "S" 鏡面反射 - 鏡面ハイライト。
         </param>
         <returns>3DView ジオメトリの名前。</returns>
      </member>
      <member name="M:LitDev.LD3DView.ReverseNormals(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ジオメトリの外側の法線を反転させます。
            たとえば、球の内側のサーフェスを外側のサーフェス（スカイドーム）の代わりに可視のサーフェスにします。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="geometryName">ジオメトリオブジェクトは、外向きの法線を逆転させます。</param>
      </member>
      <member name="M:LitDev.LD3DView.AddCube(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            （0,0,0）を中心とするキューブジオメトリオブジェクトを追加します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="sideLength">立方体の一辺の長さ。</param>
         <param name="colour">オブジェクトのカラーまたはグラデーションブラシ。</param>
         <param name="materialType">
            オブジェクトの素材。
            使用可能なオプションは次のとおりです。
            "E" Emmissive  - 一定の明るさ。
            "D" 拡散 - ライトの影響を受けます。
            "S" 鏡面反射 - 鏡面ハイライト。
         </param>
         <returns>3DView ジオメトリの名前。</returns>
      </member>
      <member name="M:LitDev.LD3DView.AddArrow(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            （0,0,0）から始まる矢印ジオメトリオブジェクトを追加します。
         </summary>
         <param name="shapeName">3DView オブジェクト</param>
         <param name="length">矢印の長さ。</param>
         <param name="diameter">矢印軸の直径。</param>
         <param name="arrowLength">矢頭の長さ。</param>
         <param name="arrowDiameter">矢頭の直径。</param>
         <param name="divisions">矢印の分割数（デフォルトは 18）。</param>
         <param name="colour">オブジェクトのカラーまたはグラデーションブラシ。</param>
         <param name="materialType">
            オブジェクトの素材。
            使用可能なオプションは次のとおりです。
            "E" Emmissive  - 一定の明るさ。
            "D" 拡散 - ライトの影響を受けます。
            "S" 鏡面反射 - 鏡面ハイライト。
         </param>
         <returns>3DView ジオメトリの名前。</returns>
      </member>
      <member name="M:LitDev.LD3DView.AddCone(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            （0,0,0）を中心とする円錐を持つジオメトリオブジェクトを追加します。
            シリンダは baseRadius = topRadius の円錐です。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="baseRadius">ベースの半径。</param>
         <param name="topRadius">切り捨てられた場合の上部の半径（デフォルトは 0）。</param>
         <param name="height">コーンの高さ</param>
         <param name="divisions">コーンの分割数（デフォルトは 18）。</param>
         <param name="colour">オブジェクトのカラーまたはグラデーションブラシ。</param>
         <param name="materialType">
            オブジェクトの素材。
            使用可能なオプションは次のとおりです。
            "E" Emmissive  - 一定の明るさ。
            "D" 拡散 - ライトの影響を受けます。
            "S" 鏡面反射 - 鏡面ハイライト。
         </param>
         <returns>3DView ジオメトリの名前。</returns>
      </member>
      <member name="M:LitDev.LD3DView.AddPyramid(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            （0,0,0）を中心とするピラミッドジオメトリオブジェクトを追加します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="sideLength">ベースの半径。</param>
         <param name="height">コーンの高さ</param>
         <param name="colour">オブジェクトのカラーまたはグラデーションブラシ。</param>
         <param name="materialType">
            オブジェクトの素材。
            使用可能なオプションは次のとおりです。
            "E" Emmissive  - 一定の明るさ。
            "D" 拡散 - ライトの影響を受けます。
            "S" 鏡面反射 - 鏡面ハイライト。
         </param>
         <returns>3DView ジオメトリの名前。</returns>
      </member>
      <member name="M:LitDev.LD3DView.AddPipe(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            （0,0,0）を中心とするパイプジオメトリオブジェクトを追加します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="length">パイプの長さ。</param>
         <param name="innerDiameter">パイプの内径。</param>
         <param name="outerDiameter">パイプの外径。</param>
         <param name="divisions">パイプの分割数（デフォルトは 18）。</param>
         <param name="colour">オブジェクトのカラーまたはグラデーションブラシ。</param>
         <param name="materialType">
            オブジェクトの素材。
            使用可能なオプションは次のとおりです。
            "E" Emmissive  - 一定の明るさ。
            "D" 拡散 - ライトの影響を受けます。
            "S" 鏡面反射 - 鏡面ハイライト。
         </param>
         <returns>3DView ジオメトリの名前。</returns>
      </member>
      <member name="M:LitDev.LD3DView.AddIcosahedron(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            （0,0,0）を中心とする 20 面体ジオメトリオブジェクトを追加します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="radius">二十面体の半径。</param>
         <param name="colour">オブジェクトのカラーまたはグラデーションブラシ。</param>
         <param name="materialType">
            オブジェクトの素材。
            使用可能なオプションは次のとおりです。
            "E" Emmissive  - 一定の明るさ。
            "D" 拡散 - ライトの影響を受けます。
            "S" 鏡面反射 - 鏡面ハイライト。
         </param>
         <returns>3DView ジオメトリの名前。</returns>
      </member>
      <member name="M:LitDev.LD3DView.AddRectangle(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            （0,0,0）を中心とする矩形ジオメトリオブジェクトを追加します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="width">長方形の幅。</param>
         <param name="height">長方形の高さ。</param>
         <param name="colour">オブジェクトのカラーまたはグラデーションブラシ。</param>
         <param name="materialType">
            オブジェクトの素材。
            使用可能なオプションは次のとおりです。
            "E" Emmissive  - 一定の明るさ。
            "D" 拡散 - ライトの影響を受けます。
            "S" 鏡面反射 - 鏡面ハイライト。
         </param>
         <returns>3DView ジオメトリの名前。</returns>
      </member>
      <member name="M:LitDev.LD3DView.SetBillBoard(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            常にカメラに向かって回転するオブジェクトを設定します。
            これは 2 番目と 3 番目の回転を使用します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="geometryName">ジオメトリオブジェクト。</param>
      </member>
      <member name="M:LitDev.LD3DView.SetCentre(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ジオメトリの回転とスケール変換の中心を設定します。
            デフォルトでは、これはジオメトリのバウンディングボックスの中心です。多くの場合 0,0,0 です。
            中心は、ジオメトリの作成に使用される座標で定義されます。
            ジオメトリ内にある必要はありません。
            座標値が "" に設定されている場合は、デフォルト値が使用されます。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="geometryName">ジオメトリオブジェクト。</param>
         <param name="x">中心の x 座標。</param>
         <param name="y">中心の y 座標。</param>
         <param name="z">中心の z 座標。</param>
         <param name="options">
            センター設定を制御するオプション。倍数を設定することができます。"R1R2R3" を押してすべての回転を設定します。
            "R1" 最初の回転変換
            "R2" 第 2 回転変換
            "R3" 第 3 回転変換
            "S"  スケール変換
         </param>
      </member>
      <member name="M:LitDev.LD3DView.BoundingBox(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ジオメトリのバウンディングボックス範囲を取得します。
            これは現在の位置です（変換後）。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="geometryName">ジオメトリオブジェクト。</param>
         <returns>
            次元の配列または "FAILED"
            array[1] = sizeX '幅
            array[2] = sizeY '高さ
            array[3] = sizeZ '深さ
            array[4] = X '最小 X
            array[5] = Y '最小 Y
            array[6] = Z '最小 Z
         </returns>
      </member>
      <member name="M:LitDev.LD3DView.ResetMaterial(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            既存のジオメトリのマテリアルをリセットします。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="geometryName">ジオメトリオブジェクト。</param>
         <param name="colour">オブジェクトのカラーまたはグラデーションブラシ。</param>
         <param name="materialType">
            オブジェクトの素材。
            使用可能なオプションは次のとおりです。
            "E" Emmissive  - 一定の明るさ。
            "D" 拡散 - ライトの影響を受けます。
            "S" 鏡面反射 - 鏡面ハイライト。
         </param>
      </member>
      <member name="M:LitDev.LD3DView.GetPosition(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            既存のジオメトリの変換された（現在の）中心位置を取得します。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="geometryName">ジオメトリオブジェクト。</param>
         <returns>
            変換された位置または "FAILED" の配列。
            array[1] = X '中心 X
            array[2] = Y '中心 Y
            array[3] = Z '中心 Z
         </returns>
      </member>
      <member name="M:LitDev.LD3DView.SwapUpDirection(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ジオメトリの Y および Z 方向を回転（スワップ）します。
            これは、Z 上の規則で作成されたジオメトリに役立ち、この拡張で使用される Y の上方向に適用されます。
         </summary>
         <param name="shapeName">3DView オブジェクト。</param>
         <param name="geometryName">ジオメトリオブジェクト。</param>
      </member>
      <member name="P:LitDev.LD3DView.SpecularExponent">
         <summary>
            鏡面マテリアルに使用される鏡面指数を取得または設定します（デフォルトは 5）。
         </summary>
      </member>
      <member name="P:LitDev.LD3DView.LastRotationCompleted">
         <summary>
            最後に完了した回転アニメーションジオメトリオブジェクト。
         </summary>
      </member>
      <member name="P:LitDev.LD3DView.LastTranslationCompleted">
         <summary>
            最後に完了した翻訳アニメーションジオメトリオブジェクト。
         </summary>
      </member>
      <member name="P:LitDev.LD3DView.QueuedRotationCompleted">
         <summary>
            現在キューに入っている完了した回転アニメーションの数。
         </summary>
      </member>
      <member name="P:LitDev.LD3DView.QueuedTranslationCompleted">
         <summary>
            現在キューに入っている完成した翻訳アニメーションの数。
         </summary>
      </member>
      <member name="E:LitDev.LD3DView.RotationCompleted">
         <summary>
            回転アニメーションが完了したときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LD3DView.TranslationCompleted">
         <summary>
            翻訳アニメーションが完了したときのイベント。
         </summary>
      </member>
      <member name="T:LitDev.LDBlueTooth">
         <summary>
            BlueTooth コントロール。
            アドバンスト機能とは、非ファイル転送（効果的にデバイスドライバを作成する）を指します。
            USB Bluetooth スティックと通信するには、SmallBasic プログラムを実行する前に外付けの Bluetooth デバイスが必要です。
         </summary>
      </member>
      <member name="M:LitDev.LDBlueTooth.Initialise">
         <summary>
            Bluetooth USB スティックを初期化し、検出可能な外部デバイスを検出します。
            デバイスが範囲内または範囲外になると、デバイスリストが更新されます。
         </summary>
         <returns>Bluetooth インターフェイスの設定の成功または失敗については、"True" または "False"。</returns>
      </member>
      <member name="M:LitDev.LDBlueTooth.GetDevices">
         <summary>
            発見された Bluetooth デバイスのリストを取得します。
         </summary>
         <returns>デバイスの配列または失敗した場合。</returns>
      </member>
      <member name="M:LitDev.LDBlueTooth.GetServices">
         <summary>
            高度な機能。
            使用可能なサービスプロトコルのリストを取得します。
         </summary>
         <returns>失敗した場合のサービスの配列または ""。</returns>
      </member>
      <member name="M:LitDev.LDBlueTooth.GetEncodings">
         <summary>
            高度な機能。
            利用可能なエンコーディングのリストを取得します。
         </summary>
         <returns>エンコードの配列または失敗した場合。</returns>
      </member>
      <member name="M:LitDev.LDBlueTooth.Connect">
         <summary>
            高度な機能。
            外部デバイスとサービスを Bluetooth USB スティックに接続します。
            最初に初期化してから、デバイス、サービス、エンコーディングを設定する必要があります。
         </summary>
         <returns>成功または失敗の場合は "True" または "False"。</returns>
      </member>
      <member name="M:LitDev.LDBlueTooth.SendData(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            高度な機能。
            データを Bluetooth デバイスに送信します。
            デバイスを初期化して接続する必要があります。
            エンコーディングも設定する必要があります。
         </summary>
         <param name="data">送信する文字列。</param>
         <returns>結果ステータスメッセージ "True" または "False"。</returns>
      </member>
      <member name="M:LitDev.LDBlueTooth.ReceiveData">
         <summary>
            高度な機能。
            Bluetooth デバイスからデータを受信（フェッチ）します。
            デバイスを初期化して接続する必要があります。
            エンコーディングも設定する必要があります。
         </summary>
         <returns>受信した文字列、失敗した場合は ""。</returns>
      </member>
      <member name="M:LitDev.LDBlueTooth.SendFile(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            添付された外部 Bluetooth デバイスにファイルを送信します。
            最初に初期化してからデバイスを設定する必要があります。
         </summary>
         <param name="fileName">送信するファイル。</param>
         <returns>結果ステータスメッセージ "True" または "False"。</returns>
      </member>
      <member name="M:LitDev.LDBlueTooth.ReceiveFile(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            接続された外部 Bluetooth デバイスからファイルを受信（フェッチ）します。
            最初に初期化してからデバイスを設定する必要があります。
         </summary>
         <param name="fileName">受信したファイルを保存する場所。</param>
         <returns>結果ステータスメッセージ "True" または "False"。</returns>
      </member>
      <member name="P:LitDev.LDBlueTooth.LastDevice">
         <summary>
            範囲内または範囲外の最後のデバイス。
         </summary>
      </member>
      <member name="P:LitDev.LDBlueTooth.LastError">
         <summary>
            最後のエラーメッセージを取得します。
            さまざまな障害に対してエラーメッセージが設定されることがあります。
         </summary>
      </member>
      <member name="P:LitDev.LDBlueTooth.DataAvailable">
         <summary>
            受信され、読み取られるのを待っているデータのバイト数。
            これは、受信したデータをチェックするためにタイマーで使用できます。
         </summary>
      </member>
      <member name="P:LitDev.LDBlueTooth.Device">
         <summary>
            現在の Bluetooth デバイス。
         </summary>
      </member>
      <member name="P:LitDev.LDBlueTooth.Service">
         <summary>
            高度な機能。
            現在の Bluetooth サービス。
         </summary>
      </member>
      <member name="P:LitDev.LDBlueTooth.Encode">
         <summary>
            高度な機能。
            現在の Bluetooth データエンコーディング。
         </summary>
      </member>
      <member name="E:LitDev.LDBlueTooth.InRange">
         <summary>
            ブルートゥースデバイスが範囲内に入ったときのイベント。
            予期せず発砲を続けると思われる。
         </summary>
      </member>
      <member name="E:LitDev.LDBlueTooth.OutOfRange">
         <summary>
            ブルートゥースデバイスが圏外になったときのイベント。
            期待どおりに動作していないようです。
         </summary>
      </member>
      <member name="T:LitDev.LDShell">
         <summary>拡張ファイル情報の機能、LNK / URL ショートカット、シェルアプリケーション（全てのコードとメソッドは Pappa Lapub によって提供されています）。</summary>
      </member>
      <member name="M:LitDev.LDShell.GetDetail(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>指定されたファイルまたはフォルダの拡張プロパティの値を取得します。</summary>
         <param name="path">完全なファイルパスまたはフォルダパス。</param>
         <param name="infoType">
            プロパティの ID 番号または名前（たとえば、-1="Infotip"、0="名前"、1="サイズ" など）
            ID の番号は LDShell.AllDetails で得られる利用可能なプロパティの名前。
         </param>
         <returns>
            利用可能な場合はプロパティの値、そうでない場合は "" です。失敗した場合（たとえば、パスが見つからない場合）は "FAILED"
            lf で区切られ、crlf で終わるようにしてください。
         </returns>
      </member>
      <member name="M:LitDev.LDShell.GetAllDetailsFor(Microsoft.SmallBasic.Library.Primitive)">
         <summary>指定されたファイルまたはフォルダのすべての利用可能な拡張プロパティを配列として取得します（最大=316、-1=Infotip を除く）。</summary>
         <param name="path">完全なファイルパスまたはフォルダパス。</param>
         <returns>成功すると配列（"property name=value;..."、Infotip を除く）として使用可能なすべての拡張プロパティ、それ以外の場合は "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDShell.GetAllDetailNamesFor(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>指定されたファイルまたはフォルダの利用可能なすべての拡張プロパティの名前を配列として取得します（最大 316、-1=Infotip を除く）。</summary>
         <param name="path">完全なファイルパスまたはフォルダパス。</param>
         <param name="step1">インデックスを 1 ステップにするか？ "True" または "False"（デフォルト、実際のプロパティ ID）。</param>
         <returns>成功した場合は配列（"idx=property name;..."、Infotip なし）として利用可能なすべての拡張プロパティの名前、そうでない場合は "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDShell.GetAllVerbsFor(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定したファイルタイプまたはフォルダの使用可能なすべての動詞（コンテキストメニュー項目）を配列として取得します。
            LDShell.ApplyVerbOn の下の動詞のファイル / フォルダへの適用。
         </summary>
         <param name="path">完全なファイルパスまたはフォルダパス。</param>
         <returns>成功するとすべての利用可能な動詞を配列として（"idx=verb;..."、'＆' を除く）、そうでなければ "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDShell.ApplyVerbOn(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            与えられたファイルまたはフォルダの動詞（コンテキストメニュー項目）を適用します。
            LDShell.GetAllVerbsFor の下にある利用可能な動詞のリスト（ファイルタイプまたはフォルダ用）。
         </summary>
         <param name="path">完全なファイルパスまたはフォルダパス。</param>
         <param name="verb">適用する動詞（大文字と小文字の区別なし）</param>
         <returns>成功すれば "SUCCESS"、失敗した場合は "FAILED" となります。</returns>
      </member>
      <member name="M:LitDev.LDShell.LinkGetProperty(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>ターゲットの pfad、引数などの lnk / url ショートカットリンクのプロパティを取得します。</summary>
         <param name="shortcut">lnk / url ショートカットリンクファイルの完全パス。</param>
         <param name="property">
            取得するプロパティ（大文字小文字に依存しない、* は url の場合）：
            "Target"（ターゲット） ターゲットパス *
            "Args" 引数
            "Folder"（フォルダ） 作業ディレクトリ
            "Desc" コメント *
            "HotKey" ショートカットキーの櫛 *（デフォルト：0）
            "Style"（スタイル） ウィンドウスタイル *（通常 1、最大 3、最小 7 分）
            "Icon"（アイコン） アイコンのパス
         </param>
         <returns>利用可能な場合はプロパティの値、または "" 失敗した場合は "FAILED"</returns>
      </member>
      <member name="M:LitDev.LDShell.LinkSetProperty(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>既存の lnk / url ショートカットリンクのプロパティ（ターゲットパス、引数など）を変更します（* URL の場合は *）。</summary>
         <param name="shortcut">既存の lnk / url ショートカットリンクファイルの完全パス。</param>
         <param name="target">* ターゲットファイルのフルパス / -folder resp。URL アドレス。</param>
         <param name="args">ショートカットを起動するときの Startparameter または ""（url の場合）。</param>
         <param name="folder">開始フォルダのフルパスまたは ""（url）。</param>
         <param name="desc">* ショートカットまたは "" のコメントまたは説明。</param>
         <param name="icoPath">ショートカットまたは "" のアイコンファイルのフルパス。</param>
         <param name="icoIdx">* アイコンファイル内のアイコンのインデックス（デフォルト：0、.ico）。</param>
         <param name="hotkey">* キーの組み合わせを使用してショートカットリンクを開きます（デフォルト：0）。</param>
         <param name="style">* ショートカットを起動するときのウィンドウスタイル（デフォルト：通常 1、最大 3、最小 7 分）。</param>
         <returns>成功した場合の変更されたショートカットの完全なファイルパス。そうでない場合は "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDShell.LinkCreate(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>新しい lnk / url ショートカット（Shell32）を作成します。'LinkSetProperty' でさらに編集します。</summary>
         <param name="shortcut">新しい lnk / url ショートカットファイルの絶対パス。</param>
         <param name="target">ターゲットファイル / -folder resp のフルパス。URL アドレス。</param>
         <returns>成功した場合に作成されたショートカットの完全なファイルパス。そうでない場合は "FAILED" です。</returns>
      </member>
      <member name="M:LitDev.LDShell.ShellLink(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>新しい lnk / url ショートカット（IWshRuntimeLibrary）を作成します。'ShellLinkSet' でさらに編集する。</summary>
         <param name="shortcut">新しい lnk / url ショートカットファイルの絶対パス。</param>
         <param name="target">ターゲットファイル / -folder resp のフルパス。URL アドレス。</param>
         <returns>成功した場合に作成されたショートカットの完全なファイルパス。そうでない場合は "FAILED" です。</returns>
      </member>
      <member name="M:LitDev.LDShell.ShellLinkGet(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>target pfad、arguments など（IWshRuntimeLibrary）のような lnk / url ショートカットリンクのプロパティを取得します。</summary>
         <param name="shortcut">lnk / url ショートカットリンクファイルの完全パス。</param>
         <param name="property">
            取得するプロパティ（大文字小文字に依存しない、* は url 用）：
            "Target"（ターゲット） ターゲットパス *
            "Args" 引数
            "Folder"（フォルダ） 作業ディレクトリ
            "Desc" コメント *
            "HotKey" ショートカットキーの櫛 *（デフォルト：0）
            "Style"（スタイル） ウィンドウスタイル *（通常 1、最大 3、最小 7 分）
            "Icon"（アイコン） アイコンパス、Idx（デフォルト：、0）
         </param>
         <returns>利用可能な場合はプロパティの値、または "" 失敗した場合は "FAILED"</returns>
      </member>
      <member name="M:LitDev.LDShell.ShellLinkSet(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>ターゲットパス、引数など（URL の場合は *）（IWshRuntimeLibrary）など、既存の lnk / url ショートカットリンクのプロパティを変更します。</summary>
         <param name="shortcut">既存の lnk / url ショートカットリンクファイルの完全パス。</param>
         <param name="target">* ターゲットファイルのフルパス / -folder resp。URL アドレス。</param>
         <param name="args">ショートカットを起動するときの Startparameter または ""（url の場合）。</param>
         <param name="folder">開始フォルダのフルパスまたは ""（url）。</param>
         <param name="desc">* ショートカットまたは "" のコメントまたは説明。</param>
         <param name="icon">* ショートカットリンクのアイコンの完全パス（パス、Idx）または ""。'Idx' はファイル内のアイコンのインデックスです（デフォルトは 0、.ico）。</param>
         <param name="hotkey">* キーの組み合わせを使用してショートカットリンクを開きます（デフォルト：0）。</param>
         <param name="style">* ショートカットを起動するときのウィンドウスタイル（デフォルト：通常 1、最大 3、最小 7 分）。</param>
         <returns>成功した場合の変更されたショートカットの完全なファイルパス。そうでない場合は "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDShell.DTIconsHide">
         <summary>すべてのデスクトップアイコンを非表示にします。</summary>
      </member>
      <member name="M:LitDev.LDShell.DTIconsShow">
         <summary>すべての隠しデスクトップアイコンを再度表示します。</summary>
      </member>
      <member name="M:LitDev.LDShell.DTIconsToggle">
         <summary>すべてのデスクトップアイコンの表示を自動的に切り替えます（オン / オフ）。</summary>
      </member>
      <member name="M:LitDev.LDShell.ShowFileProperties(Microsoft.SmallBasic.Library.Primitive)">
         <summary>指定されたファイルまたはフォルダパスのシェルプロパティダイアログを開きます（TW またはコンソールからは利用できません）。</summary>
         <param name="filePath">完全なファイルパスまたはフォルダパス。</param>
      </member>
      <member name="M:LitDev.LDShell.SpecialFolderList(Microsoft.SmallBasic.Library.Primitive)">
         <summary>特殊なシステム / シェルフォルダ内のすべての項目を取得します（上位レベルのみ）。</summary>
         <param name="csidl">システムフォルダの CSIDL 番号（0 ～ 47、LDShell.SpecialFolderConstants の下にある利用可能なフォルダの定数および名前）。</param>
         <returns>成功した場合はシステムフォルダ内のすべてのオブジェクトの名前（上位レベルのみ）、それ以外の場合は "FAILED"。</returns>
         <example>
            http://msdn.microsoft.com/library/bb774096.aspx
            例えば、CSIDL は：
             3 すべてのコントロール パネル項目
             5 ドキュメント
             8 最近使った項目
             9 SendTo
            10 ごみ箱
            16 デスクトップ
            17 PC
            20 Fonts
            32 INetCache
         </example>
      </member>
      <member name="M:LitDev.LDShell.ShowDesktop">
         <summary>開いているすべてのウィンドウをタスクバーに最小化し、デスクトップを表示します（RestoreWindows で復元）。</summary>
      </member>
      <member name="M:LitDev.LDShell.TileAllHoriz">
         <summary>開いているすべてのウィンドウをデスクトップ上に水平に並べて並べ替えます（RestoreWindows で元に戻す）。</summary>
      </member>
      <member name="M:LitDev.LDShell.TileAllVert">
         <summary>開いているすべてのウィンドウを、デスクトップ上に縦に並べて並べ替えます（RestoreWindows で元に戻す）。</summary>
      </member>
      <member name="M:LitDev.LDShell.CascadeWindows">
         <summary>デスクトップにカスケードされているウィンドウをすべて注文します（RestoreWindows で元に戻す）。</summary>
      </member>
      <member name="M:LitDev.LDShell.RestoreWindows">
         <summary>タスクバーのすべての最小化されたウィンドウを（ShowDesktop、TileAll ..、CascadeWindows の後に）再び復元します。</summary>
      </member>
      <member name="M:LitDev.LDShell.ToggleDesktop">
         <summary>（ウィンドウなしの）デスクトップの表示をオンまたはオフに切り替えます（ShowDesktop / RestoreWindows）。</summary>
      </member>
      <member name="M:LitDev.LDShell.Switch3D">
         <summary>デスクトップ上の 3D スタック内に残ったウィンドウをすべて選択して（矢印キーで）選択します。</summary>
      </member>
      <member name="M:LitDev.LDShell.RunBox">
         <summary>実行（ボックス）ダイアログを表示します。</summary>
      </member>
      <member name="M:LitDev.LDShell.DateTimeSettings">
         <summary>日付と時刻の設定ダイアログを表示します。</summary>
      </member>
      <member name="M:LitDev.LDShell.StartSettings">
         <summary>startment taskbar 設定のダイアログを表示します。</summary>
      </member>
      <member name="M:LitDev.LDShell.ExploreFolder(Microsoft.SmallBasic.Library.Primitive)">
         <summary>Windows Explorer ウィンドウで指定したフォルダを開きます。（既存のファイルパスの親フォルダ）。QTTabBar の新しいタブ。</summary>
         <param name="path">エクスプローラで開くフォルダパス（ファイルパスは親フォルダを開きます）。フォルダが存在する必要があります。</param>
      </member>
      <member name="M:LitDev.LDShell.OpenFolder(Microsoft.SmallBasic.Library.Primitive)">
         <summary>指定されたファイル / フォルダパス（既存のファイルパスの親フォルダ）でエクスプローラを開きます。QTTabBar の新しいタブ。</summary>
         <param name="path">指定したフォルダを開きます（ファイルパスは親フォルダを開きます）。フォルダが存在する必要があります。</param>
      </member>
      <member name="M:LitDev.LDShell.SelectFolder(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>フォルダ選択ダイアログを表示します。</summary>
         <param name="title">ダイアログに表示するタイトル。</param>
         <param name="initDir">ダイアログが開いたときの開始フォルダ、または最後に選択したフォルダのデフォルトフォルダ（デフォルト：コンピュータ）。</param>
         <returns>選択後のフォルダ全体のパス、またはキャンセルされた場合は ""、それ以外の場合は "FAILED" です。</returns>
      </member>
      <member name="M:LitDev.LDShell.GetSystemInfo(Microsoft.SmallBasic.Library.Primitive)">
         <summary>指定された SystemInformation を取得します。</summary>
         <param name="info">
            取得する値の名前。オプション：
            "DirectoryServiceAvailable"、"DoubleClickTime"、"ProcessorLevel"、"ProcessorSpeed"、"ProcessorArchitecture"、"PhysicalMemoryInstalled"、"IsOS_DomainMember"
            （XP のみ："IsOS_Professional"、"IsOS_Personal"）。
         </param>
         <returns>成功した場合の照会された値。そうでなければ "" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDShell.GetSetting(Microsoft.SmallBasic.Library.Primitive)">
         <summary>グローバルシェル設定（folder opions-view、CheckedStatus）の値を取得します。</summary>
         <param name="value">取得する値の整数定数です（例：1,2,4、"8"、"32" など）。</param>
         <returns>成功した場合は "True" または "False"、それ以外の場合は "FAILED"。</returns>
         <example>
            http://msdn.microsoft.com/library/windows/desktop/gg537739.aspx
            ShowAllObjects = SBShell.GetSetting(1)
            ShowExtensions = SBShell.GetSetting(2)
            ShowInfoTip = SBShell.GetSetting(8192)
            ShowSuperHidden = SBShell.GetSetting(262144)
         </example>
      </member>
      <member name="P:LitDev.LDShell.AllDetails">
         <summary>使用可能なすべての拡張プロパティを配列（"idx=property name;"、-1=Infotip、0=Name、.. ～ 286=合計ビットレート（または全ビットレート））として取得します。</summary>
      </member>
      <member name="P:LitDev.LDShell.DTIconsOn">
         <summary>デスクトップアイコンが現在表示されている天気を取得します（"True" または "False"）。</summary>
      </member>
      <member name="P:LitDev.LDShell.SpecialFolderConstants">
         <summary>すべての CSIDL 番号とその特別な System / Shell フォルダ名のリストを配列（"csidl=folder name;"）として取得します。</summary>
      </member>
      <member name="P:LitDev.LDShell.SpecialFolderPaths">
         <summary>すべての特殊な System / Shell フォルダ名とそのフォルダパスのリストを配列（"folder name=path;"）として取得します。</summary>
      </member>
      <member name="P:LitDev.LDShell.SpecialFolders">
         <summary>すべての特別なシステムフォルダのリストを配列（"folder name=path;"）として取得します。シェルフォルダの場合 'SpecialFolderPaths'</summary>
      </member>
      <member name="P:LitDev.LDShell.Version">
         <summary>この拡張機能の現在のファイルバージョンを取得します（それ以外の場合は 0.0.0.0）。</summary>
      </member>
      <member name="P:LitDev.LDShell.Name">
         <summary>この拡張の実行アセンブリの名前を取得します。</summary>
      </member>
      <member name="T:LitDev.LDInline">
         <summary>
            実行時に使用する C#、VB、または JScript コードをインクルードします。
            複数の名前空間またはクラスが使用される場合は、すべてのメソッド、プロパティ、またはイベント名が一意である必要があります。
            あるいは、完全修飾 namespace.type.name を使用することもできます。
            拡張機能をコンパイルするために使用できます。
            外部でコンパイルされた他の .Net dll でも使用できます。
            メソッド、プロパティ、イベント、クラス、および使用された参照を取得できます（public static のみ）。

            現在のアプリケーションアセンブリは自動的に参照されます。
            使用される .NET メソッドによっては、追加のアセンブリが必要な場合があります。
            追加のアセンブリは完全な dll パスによって参照されます。
            アセンブリ DLL は、次の場所または類似の場所でよく使用されます。
            C:\Windows\Microsoft.NET\Framework\v2.0.50727
            C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0

            後で TextWindow を使用する必要がある場合は、これらのメソッドを使用する前に TextWindow を表示する必要があります。
         </summary>
      </member>
      <member name="M:LitDev.LDInline.IncludeCS(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            C# クラスをインクルードしてコンパイルします。File.ReadContents（）で読み取ったファイルの内容にすることができます。
         </summary>
         <param name="source">C# ソース。</param>
         <param name="assemblies">必要な追加アセンブリの配列。</param>
         <param name="dllName">dll（+ xml）出力を作成するオプションのパスは、"" を使用してメモリ内で実行します。</param>
         <returns>"FAILED" または "SUCCESS"</returns>
      </member>
      <member name="M:LitDev.LDInline.IncludeVB(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            VB モジュールを組み込み、コンパイルします。File.ReadContents（）で読み取ったファイルの内容にすることができます。
         </summary>
         <param name="source">VB ソース。</param>
         <param name="assemblies">必要な追加アセンブリの配列。</param>
         <param name="dllName">dll（+ xml）出力を作成するオプションのパスは、"" を使用してメモリ内で実行します。</param>
         <returns>"FAILED" または "SUCCESS"</returns>
      </member>
      <member name="M:LitDev.LDInline.IncludeJScript(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            JScript モジュールを組み込み、コンパイルします。File.ReadContents（）で読み取ったファイルの内容にすることができます。
         </summary>
         <param name="source">JScript ソース。</param>
         <param name="assemblies">必要な追加アセンブリの配列。</param>
         <param name="dllName">dll 出力を作成するオプションのパスは、"" を使用してメモリ内で実行します。</param>
         <returns>"FAILED" または "SUCCESS"</returns>
      </member>
      <member name="M:LitDev.LDInline.LoadDLL(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            以前にコンパイルされ、保存された dll を使用してください。
         </summary>
         <param name="dllName">DLL のパス。</param>
      </member>
      <member name="M:LitDev.LDInline.Call(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            以前にインクルードされたメソッドを呼び出します。
         </summary>
         <param name="method">メソッド名。</param>
         <param name="args">メソッド引数、ない場合は ""、1 つの値の場合は 1 つ以上の値の配列。</param>
         <returns>通話の結果または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDInline.Get(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            以前に含まれたプロパティを取得します。
         </summary>
         <param name="property">プロパティ名。</param>
         <returns>プロパティ値または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDInline.Set(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            以前にインクルードされたプロパティを設定します。
         </summary>
         <param name="property">プロパティ名。</param>
         <param name="value">プロパティ値。</param>
      </member>
      <member name="M:LitDev.LDInline.Event(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            以前にインクルードされたイベントのコールバックサブルーチンを設定します。
         </summary>
         <param name="Event">イベント名。</param>
         <param name="callBack">コールバックサブルーチン。</param>
      </member>
      <member name="M:LitDev.LDInline.GetMethods(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ロードされたインラインメソッドの配列を取得します。
         </summary>
         <param name="fullName">完全な名前（namespace.type.method）"True" を取得するか、メソッド名 "False" を取得します。</param>
         <returns>メソッド名と戻り値の型の配列。</returns>
      </member>
      <member name="M:LitDev.LDInline.GetMethodParameters(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            インラインメソッドロードされたパラメータ（引数）の配列を取得します。
         </summary>
         <param name="method">メソッド名。</param>
         <returns>パラメータ名と型の配列。</returns>
      </member>
      <member name="M:LitDev.LDInline.GetProperties">
         <summary>
            ロードされたインラインプロパティの配列を取得します。
         </summary>
         <returns>プロパティ名と型の配列。</returns>
      </member>
      <member name="M:LitDev.LDInline.GetEvents">
         <summary>
            ロードされたインラインイベントの配列を取得します。
         </summary>
         <returns>イベント名とハンドラタイプの配列。</returns>
      </member>
      <member name="M:LitDev.LDInline.GetReferences(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            追加されたインラインリファレンスの配列を取得します。
            これらは参照される追加されたものであり、使用される場合と使用されない場合があります。
         </summary>
         <param name="fullName">完全修飾名（バージョン、カルチャ、PublicKeyToken）"True" または基本名 "False" を取得します。</param>
         <returns>参照名と dll の場所の配列。</returns>
      </member>
      <member name="M:LitDev.LDInline.GetAssemblies(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            使用されたインラインアセンブリの配列を取得します。
            これらは実際に使用される参照アセンブリです。
         </summary>
         <param name="fullName">完全修飾名（バージョン、カルチャ、PublicKeyToken）"True" または基本名 "False" を取得します。</param>
         <returns>アセンブリ名と dll の場所の配列。</returns>
      </member>
      <member name="M:LitDev.LDInline.GetTypes">
         <summary>
            ロードされたインラインクラス型の配列を取得します。
         </summary>
         <returns>クラス型と名前空間の配列。</returns>
      </member>
      <member name="T:LitDev.LDList">
         <summary>
            このオブジェクトは、アイテムが追加または削除されるときに並べ替える配列のような値を格納する方法を提供します。
            リストは、整数で索引を付けてさまざまな操作を実行できる効率的な配列ストア（SmallBasic 配列よりもはるかに高速）です。
            リストが変更されると、インデックスは自動的に更新され（1 からインデックスされます）。
         </summary>
      </member>
      <member name="M:LitDev.LDList.Add(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定されたリストの最後に値を追加します。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <param name="value">
            追加する値。
         </param>
         <returns>
            リスト内のアイテムの数。失敗した場合は -1。
         </returns>
      </member>
      <member name="M:LitDev.LDList.Append(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            最初のリストの最後に 2 番目のリストを追加します。
         </summary>
         <param name="listName1">
            最初のリストの名前。
         </param>
         <param name="listName2">
            listName1 に追加する 2 番目のリストの名前。
         </param>
         <returns>
            リスト内のアイテムの数。失敗した場合は -1。
         </returns>
      </member>
      <member name="M:LitDev.LDList.Count(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定されたリスト内の項目の数を取得します。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <returns>
            リスト内のアイテムの数。失敗した場合は -1。
         </returns>
      </member>
      <member name="M:LitDev.LDList.RemoveAt(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定されたリストからインデックスで値を削除します（1 から開始）。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <param name="index">
            削除する値のインデックス。
         </param>
         <returns>
            リスト内のアイテムの数。失敗した場合は -1。
         </returns>
      </member>
      <member name="M:LitDev.LDList.GetAt(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            インデックスで指定されたリストから値を取得します（1 から開始）。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <param name="index">
            取得する値のインデックス。
         </param>
         <returns>リストの値。</returns>
      </member>
      <member name="M:LitDev.LDList.SetAt(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定されたリストの値をインデックス（1 から始まる）で設定（置換）します。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <param name="index">
            設定するインデックス。
         </param>
         <param name="value">
            設定する値。
         </param>
         <returns>
            リスト内のアイテムの数。失敗した場合は -1。
         </returns>
      </member>
      <member name="M:LitDev.LDList.InsertAt(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            インデックス（1 から始まる）で指定されたリストに値を挿入します。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <param name="index">
            挿入するインデックス。
         </param>
         <param name="value">
            挿入する値。
         </param>
         <returns>
            リスト内のアイテムの数。失敗した場合は -1。
         </returns>
      </member>
      <member name="M:LitDev.LDList.IndexOf(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定されたリストから最初に出現した値のインデックス（1 から始まる）を取得します。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <param name="value">
            インデックスを取得する値（見つからない場合は 0）。
         </param>
         <returns>値インデックスまたは 0</returns>
      </member>
      <member name="M:LitDev.LDList.Contains(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定されたリスト内に値が存在するかどうかを確認します。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <param name="value">
            チェックする値。
         </param>
         <returns>
            "True" または "False"。
         </returns>
      </member>
      <member name="M:LitDev.LDList.Reverse(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定したリスト内の値の順序を逆にします。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <returns>
            リスト内のアイテムの数。失敗した場合は -1。
         </returns>
      </member>
      <member name="M:LitDev.LDList.Clear(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定したリストからすべての値を削除します。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <returns>
            リスト内のアイテムの数。失敗した場合は -1。
         </returns>
      </member>
      <member name="M:LitDev.LDList.SortByNumber(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            数値として扱われる値で指定されたリストをソートします。
            すべての値は数値でなければなりません。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <returns>
            リスト内のアイテムの数。失敗した場合は -1。
         </returns>
      </member>
      <member name="M:LitDev.LDList.SortByText(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            テキスト文字列として扱われる値（語彙ソート）で指定されたリストをソートします。
            ソートは大文字小文字を区別しません。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <returns>
            リスト内のアイテムの数。失敗した場合は -1。
         </returns>
      </member>
      <member name="M:LitDev.LDList.SubList(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定されたリストからサブリストを取得します。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <param name="start">
            サブリストの最初のインデックス。
         </param>
         <param name="length">
            サブリストの長さ。
         </param>
         <returns>サブリスト</returns>
      </member>
      <member name="M:LitDev.LDList.Find(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定されたリストからテキストが一致するサブリストを取得します。
            テキストの一致は大文字と小文字を区別しません。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <param name="match">
            一致するテキスト。
         </param>
         <param name="exact">
            完全一致（大文字小文字を区別しない）"True" または一致するテキストは、リスト "False" に含まれています。
         </param>
         <returns>サブリスト</returns>
      </member>
      <member name="M:LitDev.LDList.FindIndices(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            テキストが一致する指定されたリストからインデックスのサブリストを取得します。
            テキストの一致は大文字と小文字を区別しません。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <param name="match">
            一致するテキスト。
         </param>
         <param name="exact">
            完全一致（大文字小文字を区別しない）"True" または一致するテキストは、リスト "False" に含まれています。
         </param>
         <returns>一致が見つかったリストのインデックスのサブリスト。</returns>
      </member>
      <member name="M:LitDev.LDList.Remove(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            テキストが一致する特定のリストからすべての出現を削除します。
            テキストの一致は大文字と小文字を区別しません。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <param name="match">
            一致するテキスト。
         </param>
         <param name="exact">
            完全一致（大文字小文字を区別しない）"True" または一致するテキストは、リスト "False" に含まれています。
         </param>
         <returns>
            リスト内のアイテムの数。失敗した場合は -1。
         </returns>
      </member>
      <member name="M:LitDev.LDList.Distinct(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定されたリストから一意の値のサブリストを取得します。
            テキストの比較では、大文字と小文字は区別されません。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <returns>サブリスト</returns>
      </member>
      <member name="M:LitDev.LDList.Intersect(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定された 2 つのリスト間で共有値のサブリストを取得します。
            テキストの比較では、大文字と小文字は区別されません。
         </summary>
         <param name="listName1">
            最初のリストの名前。
         </param>
         <param name="listName2">
            2 番目のリストの名前。
         </param>
         <returns>交差点リスト。</returns>
      </member>
      <member name="M:LitDev.LDList.Except(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定された 2 つのリスト間の非共有値のサブリストを取得します。
            テキストの比較では、大文字と小文字は区別されません。
         </summary>
         <param name="listName1">
            最初のリストの名前。
         </param>
         <param name="listName2">
            2 番目のリストの名前。
         </param>
         <returns>例外リスト。</returns>
      </member>
      <member name="M:LitDev.LDList.Union(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2 つの指定されたリストの間で結合された値のサブリストを取得します。
            テキストの比較では、大文字と小文字は区別されません。
         </summary>
         <param name="listName1">
            最初のリストの名前。
         </param>
         <param name="listName2">
            2 番目のリストの名前。
         </param>
         <returns>組合リスト</returns>
      </member>
      <member name="M:LitDev.LDList.Copy(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            リストをコピーします。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <returns>リストのコピー。</returns>
      </member>
      <member name="M:LitDev.LDList.Write(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            リストをファイルに保存します。
            リストの値ごとに 1 行が使用されます。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <param name="filePath">
            リストを保存する完全パス。
         </param>
         <param name="append">
            既存のファイル "True" の末尾に追加するか、新規ファイル "False" を作成します。
         </param>
         <returns>
            リスト内のアイテムの数。失敗した場合は -1。
         </returns>
      </member>
      <member name="M:LitDev.LDList.Read(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ファイルからリストを読み込みます。
         </summary>
         <param name="filePath">
            リストを読むフルパス。
         </param>
         <returns>
            操作が成功した場合はリスト、それ以外の場合は "" を返します。
         </returns>
      </member>
      <member name="M:LitDev.LDList.Print(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            リストを TextWindow に出力します。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <returns>
            リスト内のアイテムの数。失敗した場合は -1。
         </returns>
      </member>
      <member name="M:LitDev.LDList.ToArray(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            リストを SmallBasic 配列に変換します。
            大きなリストの場合には推奨されません。
         </summary>
         <param name="listName">
            リストの名前。
         </param>
         <returns>
            Small Basic 配列。
         </returns>
      </member>
      <member name="M:LitDev.LDList.CreateFromValues(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            SmallBasic 配列をリストにコピーします。
            配列インデックスはリストによって無視されます。
         </summary>
         <param name="sbArray">
            SmallBasic 配列。
         </param>
         <returns>作成されたリスト。</returns>
      </member>
      <member name="M:LitDev.LDList.CreateFromIndices(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            SmallBasic 配列のインデックスをリストにコピーします。
         </summary>
         <param name="sbArray">
            SmallBasic 配列。
         </param>
         <returns>作成されたリスト。</returns>
      </member>
      <member name="T:LitDev.LDClient">
         <summary>
            コンピュータ間のサーバとクライアントの通信。
            サーバーとクライアントには別個のプログラムが必要です。これはクライアント向けです。
         </summary>
      </member>
      <member name="M:LitDev.LDClient.CheckServer(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            サーバーが接続可能かどうかをテストします。
            高い頻度（1 秒あたり 1 を超える）でこのメソッドを呼び出さないでください。
         </summary>
         <param name="server">
            サーバー接続の ip：port（例："192.168.1.60:100"）。
            この値は、LDServer.Start によって返されます。
         </param>
         <returns>"AVAILABLE"（使用可能） または "UNAVAILABLE"（使用不可）</returns>
      </member>
      <member name="M:LitDev.LDClient.Connect(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            サーバーに接続します。
         </summary>
         <param name="server">
            サーバー接続の ip：port（例："192.168.1.60:100"）。
            この値は、LDServer.Start によって返されます。
         </param>
         <param name="auto">
            自動メッセージの受け渡しを "True" または "False" にします。
            これを使用すると（推奨）、すべてのクライアントデータがサーバー経由で他のすべてのクライアントに渡されます。
            送受信イベントの処理は必要ありません。
            データは、Update メソッドから返されるデータの配列（クライアント名でインデックス付け）に更新されます。
            auto オプションは、サーバーとすべてのクライアントで同じにする必要があります。
         </param>
         <returns>"SUCCESS"、"FAILED" または "ALREADY_CONNECTED"</returns>
      </member>
      <member name="M:LitDev.LDClient.Disconnect">
         <summary>
            クライアントをサーバーから切断します。
         </summary>
         <returns>"SUCCESS"（成功）、"FAILED"（失敗）、または "NOT_CONNECTED"（未接続）</returns>
      </member>
      <member name="M:LitDev.LDClient.SendMessage(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            サーバーにメッセージを送信します。
         </summary>
         <param name="message">メッセージは、配列を含む任意の変数であってもよい。</param>
         <returns>"SUCCESS"（成功）、"FAILED"（失敗）、または "NOT_CONNECTED"（未接続）</returns>
      </member>
      <member name="M:LitDev.LDClient.UpdateDynamic(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            自動メッセージの受け渡しを使用する場合は、クライアントデータを更新します。
            これは、スプライト座標のような頻繁に変化するデータの少量のためです。
            この方法では、クライアントに格納されている最後に更新されたクライアントデータが使用されるため、高速です。
         </summary>
         <param name="data">このクライアントが他のクライアントに伝播するためのデータ。</param>
         <returns>既存のすべてのクライアントの現在のデータでクライアント名でインデックスされた配列。</returns>
      </member>
      <member name="M:LitDev.LDClient.UpdateStatic(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            自動メッセージの受け渡しを使用する場合は、クライアントデータを更新します。
            これは、クライアントの設定など、頻繁に変化するデータを大量に処理するためのものです。
            この方法では、サーバーに格納されて取得されたデータが使用されるため、サーバーが取得したデータを待つため、UpdateDynamic よりも遅くなる可能性があります。
            すべてのクライアントデータが完全に同期されることを保証します。
         </summary>
         <param name="data">このクライアントが他のクライアントに伝播するためのデータ。</param>
         <returns>既存のすべてのクライアントの現在のデータでクライアント名でインデックスされた配列。</returns>
      </member>
      <member name="M:LitDev.LDClient.GetClients">
         <summary>
            現在接続しているクライアントのリストを取得します。
         </summary>
         <returns>現在のクライアント名の配列、または、なしの場合は ""。</returns>
      </member>
      <member name="P:LitDev.LDClient.Name">
         <summary>
            この顧客の名前。
            あなたの名前を取得または設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDClient.CloseDelay">
         <summary>
            接続が切断される前にメッセージを送信できるように切断するときの遅延（デフォルトは 100）です（切断）。
            この遅延は、LDServer.CloseDelay のサーバーに対しても設定する必要があります。
         </summary>
      </member>
      <member name="P:LitDev.LDClient.LastServerMessage">
         <summary>
            最後のサーバーメッセージ。
         </summary>
      </member>
      <member name="E:LitDev.LDClient.ServerMessage">
         <summary>
            サーバーがこのクライアントにメッセージを送信したときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDClient.Disconnected">
         <summary>
            サーバーがこのクライアントの接続を切断したときのイベント。
         </summary>
      </member>
      <member name="T:LitDev.LDServer">
         <summary>
            コンピュータ間のサーバとクライアントの通信。
            サーバーとクライアントには別個のプログラムが必要です。これはサーバー用です。
         </summary>
      </member>
      <member name="M:LitDev.LDServer.Disconnect(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            クライアントを切断します。
         </summary>
         <param name="clientName">
            クライアント名、通常 Client1、Client2 など
            現在のクライアントのリストは、GetClients メソッドから取得するか、ClientConnected イベントから検索できます。
         </param>
         <returns>"SUCCESS"、"NOT_CONNECTED"、"NO_CLIENT" または "FAILED"</returns>
      </member>
      <member name="M:LitDev.LDServer.Close(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            クライアントを切断して閉じます（終了）。
         </summary>
         <param name="clientName">
            クライアント名、通常 Client1、Client2 など
            現在のクライアントのリストは、GetClients メソッドから取得するか、ClientConnected イベントから検索できます。
         </param>
         <returns>"SUCCESS"、"NOT_CONNECTED"、"NO_CLIENT" または "FAILED"</returns>
      </member>
      <member name="M:LitDev.LDServer.SendMessage(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            クライアントにメッセージを送信します。
         </summary>
         <param name="clientName">
            クライアント名、通常 Client1、Client2 など
            現在のクライアントのリストは、GetClients メソッドから取得するか、ClientConnected イベントから検索できます。
         </param>
         <param name="message">メッセージは、配列を含む任意の変数であってもよい。</param>
         <returns>"SUCCESS"、"NOT_CONNECTED"、"NO_CLIENT" または "FAILED"</returns>
      </member>
      <member name="M:LitDev.LDServer.Broadcast(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            すべてのクライアントにメッセージを送信します。
         </summary>
         <param name="message">メッセージは、配列を含む任意の変数であってもよい。</param>
         <returns>クライアント名がインデックスである "SUCCESS"、"NOT_CONNECTED"、"NO_CLIENT" または "FAILED" の値の配列。</returns>
      </member>
      <member name="M:LitDev.LDServer.Start(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            サーバーを起動します。
         </summary>
         <param name="auto">
            自動メッセージの受け渡しを "True" または "False" にします。
            これを使用すると（推奨）、すべてのクライアントデータがサーバー経由で他のすべてのクライアントに渡されます。
            送受信イベントの処理は必要ありません。
            データは、クライアントの Update メソッドから返されるデータの配列（クライアント名でインデックス付け）に更新されます。
            auto オプションは、サーバーとすべてのクライアントで同じにする必要があります。
         </param>
         <returns>
            現在の接続パラメータ ip：port（"192.168.1.60:100" など）、または "FAILED"。
            これは、クライアントからの接続に使用するパラメータです。
         </returns>
      </member>
      <member name="M:LitDev.LDServer.GetClients">
         <summary>
            現在接続しているクライアントのリストを取得します。
         </summary>
         <returns>現在のクライアント名の配列、または、ない場合は ""。</returns>
      </member>
      <member name="M:LitDev.LDServer.Stop">
         <summary>
            現在のサーバーを停止し、すべてのクライアントを閉じます。
         </summary>
         <returns>"SUCCESS" または "FAILED"</returns>
      </member>
      <member name="P:LitDev.LDServer.IP">
         <summary>
            サーバーの IP アドレス（デフォルトは現在の LAN IP です）。
            あなたがインターネット上で使用したい場合は、Web IP が必要になります。
         </summary>
      </member>
      <member name="P:LitDev.LDServer.Port">
         <summary>
            使用するウィンドウのポート（デフォルトは 100）。
         </summary>
      </member>
      <member name="P:LitDev.LDServer.CloseDelay">
         <summary>
            接続が切断される前にメッセージを送信できるように切断したときの遅延（ミリ秒（デフォルトは 100 秒））です（停止、切断、終了）。
            この遅延は、LDClient.CloseDelay のクライアントに対しても設定する必要があります。
         </summary>
      </member>
      <member name="P:LitDev.LDServer.AutoMessages">
         <summary>
            自動モード "True"（デフォルト）または "False" のときに TextWindow 接続メッセージを表示します。
         </summary>
      </member>
      <member name="P:LitDev.LDServer.LastClient">
         <summary>
            最後のクライアント名。
         </summary>
      </member>
      <member name="P:LitDev.LDServer.LastClientConnected">
         <summary>
            最後のクライアント接続名。
         </summary>
      </member>
      <member name="P:LitDev.LDServer.LastClientDisconnected">
         <summary>
            最後のクライアント切断名。
         </summary>
      </member>
      <member name="P:LitDev.LDServer.LastClientMessage">
         <summary>
            最後のクライアントメッセージ。
         </summary>
      </member>
      <member name="E:LitDev.LDServer.ClientMessage">
         <summary>
            クライアントがサーバーにメッセージを送信したときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDServer.ClientConnected">
         <summary>
            クライアントが接続するときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDServer.ClientDisconnected">
         <summary>
            クライアントが切断されたときのイベント。
         </summary>
      </member>
      <member name="T:LitDev.LDQueue">
         <summary>
            このオブジェクトは値を格納する方法を提供します。
            これはスタックと似ていますが、それはキューのように先入れ先出しです。
            キューの最後に値をエンキュー（追加）し、キューの先頭にある最初の値をデキュー（削除）することができます。
            値を 1 つずつエンキューおよびデキューできます。
         </summary>
      </member>
      <member name="M:LitDev.LDQueue.Enqueue(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定されたキューの最後に値を追加します。
         </summary>
         <param name="queueName">
            キューの名前。
         </param>
         <param name="value">
            エンキューする値。
         </param>
      </member>
      <member name="M:LitDev.LDQueue.GetCount(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定されたキュー内の項目の数を取得します。
         </summary>
         <param name="queueName">
            キューの名前。
         </param>
         <returns>
            指定されたキュー内の項目の数。
         </returns>
      </member>
      <member name="M:LitDev.LDQueue.Dequeue(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定されたキューの先頭から値を削除（および取得）します。
         </summary>
         <param name="queueName">
            キューの名前。
         </param>
         <returns>
            キューからの値。
         </returns>
      </member>
      <member name="T:LitDev.LDSettings">
         <summary>
            設定ライブラリは、ヘルパーで構成されています。
            ユーザー設定の保存と取得を行います。
         </summary>
      </member>
      <member name="M:LitDev.LDSettings.GetValue(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定された名前で識別される設定の値を取得します。
         </summary>
         <param name="name">
            設定の名前。
         </param>
         <returns>
            設定の値。
         </returns>
      </member>
      <member name="M:LitDev.LDSettings.SetValue(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定された名前で識別される設定の値を設定します。
         </summary>
         <param name="name">
            設定の名前。
         </param>
         <param name="value">
            設定の値。
         </param>
      </member>
      <member name="P:LitDev.LDSettings.FilePath">
         <summary>
            設定ファイルのファイルパスを取得または設定します。
         </summary>
      </member>
      <member name="T:LitDev.LDIOWarrior">
         <summary>
            IO-Warrior デバイスにアクセスします。
            http://www.codemercs.com/io-warrior/?L=1 を参照してください。
         </summary>
      </member>
      <member name="M:LitDev.LDIOWarrior.Initialise">
         <summary>
            IO-Warrior デバイスを初期化します。
         </summary>
         <returns>デバイスの数。</returns>
      </member>
      <member name="M:LitDev.LDIOWarrior.Detatch">
         <summary>
            すべての IO-Warrior デバイスを切断します。
         </summary>
      </member>
      <member name="M:LitDev.LDIOWarrior.LastError">
         <summary>
            最後のシステムエラーメッセージを取得します。
            "" エラーなし（おそらく基礎となるシステムコールの詳細なエラー分析にのみ有効です）。
         </summary>
         <returns>最後のエラー番号。</returns>
      </member>
      <member name="M:LitDev.LDIOWarrior.Read(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            IO-Warrior デバイスから読み取ります。
         </summary>
         <param name="id">デバイス番号（1 からのインデックス）。</param>
         <param name="channel">読み取るチャネル（0 からインデックスされます）。</param>
         <param name="blocking">"True"（状態が変化した後に戻る）または "False"（現在の状態で戻る）。</param>
         <param name="count">
            読み込むバイト数（ゼロの場合、channel が 0 の場合は ReportSize が使用され、channel が 1 の場合は SpecialReportSize が使用されます）。
            GetReportSize と GetSpecialReportSize を参照してください。
         </param>
         <returns>読み込みバイトの配列 [0 ～ 255]</returns>
      </member>
      <member name="M:LitDev.LDIOWarrior.Write(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            IO-Warrior デバイスに書き込みます。
         </summary>
         <param name="id">デバイス番号（1 からのインデックス）。</param>
         <param name="channel">書き込むチャネル（0 からインデックスされます）。</param>
         <param name="data">
            送信するバイト配列 [0 ～ 255]。
            配列サイズは、チャネル 0 の場合は ReportSize、チャネル 1 の場合は SpecialReportSize でなければなりません。
            GetReportSize と GetSpecialReportSize を参照してください。
         </param>
         <returns>正常に書き込まれたバイト数。</returns>
      </member>
      <member name="M:LitDev.LDIOWarrior.GetReportSize(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            レポートのサイズを取得します。
            読み取り / 書き込みのバイト数。
            これはチャネル 0 のレポートサイズです。
         </summary>
         <param name="id">デバイス番号（1 からのインデックス）。</param>
         <returns>レポートサイズまたは 0</returns>
      </member>
      <member name="M:LitDev.LDIOWarrior.GetSpecialReportSize(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            特別なレポートサイズを取得します。
            特別な読み取り / 書き込みのバイト数。
            これはチャネル 1 のレポートサイズです。
         </summary>
         <param name="id">デバイス番号（1 からのインデックス）。</param>
         <returns>特別レポートサイズまたは 0。</returns>
      </member>
      <member name="M:LitDev.LDIOWarrior.GetName(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            デバイス名を取得します。
         </summary>
         <param name="id">デバイス番号（1 からのインデックス）。</param>
         <returns>デバイス名または ""。</returns>
      </member>
      <member name="M:LitDev.LDIOWarrior.GetPID(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            デバイス PID を取得します。
         </summary>
         <param name="id">デバイス番号（1 からのインデックス）。</param>
         <returns>デバイスの PID（16 進数）または 0。</returns>
      </member>
      <member name="M:LitDev.LDIOWarrior.GetVID">
         <summary>
            デバイスの VID を取得します（すべての IOWarrior タイプに共通）。
         </summary>
         <returns>デバイスの VID（16 進数）または 0。</returns>
      </member>
      <member name="M:LitDev.LDIOWarrior.GetSerialNumber(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            デバイスのシリアル番号を取得します。
         </summary>
         <param name="id">デバイス番号（1 からのインデックス）。</param>
         <returns>デバイスのシリアル番号または ""。</returns>
      </member>
      <member name="M:LitDev.LDIOWarrior.GetVersion(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            デバイスファームウェアのバージョンを取得します。
         </summary>
         <param name="id">デバイス番号（1 からのインデックス）。</param>
         <returns>デバイスファームウェアのバージョンまたは 0。</returns>
      </member>
      <member name="M:LitDev.LDIOWarrior.LCDWrite(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            LCD にテキストを書き込む（未テスト）。
         </summary>
         <param name="id">デバイス番号（1 からのインデックス）。</param>
         <param name="text">書き込むテキスト。</param>
      </member>
      <member name="P:LitDev.LDIOWarrior.Timeout">
         <summary>
            読み書きのタイムアウトはミリ秒です。
            デフォルトは 1000 です。
         </summary>
      </member>
      <member name="T:LitDev.LDDataBase">
         <summary>
            ListView コントロールを持つ SQL データベース
            SQLite データベース用の ConnectSQLite（SQLite コマンドについては http://zetcode.com/db/sqlite を参照）。
            MySQL データベース用の ConnectMySQL（MySQL のダウンロードとセットアップについては http://www.mysql.com を参照）。
            SqlServer データベース用の ConnectSqlServer（SqlServer のダウンロードとセットアップについては、http：//www.microsoft.com/en-us/server-cloud/products/sql-server-editions/sql-server-express.aspx を参照してください）。
            AccessOleDb データベースの ConnectOleDb。
            Odbc データベース用の ConnectOdbc。
         </summary>
      </member>
      <member name="M:LitDev.LDDataBase.ConnectSQLite(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            SQLite データベースを作成または開く。
            これは、SQL メソッドの前に呼び出される必要があります。
            テーブルが作成されるときには、最初のカラムが "Id INTEGER PRIMARY KEY" でなければなりません。
         </summary>
         <param name="fileName">SQLite データベースファイルへのフルパス（通常は拡張子 db）。</param>
         <returns>データベースを識別するラベル。</returns>
      </member>
      <member name="M:LitDev.LDDataBase.ConnectMySQL(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            MySQL データベースに接続します。
            これは、SQL メソッドの前に呼び出される必要があります。
            SQLite を使用する疑いがある場合は、MySQL サービスが実行されていて、資格情報を持つデータベースがすでに作成されている必要があります。
         </summary>
         <param name="server">MySQL サーバ（例えば "localhost"）。</param>
         <param name="user">MySQL ユーザー名。</param>
         <param name="password">MySQL ユーザーのパスワード。</param>
         <param name="database">MySQL データベース名。</param>
         <returns>データベースを識別するラベル。</returns>
      </member>
      <member name="M:LitDev.LDDataBase.ConnectSqlServer(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            SqlServer データベースに接続します。
            これは、SQL メソッドの前に呼び出される必要があります。
            疑わしい場合は SQLite を使用して、SqlServer サービスが実行されていて、資格情報を持つデータベースが既に作成されている必要があります。
         </summary>
         <param name="server">SqlServer サーバー（例："(local)\SQLEXPRESS"）。</param>
         <param name="database">SqlServer データベース名。</param>
         <returns>データベースを識別するラベル。</returns>
      </member>
      <member name="M:LitDev.LDDataBase.ConnectOleDb(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            Access OleDb データベースに接続します。
            これは、SQL メソッドの前に呼び出される必要があります。
            Access OleDb サービスが実行されていて、疑わしい場合は SQLite を使用して、資格情報を使用してデータベースを作成しておく必要があります。
         </summary>
         <param name="provider">OleDb プロバイダ（"SQLOLEDB" など）。</param>
         <param name="server">OleDb サーバー（例："localhost"）。</param>
         <param name="database">OleDb データベース名。</param>
         <returns>データベースを識別するラベル。</returns>
      </member>
      <member name="M:LitDev.LDDataBase.ConnectOdbc(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            接続されている Odbc ドライバに接続します。
            これは、SQL メソッドの前に呼び出される必要があります。
            疑わしい場合は、SQLite を使用して、Odbc サービスが実行されていて、資格情報を持つデータベースがすでに作成されている必要があります。
         </summary>
         <param name="driver">Odbc ドライバ（例："{MySQL ODBC 3.51 Driver}"）。</param>
         <param name="server">Odbc サーバー（"localhost" など）。</param>
         <param name="port">Odbc ポート番号。</param>
         <param name="user">Odbc ユーザー名。</param>
         <param name="password">Odbc ユーザーのパスワード。</param>
         <param name="option">Odbc 接続を制御する Odbc オプション番号（0 または 3 など）。</param>
         <param name="database">Odbc データベース名。</param>
         <returns>データベースを識別するラベル。</returns>
      </member>
      <member name="M:LitDev.LDDataBase.AddListView(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ListView を追加して、データベースクエリ結果を表示します。
            これは、照会結果の読み取り専用の表示です。
         </summary>
         <param name="width">ListView の幅。</param>
         <param name="height">ListView の高さ。</param>
         <returns>ListView コントロール。</returns>
      </member>
      <member name="M:LitDev.LDDataBase.Command(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            SQLite、MySQL、SqlServer を実行します。データベース上の OleDb または Odbc コマンド（クエリではない）。
            このデータベースをデータビューで表示すると、この操作に続いてデータビューが更新されると、未保存のユーザー変更が失われます。
         </summary>
         <param name="database">既存のデータベースラベル（ConnectSQLite、ConnectMySQL、ConnectSqlServer、ConnectOleDb または ConnectOdbc を参照）。</param>
         <param name="command">SQL コマンド。</param>
         <returns>更新された行の数。</returns>
      </member>
      <member name="M:LitDev.LDDataBase.Query(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データベース上で SQLite、MySQL、SqlServer、OleDb、または Odbc クエリ（コマンドではない）を実行します。
         </summary>
         <param name="database">既存のデータベースラベル（ConnectSQLite、ConnectMySQL、ConnectSqlServer、ConnectOleDb または ConnectOdbc を参照）。</param>
         <param name="query">
            SQL クエリ。
            例 "SELECT * FROM myTable;"
         </param>
         <param name="listview">クエリ結果を取り込むための ListView またはなしの場合は ""。</param>
         <param name="getRecords">
            オプションで結果の配列を返します（"True" または "False"）。
            Small Basic では、多次元の大規模配列が遅いことを覚えておいてください。
         </param>
         <returns>オプションの結果配列または ""</returns>
      </member>
      <member name="M:LitDev.LDDataBase.EditTable(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            LDControls.DataView コントロールに編集用のデータベーステーブルを表示します。
            この方法を使用すると、データベースはデータベースを反映してデータビューコントロールにバインドされます。
         </summary>
         <param name="database">既存のデータベースラベル（ConnectSQLite、ConnectMySQL、ConnectSqlServer、ConnectOleDb または ConnectOdbc を参照）。</param>
         <param name="table">表示および編集する表名。</param>
         <param name="dataview">DataView コントロール。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDDataBase.SaveTable(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            LDControls.DataView で行った変更をデータベースにコミットします。
         </summary>
         <param name="database">既存のデータベースラベル（ConnectSQLite、ConnectMySQL、ConnectSqlServer、ConnectOleDb または ConnectOdbc を参照）。</param>
         <param name="dataview">DataView コントロール。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="P:LitDev.LDDataBase.Connection">
         <summary>
            SQL データベース接続文字列をオーバーライドします（高度な使用のみ）。
            この接続文字列が入力された接続パラメータの代わりに使用されるときに、データベースに接続する前に設定します。
            デフォルトは ""（未使用）です。
         </summary>
      </member>
      <member name="T:LitDev.LDEncryption">
         <summary>
            暗号化とハッシュ法。
         </summary>
      </member>
      <member name="M:LitDev.LDEncryption.RSAEncrypt(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            RSA メッセージを暗号化する
            公開鍵を設定する必要があります（誰でも公開鍵で暗号化できます）。
            キーが設定されていない場合、このセッション用に作成されたキーが使用されます。
         </summary>
         <param name="unencrypted">暗号化するメッセージ。</param>
         <returns>暗号化されたメッセージ。</returns>
      </member>
      <member name="M:LitDev.LDEncryption.RSADecrypt(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            RSA メッセージを無視する。
            秘密鍵を設定する必要があります（発信者だけが秘密鍵で復号化できます）。
            キーが設定されていない場合、このセッション用に作成されたキーが使用されます。
         </summary>
         <param name="encrypted">暗号化されたメッセージ</param>
         <returns>暗号化されていないメッセージ。</returns>
      </member>
      <member name="M:LitDev.LDEncryption.RSASign(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            RSA メッセージに署名してください。
            秘密鍵を設定する必要があります（発信者だけが秘密鍵で署名できます）。
            キーが設定されていない場合、このセッション用に作成されたキーが使用されます。
         </summary>
         <param name="data">署名するメッセージ。</param>
         <returns>メッセージの署名。</returns>
      </member>
      <member name="M:LitDev.LDEncryption.RSAVerify(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            署名された RSA メッセージを確認します。
            公開鍵を設定する必要があります（誰でも公開鍵で確認できます）。
            キーが設定されていない場合、このセッション用に作成されたキーが使用されます。
         </summary>
         <param name="data">署名されたメッセージ。</param>
         <param name="sign">メッセージの署名。</param>
         <returns>"True" または "False"。</returns>
      </member>
      <member name="M:LitDev.LDEncryption.RSAReset">
         <summary>
            秘密鍵と公開鍵をランダムにリセットする
         </summary>
      </member>
      <member name="M:LitDev.LDEncryption.AESEncrypt(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            AES 暗号化とパスワードキーを使用してテキストを暗号化します。
            暗号化されたテキストはファイルに保存できます。
            パスワードを忘れた場合、解読する方法はありません。
         </summary>
         <param name="source">暗号化するテキスト。</param>
         <param name="password">暗号化のためのパスワードキー。</param>
         <returns>暗号化されたテキスト（cypher）。</returns>
      </member>
      <member name="M:LitDev.LDEncryption.AESDecrypt(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            パスワードキーを使用して AES で暗号化された暗号化者（以前に暗号化された）を復号化します。
         </summary>
         <param name="cypher">暗号化されたテキスト（cypher）。</param>
         <param name="password">暗号化のためのパスワードキー。</param>
         <returns>元の暗号化されていないテキスト、またはパスワードと暗号化キーが一致しない場合は ""。</returns>
      </member>
      <member name="M:LitDev.LDEncryption.MD5Hash(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            テキスト入力の MD5 ハッシュを作成します（http://wikipedia.org/wiki/MD5）。
            この 32 文字のハッシュは、一般的なまたはより短いハッシュが必要な場合（パスワードまたはデータの完全性）に推奨されます。
         </summary>
         <param name="text">ハッシュを作成するためのテキストまたはパスワード。</param>
         <returns>32 文字の 16 進数の MD5 ハッシュ。</returns>
      </member>
      <member name="M:LitDev.LDEncryption.MD5HashFile(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ファイルの MD5 ハッシュを作成します。
            この 32 文字のハッシュは、ファイルデータの完全性チェック用です（ファイルの内容は変更されません）。
         </summary>
         <param name="fileName">ハッシュを取得するファイルへのフルパス。</param>
         <returns>32 文字の 16 進数の MD5 ハッシュ。</returns>
      </member>
      <member name="M:LitDev.LDEncryption.SHA512Hash(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            テキスト入力の SHA2-512 ハッシュを作成します。
            この 128 文字のハッシュは、最も安全なパスワード暗号化に推奨されています。
         </summary>
         <param name="password">ハッシュ（しばしばパスワード）を作成するテキスト。</param>
         <returns>128 文字の 16 進数の SHA512 ハッシュ。</returns>
      </member>
      <member name="M:LitDev.LDEncryption.SHA512HashFile(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ファイルの SHA512 ハッシュを作成します。
            この 128 文字のハッシュは、ファイルデータの完全性チェックのためのものです（例えば、ファイルの内容は変更されません）。
         </summary>
         <param name="fileName">ハッシュを取得するファイルへのフルパス。</param>
         <returns>128 文字の 16 進数の SHA512 ハッシュ。</returns>
      </member>
      <member name="P:LitDev.LDEncryption.RSAPublicKey">
         <summary>
            パブリック RSA キーを取得または設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDEncryption.RSAPrivateKey">
         <summary>
            プライベート RSA キーを取得または設定します。
         </summary>
      </member>
      <member name="T:LitDev.LDText">
         <summary>
            テキスト操作。
         </summary>
      </member>
      <member name="M:LitDev.LDText.Split(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            変数をセパレータで区切られた配列に分割します。
         </summary>
         <param name="text">分割するテキスト文字列。</param>
         <param name="separator">区切り文字列（例：""）、または区切り文字列の配列。</param>
         <returns>区切られたテキストの結果配列。</returns>
      </member>
      <member name="M:LitDev.LDText.Compare(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2 つのテキスト文字列を目的に比較すると、比較では大文字と小文字が区別され、文化は変化しません。
         </summary>
         <param name="text1">比較する最初の文字列。</param>
         <param name="text2">比較する 2 番目の文字列。</param>
         <returns>
            整数：
            0 より小さい（text1 は text2 より小さい）
            ゼロ（文字列は等しい）
            0 より大きい（text1 は text2 より大きい）
         </returns>
      </member>
      <member name="M:LitDev.LDText.Trim(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            先頭と末尾の "空白" をすべて削除した文字列を返します。
         </summary>
         <param name="text">トリミングする文字列。</param>
         <returns>入力文字列のトリムコピー。</returns>
      </member>
      <member name="M:LitDev.LDText.Replace(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            1 つのテキストのすべての出現を見つけて置き換える。
         </summary>
         <param name="text">変更するテキスト。</param>
         <param name="find">検索して置換するテキスト。</param>
         <param name="replace">見つかったテキストを置き換えるテキスト。</param>
         <returns>入力テキストの変更されたコピー。</returns>
      </member>
      <member name="M:LitDev.LDText.FindAll(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            あるテキストの中のサブテキストの出現をすべて取得します。
         </summary>
         <param name="text">検索するテキスト。</param>
         <param name="find">検索するサブテキスト。</param>
         <returns>各サブテキストの開始位置を持つ配列、または、ない場合は 0。</returns>
      </member>
      <member name="M:LitDev.LDText.GetWidth(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在のフォントで GraphicsWindow に表示されるテキストの幅をピクセル単位で取得します。
            このメソッドを使用するには、GraphicsWindow を開いておく必要があります。
         </summary>
         <param name="text">幅を取得するテキスト。</param>
         <returns>幅（ピクセル単位）。</returns>
      </member>
      <member name="M:LitDev.LDText.GetHeight(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在のフォントで GraphicsWindow に表示されるテキストの高さをピクセル単位で取得します。
            このメソッドを使用するには、GraphicsWindow を開いておく必要があります。
         </summary>
         <param name="text">高さを取得するためのテキスト。</param>
         <returns>幅（ピクセル単位）。</returns>
      </member>
      <member name="M:LitDev.LDText.FastStringNew">
         <summary>
            新しい高速文字列追加オブジェクトを作成します。
         </summary>
         <returns>高速ストリング追加オブジェクト。</returns>
      </member>
      <member name="M:LitDev.LDText.FastStringClear(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            高速文字列オブジェクトを "" にリセットします。
         </summary>
         <param name="fastString">高速の文字列オブジェクト。</param>
      </member>
      <member name="M:LitDev.LDText.FastStringAppend(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            高速文字列オブジェクトに文字列値を追加します。
         </summary>
         <param name="fastString">高速の文字列オブジェクト。</param>
         <param name="text">追加するテスト。</param>
      </member>
      <member name="M:LitDev.LDText.FastStringGet(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在のテキストを高速の文字列で取得します。
         </summary>
         <param name="fastString">高速の文字列オブジェクト。</param>
         <returns>現在の高速文字列テキスト。</returns>
      </member>
      <member name="T:LitDev.LDSound">
         <summary>
            サウンドレコーダー。マイク（内蔵の場合もあります）が必要です。
            システムサウンドも再生できます（適切に設定されている場合）。
         </summary>
      </member>
      <member name="M:LitDev.LDSound.Start">
         <summary>
            録音を開始します。
         </summary>
      </member>
      <member name="M:LitDev.LDSound.Stop(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在の録音を停止して保存します。
         </summary>
         <param name="wavFile">
            録音を保存する wav ファイルへのフルパス。
            拡張子が ".wav" に設定されていない場合は、設定されます。
         </param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDSound.Pause">
         <summary>
            録音を一時停止する。
         </summary>
      </member>
      <member name="M:LitDev.LDSound.Resume">
         <summary>
            一時停止した録音を再開します。
         </summary>
      </member>
      <member name="M:LitDev.LDSound.Asterisk">
         <summary>
            システムのアスタリスクサウンドを再生します。
         </summary>
      </member>
      <member name="M:LitDev.LDSound.Beep">
         <summary>
            再生システムのビープ音。
         </summary>
      </member>
      <member name="M:LitDev.LDSound.Exclamation">
         <summary>
            再生システム感嘆符の音。
         </summary>
      </member>
      <member name="M:LitDev.LDSound.Hand">
         <summary>
            再生システムハンドサウンド。
         </summary>
      </member>
      <member name="M:LitDev.LDSound.Question">
         <summary>
            再生システム質問音。
         </summary>
      </member>
      <member name="M:LitDev.LDSound.Tone(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            周波数と持続時間でシステム音を再生します。
            マザーボードのスピーカー（サウンドカードではありません）を使用していますが、音質が低いか、使用できない可能性があります。
         </summary>
         <param name="frequency">トーン周波数（37 ～ 32767 Hz）。</param>
         <param name="duration">トーンの持続時間（ms）。</param>
      </member>
      <member name="M:LitDev.LDSound.MusicPlayTime(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            音楽ファイルの再生時間を取得します。
         </summary>
         <param name="fileName">
            例えば、音楽ファイルのフルパス。"C:\Users\Public\Music\song.mp3" と入力します。
         </param>
         <returns>
            ファイルの再生時間（秒単位）（失敗した場合は 0）。
         </returns>
      </member>
      <member name="M:LitDev.LDSound.Volume(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            音量を変更します。
         </summary>
         <param name="command">
            音量レベルを変更する以下のオプションのいずれか。
            "Up" は音量を上げます。
            "Down" は音量を下げます。
            "Mute"（ミュート） は、ミュートとミュート解除の音量を切り替えます。
         </param>
      </member>
      <member name="T:LitDev.LDHID">
         <summary>
            HID（Human Interface Devices）用 USB コントロール
            デバイスの VID と PID（4 文字の 16 進コード）が必要です。
            これらのメソッドを使用すると、HID だけが動作します。
            うまくいけば、これにはほとんどのゲームコントローラ、シンプルなロボットデバイス、センサーが含まれます。
         </summary>
      </member>
      <member name="M:LitDev.LDHID.InputLength(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            HID デバイスの入力レコード長を取得します。
         </summary>
         <param name="name">デバイス名。</param>
         <returns>入力レコードのバイト数。</returns>
      </member>
      <member name="M:LitDev.LDHID.OutputLength(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            HID デバイスの出力レコード長を取得します。
         </summary>
         <param name="name">HID デバイス名。</param>
         <returns>出力レコードのバイト数。</returns>
      </member>
      <member name="M:LitDev.LDHID.Output(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データを HID デバイスに送信します。
            これは、バイト配列（0 ～ 255）でなければなりません。
            配列は 1 からインデックスされ、サイズは OutputLength でなければなりません。
         </summary>
         <param name="name">HID デバイス名。</param>
         <param name="data">送信するデータ。</param>
         <returns>データの一貫性を保つために "True" または "False"。</returns>
      </member>
      <member name="M:LitDev.LDHID.AddDevice(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            VID と PID から HID 接続デバイスを追加します。
            VID と PID は 4 文字（16 進数）の値で、次の場所から検索できます。
            デバイスマネージャー -&gt; プロパティ -&gt; 詳細 -&gt; ハードウェア ID
            例：HID \ VID_046D PID_C215 REV_0204 には、VID "046D" と PID "C215" があります。
            一度だけデバイスを追加してください。
         </summary>
         <param name="VID">デバイスの VID。</param>
         <param name="PID">デバイスの PID。</param>
         <param name="name">デバイスの名前。</param>
         <returns>成功または失敗の場合は "True" または "False"</returns>
      </member>
      <member name="M:LitDev.LDHID.GetBits(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            バイトのどのビットがセットされているかを示す 1 と 0 の 8 要素配列を取得します。
         </summary>
         <param name="data">バイト番号（0 ～ 255）。</param>
         <returns>8 要素のビット配列（小さいビットが最初）または失敗した時に ""。</returns>
      </member>
      <member name="M:LitDev.LDHID.SetBits(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            バイトのどのビットがセットされているかを示す 1 と 0 の 8 要素配列からバイトを設定します。
         </summary>
         <param name="data">1 と 0 の 8 要素配列（小さいビットが最初）。</param>
         <returns>バイト番号（0 ～ 255）または失敗した場合は -1。</returns>
      </member>
      <member name="M:LitDev.LDHID.FindDevices">
         <summary>
            発見されたすべての HID（Human Interface Devices）をリストします。
         </summary>
         <returns>
            見つかったすべてのデバイスの 2D 配列。
            最初の次元は、1 からインデックスされたデバイスです。
            2 番目の次元は、VID、PID、デバイス記述の 16 進値を保持する "VID"、"PID"、"Description" です。
         </returns>
      </member>
      <member name="P:LitDev.LDHID.LastInput">
         <summary>
            最後の HID 入力データの配列。
            これは、0 ～ 255（バイト）の値のセットです。
         </summary>
         <returns>入力データの配列、または "なし" の配列。</returns>
      </member>
      <member name="P:LitDev.LDHID.LastDevice">
         <summary>
            入力を受けた最後の HID デバイス。
         </summary>
         <returns>最後のデバイス名。</returns>
      </member>
      <member name="E:LitDev.LDHID.Input">
         <summary>
            HID 入力が変更されたときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDHID.Removed">
         <summary>
            HID デバイスが取り外されたときのイベント。
         </summary>
      </member>
      <member name="T:LitDev.LDScrollBars">
         <summary>
            GraphicsWindow ScrollBars  - スクロールゲームに使用できます。

            警告 -  GraphicsWindow.Width または GraphicsWindow.Height AFTER スクロールバーを使用して、GraphicsWindow のサイズを変更しないでください。
            この場合、LDGraphicsWindow.Width および LDGraphicsWindow.Height を使用します。

            大きなスクロール領域の場合は、Rasterize プロパティを参照してください。
         </summary>
      </member>
      <member name="M:LitDev.LDScrollBars.Add(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            GraphicsWindow にスクロールバーを追加します。
            入力の幅と高さは、スクロールできるものです。
            値 0 は、スクロールバーが表示されないようにします。
         </summary>
         <param name="width">スクロール可能な領域の幅。</param>
         <param name="height">スクロール可能領域の高さ。</param>
      </member>
      <member name="M:LitDev.LDScrollBars.Modify(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            スクロールバーを移動します。
         </summary>
         <param name="action">
            許可されるアクションには以下が含まれます。
            "PageDown"、"PageUp"、"PageLeft"、"PageRight"
            "ScrollToTop"、"ScrollToBottom"、"ScrollToLeftEnd"、および "ScrollToRightEnd"
            "ScrollToHome"、"ScrollToEnd"
         </param>
      </member>
      <member name="P:LitDev.LDScrollBars.KeyScroll">
         <summary>
            矢印キー "True"（デフォルト）または "False" でスクロールバーが移動するかどうかを設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDScrollBars.MouseScroll">
         <summary>
            スクロールバーがマウスホイール "True"（デフォルト）または "False" で移動する場合に設定します。
            Shift キーを押しながらマウスホイールで水平方向にスクロールします。
         </summary>
      </member>
      <member name="P:LitDev.LDScrollBars.HorizontalScroll">
         <summary>
            水平スクロールバーの位置を取得または設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDScrollBars.VerticalScroll">
         <summary>
            垂直スクロールバーの位置を取得または設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDScrollBars.Visibility">
         <summary>
            スクロールバーの可視性を取得または設定します。
            "True" または "False"。
         </summary>
      </member>
      <member name="P:LitDev.LDScrollBars.Rasterize">
         <summary>
            ラスタライズドローイング "True"（デフォルト）または "False"。
            100 以上のオブジェクトが描画されると（図形ではありません）、パフォーマンス上の理由から SmallBasic はこれらを画像にラスタライズします。
            非常に大きなスクロール可能領域の場合、メモリが不足し、ここでは無効にすることができます。
            無効になっている場合は、100 を超える描画可能オブジェクトを使用しないでください。
            このプロパティは、LDScrollBars.Add が呼び出される前に設定する必要があります。
         </summary>
      </member>
      <member name="E:LitDev.LDScrollBars.ScrollBarChanged">
         <summary>
            スクロール操作が発生したときのイベント
         </summary>
      </member>
      <member name="T:LitDev.LDNetwork">
         <summary>
            ネットワークまたはウェブメソッド。
         </summary>
      </member>
      <member name="M:LitDev.LDNetwork.HighScore(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ウェブに潜在的なハイスコアをアップロードします。
            すべての値は大文字と小文字を区別し、スコアは整数でなければなりません。
         </summary>
         <param name="game">ゲーム名（各ゲームまたはバージョンの一意の名前が必要です）。</param>
         <param name="user">ユーザー名。</param>
         <param name="score">スコア。</param>
         <returns>現在のスコアの高いユーザー名とそのスコアを持つ配列。</returns>
      </member>
      <member name="M:LitDev.LDNetwork.SetGameData(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ゲームのデータをアップロードします。
         </summary>
         <param name="game">ゲーム名（各ゲームまたはバージョンごとに固有の大文字と小文字を区別する必要があります）。</param>
         <param name="data">格納するデータは配列である可能性があります。</param>
         <returns>保存された成功のデータ。</returns>
      </member>
      <member name="M:LitDev.LDNetwork.GetGameData(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ゲーム用にいくつかのデータ（以前に保存したもの）をダウンロードする。
         </summary>
         <param name="game">ゲーム名（各ゲームまたはバージョンごとに固有の大文字と小文字を区別する必要があります）。</param>
         <returns>保存された成功のデータ。</returns>
      </member>
      <member name="M:LitDev.LDNetwork.LAN(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ローカルエリアネットワーク（LAN、ホームネットワーク、192.168.1.xx）に接続されているデバイスとそのアドレスのリストを取得します。
         </summary>
         <param name="timeout">タイムアウト（ミリ秒）。1000。</param>
         <returns>ping 時間の IP アドレスとデバイス名の配列 .IP アドレスでインデックス付けされています。</returns>
      </member>
      <member name="M:LitDev.LDNetwork.Ping(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            IP アドレスを ping してラウンドトリップ時間を返します。
         </summary>
         <param name="IP">ping する IP アドレス（または URL）。</param>
         <param name="timeout">タイムアウト（ミリ秒）。1000。</param>
         <returns>成功時のラウンドトリップ時間（ms）または失敗時の -1</returns>
      </member>
      <member name="M:LitDev.LDNetwork.DownloadFile(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            Network.DownloadFile と似ていますが、ダウンロードファイルが入力され、より大きなファイルを処理する点が異なります。
         </summary>
         <param name="localFile">ダウンロードしたファイルを保存するローカルファイル名。</param>
         <param name="remoteFile">リモートネットワークファイル。</param>
         <returns>バイト単位のファイルのサイズ、または失敗の場合は -1</returns>
      </member>
      <member name="T:LitDev.LDTextWindow">
         <summary>
            TextWindow ユーティリティ。
            低レベルのキーボードイベントが含まれます。
         </summary>
      </member>
      <member name="M:LitDev.LDTextWindow.Read(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            最大遅延で TextWindow から読み込みます。
            これにより、遅延の後に Return（ENTER）が TextWindow に送信されます。
            遅延が完了する前にユーザーが Return キーを押すと、それ以上のアクションは実行されません。
         </summary>
         <param name="delay">読み取りが終了するまでの最大遅延（ミリ秒）。</param>
         <returns>TextWindow から読み込まれたテキスト。</returns>
      </member>
      <member name="M:LitDev.LDTextWindow.ReadNumber(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            最大遅延を持つ TextWindow から数値を読み込みます。
            これにより、遅延の後に Return（ENTER）が TextWindow に送信されます。
            遅延が完了する前にユーザーが Return キーを押すと、それ以上のアクションは実行されません。
         </summary>
         <param name="delay">読み取りが終了するまでの最大遅延（ミリ秒）。</param>
         <returns>TextWindow から読み取られた番号。</returns>
      </member>
      <member name="M:LitDev.LDTextWindow.SendKey(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ウィンドウにキーを送信します。これは、キーをウィンドウに入力するのと同じです。
         </summary>
         <param name="window">例えば、ウィンドウタイトル。TextWindow.Title または GraphicsWindow.Title。</param>
         <param name="key">たとえば送信するキー。"Return"（戻る）</param>
      </member>
      <member name="M:LitDev.LDTextWindow.Hide">
         <summary>
            TextWindow を非表示にします。
            失敗する可能性のある標準的なメソッドの置き換え（これらのメソッドを混在させないでください）。
         </summary>
      </member>
      <member name="M:LitDev.LDTextWindow.Show">
         <summary>
            TextWindow を表示し、フォーカスを与えます。
            失敗する可能性のある標準的なメソッドの置き換え（これらのメソッドを混在させないでください）。
         </summary>
      </member>
      <member name="M:LitDev.LDTextWindow.Capture(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            TextWindow を画像ファイル（png、jpg、bmp、gif、tiff または ico）として保存します。

            ウィンドウを表示する必要があり、呼び出しの前にウィンドウを更新した後に短い遅延が必要になることがあります。
         </summary>
         <param name="fileName">
            イメージを（* .png、* .jpg、* .bmp、* .gif、* .tiff、* .ico）に保存するファイル。
            これが "" に設定されている場合、イメージは内部的に ImageList として作成されます。
         </param>
         <param name="border">
            ウィンドウ枠を含めます（"True" または "False"）。
         </param>
         <returns>
            ImageList イメージが fileName の場合は ""、それ以外の場合はファイルに出力され、"" が返されます。
         </returns>
      </member>
      <member name="M:LitDev.LDTextWindow.Print(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            TextWindow の内容を印刷します。

            ウィンドウを表示する必要があり、呼び出しの前にウィンドウを更新した後に短い遅延が必要になることがあります。
         </summary>
         <param name="border">
            ウィンドウ枠を含めます（"True" または "False"）。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDTextWindow.SetColour(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            標準の TextWindow カラーの 1 つを置き換えます。
            使用可能な色は 16 種類あり、デフォルトでは 0 から 15 のインデックスが付けられています。
            黒（0）、ダークブルー（1）、ダークグリーン（2）、ダークチェン（3）、ダークリダクション（4）、ダークマジェンタ（5）、ダークイエロー（6）、グレー
            暗いグレー（8）、青（9）、緑（10）、シアン（11）、赤（12）、マゼンタ（13）、黄色（14）、白（15）。
            TextWindow.BackgroundColor と TextWindow.ForegroundColor を使用して新しい色（元の色名を使用）を使用することもできます。また、インデックスから LDTextWindow.SetColours を使用して色を選択することもできます。
            色は、適用する前にいずれかの方法で設定する必要があります。
         </summary>
         <param name="index">置き換えるべき標準カラーインデックスカラー。</param>
         <param name="colour">標準色を置き換える任意の色。</param>
      </member>
      <member name="M:LitDev.LDTextWindow.SetColours(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在の前景色と背景色のインデックスを設定します。
         </summary>
         <param name="fgIndex">フォアグラウンドカラーインデックス（0 ～ 15）</param>
         <param name="bgIndex">背景色のインデックス（0 ～ 15）。</param>
      </member>
      <member name="P:LitDev.LDTextWindow.LastKey">
         <summary>
            最後に押されたキーまたは解放されたキー。
         </summary>
      </member>
      <member name="P:LitDev.LDTextWindow.Encoding">
         <summary>
            TextWindow の拡張エンコードを設定します。
            使用できる値は次のとおりです。
            "ASCII"（デフォルト）、"Unicode"、"UTF7"、"UTF8"
         </summary>
      </member>
      <member name="E:LitDev.LDTextWindow.KeyDown">
         <summary>
            キーが押されると低レベルのイベントが発生します。
            このイベントは、TextWindow や GraphicsWindow だけでなく、ウィンドウのフォーカスに依存しません。
         </summary>
      </member>
      <member name="E:LitDev.LDTextWindow.KeyUp">
         <summary>
            キーが離されたときの低レベルのイベント。
            このイベントは、TextWindow や GraphicsWindow だけでなく、ウィンドウのフォーカスに依存しません。
         </summary>
      </member>
      <member name="T:LitDev.LDGraphicsWindow">
         <summary>
            GraphicsWindow ユーティリティ。
         </summary>
      </member>
      <member name="M:LitDev.LDGraphicsWindow.Capture(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            GraphicsWindow を画像ファイル（png、jpg、bmp、gif、tiff または ico）として保存します。

            ウィンドウを表示する必要があり、呼び出しの前にウィンドウを更新した後に短い遅延が必要になることがあります。
         </summary>
         <param name="fileName">
            イメージを（* .png、* .jpg、* .bmp、* .gif、* .tiff、* .ico）に保存するファイル。
            これが "" に設定されている場合、イメージは内部的に ImageList として作成されます。
         </param>
         <param name="border">
            ウィンドウ枠を含めます（"True" または "False"）。
         </param>
         <returns>
            ImageList イメージが fileName の場合は ""、それ以外の場合はファイルに出力され、"" が返されます。
         </returns>
      </member>
      <member name="M:LitDev.LDGraphicsWindow.Print(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            GraphicsWindow の内容を印刷します。

            ウィンドウを表示する必要があり、呼び出しの前にウィンドウを更新した後に短い遅延が必要になることがあります。
         </summary>
         <param name="border">
            ウィンドウ枠を含めます（"True" または "False"）。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDGraphicsWindow.PauseUpdates">
         <summary>
            GraphicsWindow の更新を一時停止する。
         </summary>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDGraphicsWindow.ResumeUpdates">
         <summary>
            GraphicsWindow の更新を再開します。
         </summary>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDGraphicsWindow.ExitButtonMode(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ウィンドウのクローズボタンのモードを設定します。
         </summary>
         <param name="window">ウィンドウタイトル。TextWindow.Title または GraphicsWindow.Title。</param>
         <param name="mode">モード "Enabled"、"Disabled"）</param>
      </member>
      <member name="M:LitDev.LDGraphicsWindow.TransparentGW">
         <summary>
            透明な GraphicsWindow を作成します。
            これは、ウィンドウを作成する他の GraphicsWindow、Controls、または Shapes メソッドの前に呼び出される必要があります。
            何かを見るには、透明な GraphicsWindow に何かを追加する必要があります。
            たとえば、LDShapes.BackgroundImage で透明な境界 png を使用して非長方形のウィンドウを作成します。
            透明度は GraphicsWindow.BackgroundColor で変更できます。
            時には、100 ％未満の透明度が必要とされることもある（例えば、マウスの動きを登録するため）。
         </summary>
      </member>
      <member name="M:LitDev.LDGraphicsWindow.BackgroundImage(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            背景を画像として設定します。
            バックグラウンドは、GraphicsWindow のサイズに合わせて自動的に再スケールされます。
         </summary>
         <param name="imageName">
            バックグラウンドとしてロードするイメージ。
            ImageList.LoadImage またはローカルまたはネットワークイメージファイルから返された値。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDGraphicsWindow.BackgroundBrush(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            背景を色のグラデーションとして設定します。
         </summary>
         <param name="brush">
            以前に作成されたグラデーションまたはイメージブラシ（LDShapes.BrushGradient LDShapes.BrushImage）。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDGraphicsWindow.SetFontFromFile(Microsoft.SmallBasic.Library.Primitive)">
         <summary>GraphicsWindow のフォントをローカルの TTF フォントファイルから設定します。</summary>
         <param name="fontFile">設定するフォントファイルのフルパス。</param>
         <returns>成功した場合はフォント名、そうでない場合は "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDGraphicsWindow.GetPixel(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定された x 座標と y 座標のピクセルの色を取得します。
            このメソッドは、背景、図形、および図形のレイヤーで機能します。
         </summary>
         <param name="x">
            ピクセルの x 座標。
         </param>
         <param name="y">
            ピクセルの y 座標。
         </param>
         <returns>
            ピクセルの色。
         </returns>
      </member>
      <member name="M:LitDev.LDGraphicsWindow.FloodFill(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定されたピクセルを囲む領域を塗りつぶします。
            同じ色のすべての隣接ピクセルが変更されます。
            これは、GraphicsWindow の描画レイヤーにのみ適用されます。
         </summary>
         <param name="x">
            塗りつぶしを開始するピクセルの x 座標。
         </param>
         <param name="y">
            塗りつぶしを開始するピクセルの y 座標。
         </param>
         <param name="colour">
            塗りつぶす色。
         </param>
      </member>
      <member name="M:LitDev.LDGraphicsWindow.SetActive">
         <summary>
            GraphicsWindow をアクティブ（フォーカスを持っている）に設定します。
         </summary>
      </member>
      <member name="M:LitDev.LDGraphicsWindow.Reposition(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            GraphicsWindow 内のすべての図形とコントロールを拡大縮小して移動します。
            このメソッドは図形ではなくビューのサイズを変更して移動するため、位置やその他のプロパティは変更されずに再配置された領域内で拡大 / 縮小されたように見えます。
            たとえば、Shapes.GetLeft はビューが再配置されても変更されず、GraphicsWindow.MouseX は再配置されたビューを基準として座標をレポートします。
            ビュー全体が GrapicsWindow 内の図形のように再配置されたとします。
            ビュー座標（vX、vY）と GraphicsWindow 座標（gwX、gwY）の間の変換は次のようになります。
            gwX =（vX + panX）* scaleX + gw *（1-scaleX）/ 2
            gwY =（vY + panY）* scaleY + gh *（1-scaleY）/ 2
            すべての図面は元の GraphicsWindow 内に残ります。
         </summary>
         <param name="scaleX">ビューの X 方向のスケーリング</param>
         <param name="scaleY">ビューの Y 方向のスケーリング</param>
         <param name="panX">ビューのスケーリングで X 方向のビューをパンすると、GraphicsWindow の中央に 0 が表示されます。</param>
         <param name="panY">ビューのスケーリングで Y 方向にビューをパンすると、GraphicsWindow の中央に 0 が表示されます。</param>
         <param name="angle">ビューを回転させる角度。</param>
      </member>
      <member name="M:LitDev.LDGraphicsWindow.Animate(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            スムーズなアニメーションで GraphicsWindow 内のすべての図形とコントロールを拡大縮小して移動します。
            これは、移動がアニメートされる点を除いて、再配置方法と同じです。
         </summary>
         <param name="scaleX">ビューの X 方向のスケーリング</param>
         <param name="scaleY">ビューの Y 方向のスケーリング</param>
         <param name="panX">ビューのスケーリングで X 方向のビューをパンすると、GraphicsWindow の中央に 0 が表示されます。</param>
         <param name="panY">ビューのスケーリングで Y 方向にビューをパンすると、GraphicsWindow の中央に 0 が表示されます。</param>
         <param name="angle">ビューを回転させる角度。</param>
         <param name="duration">アニメーションの時間（ミリ秒単位）。</param>
      </member>
      <member name="M:LitDev.LDGraphicsWindow.RepositionPoint(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            GraphicsWindow と再配置された View の間の座標変換を取得します（Reposition を参照）。
         </summary>
         <param name="x">変換する x 座標。</param>
         <param name="y">変換する x 座標。</param>
         <param name="toGW">View から GraphicsWindow への転送（"True"）または GraphicsWindow から View への転送（"False"）。</param>
         <returns>1 と 2 でインデックスされた変換された座標の 2D 配列。</returns>
      </member>
      <member name="P:LitDev.LDGraphicsWindow.Style">
         <summary>
            GraphicsWindow スタイル（None 0、SingleBorder 1、3DBorder 2、ToolWindow 3）。
         </summary>
      </member>
      <member name="P:LitDev.LDGraphicsWindow.State">
         <summary>
            GraphicsWindow 状態（Normal 0、Minimized 1、Maximized 2）。
         </summary>
      </member>
      <member name="P:LitDev.LDGraphicsWindow.Icon">
         <summary>
            GraphicsWindow アイコンを設定し、"SB" を Small Basic アイコンに設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDGraphicsWindow.Width">
         <summary>
            LDScrollBars を使用している場合、GraphicsWindow の幅を設定または取得する
         </summary>
      </member>
      <member name="P:LitDev.LDGraphicsWindow.Height">
         <summary>
            LDScrollBars を使用している場合、GraphicsWindow の高さを設定または取得する
         </summary>
      </member>
      <member name="P:LitDev.LDGraphicsWindow.ScreenCapture">
         <summary>
            GraphicsWindow イメージの作成にスクリーンキャプチャを使用します。
            これは、境界線オプションが "False" に設定されている場合にのみ、印刷メソッドとキャプチャメソッドに適用されます
            このオプションが "True" に設定されている場合、現在の表示可能な GraphicsWindow がビットマップの作成に使用されます。
            このオプションを "False" に設定すると、GraphicsWindow のビジュアルがビットマップに再描画されます。
            デフォルトの "False"
         </summary>
      </member>
      <member name="P:LitDev.LDGraphicsWindow.ExitOnClose">
         <summary>
            GraphicsWindow が "True"（デフォルト）または "False" で閉じられたときに、SmallBasic プログラムが終了するかどうかを設定します。
            false に設定した場合、プログラムは引き続き実行する必要があります。
         </summary>
      </member>
      <member name="P:LitDev.LDGraphicsWindow.CancelClose">
         <summary>
            次の GraphicsWindow Close オペレーション "True" または "False"（デフォルト）をキャンセルします。
            ExitOnClose を "False" に設定する必要があります。
            これは、通常、LDDialogs.Confirm を使用して Closing イベント内で設定する必要があります。
            クロージャが防止された後、"False" にリセットされます。
         </summary>
      </member>
      <member name="P:LitDev.LDGraphicsWindow.TopMost">
         <summary>
            GraphicsWindow を一番上のウィンドウとして設定します。
            他のウィンドウにフォーカスがある場合でも、ウィンドウは他のウィンドウの上に残ります。
            "True" または "False"。
         </summary>
      </member>
      <member name="P:LitDev.LDGraphicsWindow.MouseX">
         <summary>
            GraphicsWindow X 座標にマウスを移動します。
            設定するだけでなく取得します。
         </summary>
      </member>
      <member name="P:LitDev.LDGraphicsWindow.MouseY">
         <summary>
            GraphicsWindow の Y 座標にマウスを移動します。
            設定するだけでなく取得します。
         </summary>
      </member>
      <member name="P:LitDev.LDGraphicsWindow.MouseXOffset">
         <summary>
            GraphicsWindow のデスクトップ座標へのスケーリング
            Mouse.X = MouseXOffset + MouseXScale * GraphicsWindow.MouseX。
         </summary>
      </member>
      <member name="P:LitDev.LDGraphicsWindow.MouseYOffset">
         <summary>
            GraphicsWindow のデスクトップ座標へのスケーリング
            Mouse.Y = MouseYOffset + MouseYScale * GraphicsWindow.MouseY。
         </summary>
      </member>
      <member name="P:LitDev.LDGraphicsWindow.MouseXScale">
         <summary>
            GraphicsWindow のデスクトップ座標へのスケーリング
            Mouse.X = MouseXOffset + MouseXScale * GraphicsWindow.MouseX。
         </summary>
      </member>
      <member name="P:LitDev.LDGraphicsWindow.MouseYScale">
         <summary>
            GraphicsWindow のデスクトップ座標へのスケーリング
            Mouse.Y = MouseYOffset + MouseYScale * GraphicsWindow.MouseY。
         </summary>
      </member>
      <member name="P:LitDev.LDGraphicsWindow.RepositionedMouseX">
         <summary>
            マウス X GraphicsWindow は、再配置されたビュー内での座標になります（"再配置" を参照）。
         </summary>
      </member>
      <member name="P:LitDev.LDGraphicsWindow.RepositionedMouseY">
         <summary>
            再配置されたビュー内のマウス GraphicsWindow Y 座標です（"再配置" を参照）。
         </summary>
      </member>
      <member name="P:LitDev.LDGraphicsWindow.Resize">
         <summary>
            GraphicsWindow のサイズ変更モード（CanMinimize 0、CanResize 1、CanResizeWithGrip 2、NoResize 3）。
         </summary>
      </member>
      <member name="P:LitDev.LDGraphicsWindow.ShowInTaskbar">
         <summary>
            タスクバーに GraphicsWindow を表示または非表示にする（"True" または "False"）
         </summary>
      </member>
      <member name="E:LitDev.LDGraphicsWindow.Closing">
         <summary>
            GraphicsWindow が閉じられたときのイベント。
            このイベントを使用するには ExitOnClose を "False" に設定する必要があります。
            CancelClose を true に設定すると、クロージャがキャンセルされます。
         </summary>
      </member>
      <member name="T:LitDev.LDSearch">
         <summary>
            ビングのオンライン検索方法。
            ウェブ、画像、ビデオ、ニュース、およびスペルの提案を含みます。
         </summary>
      </member>
      <member name="M:LitDev.LDSearch.GetWeb(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            Web サイトの Bing 検索を実行します。
         </summary>
         <param name="search">検索テキスト。</param>
         <returns>結果、インデックス URL、および値の説明の配列（最大 50 個）。</returns>
      </member>
      <member name="M:LitDev.LDSearch.GetImage(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            Web 画像の Bing 検索を行います。
         </summary>
         <param name="search">検索テキスト。</param>
         <returns>結果の配列、index url および value の説明。</returns>
      </member>
      <member name="M:LitDev.LDSearch.GetVideo(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            Web ビデオの Bing 検索を実行します。
         </summary>
         <param name="search">検索テキスト。</param>
         <returns>結果の配列、index url および value の説明。</returns>
      </member>
      <member name="M:LitDev.LDSearch.GetNews(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            Web ニュースの Bing 検索を行います。
         </summary>
         <param name="search">検索テキスト。</param>
         <returns>結果の配列、index url および value の説明。</returns>
      </member>
      <member name="M:LitDev.LDSearch.GetSpelling(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            Web スペリングや代替検索提案の Bing 検索を実行します。
         </summary>
         <param name="search">検索テキスト。</param>
         <returns>スペルや代替候補の配列、または提案が見つからない場合は ""。</returns>
      </member>
      <member name="M:LitDev.LDSearch.GetProof(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            テキストのスペルチェック（証明）を行います。これは、Word のようなより詳細な情報を含む長いテキスト用です。
         </summary>
         <param name="text">証明するテキスト。</param>
         <param name="mode">モード "Proof"（長いテキストの場合はデフォルト）または "Spell"（短い単語または単一単語のチェックの場合）。</param>
         <returns>スペルや他の提案の配列、または提案が見つからない場合は ""。</returns>
      </member>
      <member name="P:LitDev.LDSearch.Count">
         <summary>
            ウェブ検索結果の最大数。デフォルトは 50 です。
         </summary>
      </member>
      <member name="P:LitDev.LDSearch.Language">
         <summary>
            使用する言語文化、デフォルトは現在の文化です。
            de-AT、nl-BE、fr-BE、pt-BR、en-CA、fr-CA、es-CL、da-DK、fi-FI、fr-FR、de- en-MY、es-MX、nl-NL、en-NZ、NO-NO、NO-NO、NO-NO、NO-NO、NO-NO、es-ES、s-V-SE、fr-CH、de-CH、zh-TW、tr-R-Z、TR、en-GB、en-US、es-US
         </summary>
      </member>
      <member name="T:LitDev.LDTranslate">
         <summary>
            言語翻訳方法。
            このメソッドは、MS がトランスレーション API を削除するので、現在は償却されています。
         </summary>
      </member>
      <member name="M:LitDev.LDTranslate.Languages">
         <summary>
            言語コードとその言語の配列を取得します。
            配列インデックスは、Translate メソッドに必要な言語コードです。
         </summary>
         <returns>言語コードと名前の 1D 配列。</returns>
      </member>
      <member name="M:LitDev.LDTranslate.Translate(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ある言語のテキストを別の言語に翻訳します。
         </summary>
         <param name="input">翻訳するテキスト。</param>
         <param name="languageFrom">翻訳する言語コード。</param>
         <param name="languageTo">翻訳する言語コード。</param>
         <returns>翻訳されたテキスト。</returns>
      </member>
      <member name="T:LitDev.LDStopwatch">
         <summary>
            正確なシステムストップウォッチ。
         </summary>
      </member>
      <member name="M:LitDev.LDStopwatch.Add">
         <summary>
            新しいストップウォッチを作成します。
         </summary>
         <returns>ストップウォッチの名前。</returns>
      </member>
      <member name="M:LitDev.LDStopwatch.Start(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在のストップウォッチを開始または再開します。
         </summary>
         <param name="stopwatch">ストップウォッチの名前。</param>
      </member>
      <member name="M:LitDev.LDStopwatch.Reset(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在のストップウォッチを停止し、経過時間を 0 にリセットします。
         </summary>
         <param name="stopwatch">ストップウォッチの名前。</param>
      </member>
      <member name="M:LitDev.LDStopwatch.Restart(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在のストップウォッチを停止し、経過時間を 0 にリセットしてストップウォッチを再始動します。
         </summary>
         <param name="stopwatch">ストップウォッチの名前。</param>
      </member>
      <member name="M:LitDev.LDStopwatch.Stop(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在のストップウォッチを停止します。
         </summary>
         <param name="stopwatch">ストップウォッチの名前。</param>
      </member>
      <member name="M:LitDev.LDStopwatch.ElapsedMilliseconds(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            測定された合計経過時間をミリ秒単位で取得します。
         </summary>
         <param name="stopwatch">ストップウォッチの名前。</param>
         <returns>経過したミリ秒。</returns>
      </member>
      <member name="M:LitDev.LDStopwatch.ElapsedTicks(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            非常に短い間隔でタイマーティックで測定された合計経過時間を取得します。
         </summary>
         <param name="stopwatch">ストップウォッチの名前。</param>
         <returns>経過したティック。</returns>
      </member>
      <member name="M:LitDev.LDStopwatch.DelayUpTo(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            これが最後に呼び出されてから最大間隔まで遅延します。
            偶数の演奏速度を維持するためにゲームループに役立ちます。
         </summary>
         <param name="delay">最大遅延 ms。</param>
      </member>
      <member name="P:LitDev.LDStopwatch.Frequency">
         <summary>
            ストップウォッチタイマーの頻度を毎秒ティックで取得します。
            これは、ハードウェアが ElapsedTicks で測定できる最善の時間分解能を表します。
         </summary>
      </member>
      <member name="T:LitDev.LDZip">
         <summary>
            Zip ファイル圧縮ユーティリティ。
         </summary>
      </member>
      <member name="M:LitDev.LDZip.Zip(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            zip アーカイブにファイルを圧縮する。
         </summary>
         <param name="zipFile">作成する zip アーカイブファイル。</param>
         <param name="files">
            zip アーカイブに追加するファイルの配列。
            単一のファイルまたはディレクトリを設定することもできます。
            どのディレクトリも zip に再帰的に追加されます。
            ファイルやディレクトリの空白は "_" に置き換えられます。
         </param>
         <returns>エラーメッセージまたは ""。</returns>
      </member>
      <member name="M:LitDev.LDZip.Remove(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            既存の zip アーカイブからファイル（またはすべてのサブファイルを含むディレクトリ）を削除します。
         </summary>
         <param name="zipFile">ファイルを削除する zip アーカイブ。</param>
         <param name="files">
            zip アーカイブから削除するファイルの配列。
            単一のファイルまたはディレクトリを削除することもできます。
            どのディレクトリも zip から再帰的に削除されます。
         </param>
         <returns>エラーメッセージまたは ""。</returns>
      </member>
      <member name="M:LitDev.LDZip.UnZip(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            zip アーカイブを解凍します。
         </summary>
         <param name="zipFile">解凍する zip アーカイブ。</param>
         <param name="directory">ファイルを解凍するディレクトリ（既存のファイルは上書きされます）。</param>
         <returns>エラーメッセージまたは ""。</returns>
      </member>
      <member name="M:LitDev.LDZip.ZipList(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            zip アーカイブ内のファイルを一覧表示します。
         </summary>
         <param name="zipFile">zip アーカイブ。</param>
         <returns>zip 内のファイル名の配列またはエラーメッセージ。</returns>
      </member>
      <member name="T:LitDev.LDRegex">
         <summary>
            正規表現（正規表現）テキスト操作ユーティリティ。
         </summary>
      </member>
      <member name="M:LitDev.LDRegex.Match(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            正規表現マッチを実行します。
         </summary>
         <param name="input">一致を実行するための入力文字列（変更なし）。</param>
         <param name="pattern">正規表現のパターン文字列。</param>
         <param name="caseSensitive">正規表現マッチで大文字と小文字が区別される場合（"True" または "False"）</param>
         <returns>入力（位置）の位置インデックスによってインデックスされた一致値の配列。</returns>
      </member>
      <member name="M:LitDev.LDRegex.Replace(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            正規表現の検索と置換を実行します。
         </summary>
         <param name="input">置換を実行するための入力文字列（変更されていない）。</param>
         <param name="pattern">正規表現のパターン文字列。</param>
         <param name="replacement">正規表現置換文字列。</param>
         <param name="caseSensitive">正規表現置換で大文字と小文字が区別される場合（"True" または "False"）</param>
         <returns>正規表現置換後の入力文字列の修正版。</returns>
      </member>
      <member name="T:LitDev.LDWindows">
         <summary>
            追加の GraphicsWindows を作成します。

            すべての変数はウィンドウ間で共有されます（グローバルスコープ）。
            GraphicsWindow イベントはウィンドウごとに登録する必要がありますが、イベントサブルーチンは共有できます。
            他のすべてのイベントは、通常どおり 1 回登録できます。
            すべてのコマンドまたはメソッドは、CurrentID を使用して設定された現在のアクティブウィンドウに適用されます。
            元の GraphicsWindow またはデフォルトの GraphicsWindow は、id 0 を持ちます。
         </summary>
      </member>
      <member name="M:LitDev.LDWindows.Create">
         <summary>
            新しい GraphicsWindow を作成します。
         </summary>
         <returns>作成されたウィンドウの id。</returns>
      </member>
      <member name="P:LitDev.LDWindows.CurrentID">
         <summary>
            現在のウィンドウ ID を取得または設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDWindows.LastActivated">
         <summary>
            最後のウィンドウがアクティブになりました。
         </summary>
      </member>
      <member name="P:LitDev.LDWindows.Active">
         <summary>
            ウィンドウのアクティブ状態の ID を取得または設定します（一番上）。
            アクティブなウィンドウがない場合は -1。
         </summary>
      </member>
      <member name="E:LitDev.LDWindows.Activated">
         <summary>
            ウィンドウがアクティブになったときのイベント。
            注意してこのイベントを使用してください - ほとんどの場合はお勧めできません。
         </summary>
      </member>
      <member name="T:LitDev.LDEmail">
         <summary>
            電子メールメソッド。
         </summary>
      </member>
      <member name="M:LitDev.LDEmail.Send">
         <summary>
            メールを送る。
            デフォルトの Smtp クライアントは "smtp.gmail.com" で、デフォルトのポートは 587 です。以下の電子メールクライアントと他の電子メールクライアントも動作します。
            "smtp.live.com"（Hotmail）
            "smtp.mail.yahoo.com"

            "From, Password and Recipient"（送信元、パスワード、および受信先） プロパティの最小値を最初に設定する必要があります。
            "From" および "Password" のプロパティは、クライアントの電子メールの資格情報でなければなりません。
            さらに、"Subject and Body"（件名と本文） プロパティを設定する必要があります。
            "Attachment" プロパティはオプションで完全なファイルパスに設定することができます。

            1 分あたり 1 メールは送信できません。
         </summary>
         <returns>成功のための "" またはエラーメッセージ。</returns>
      </member>
      <member name="P:LitDev.LDEmail.Port">
         <summary>
            SMTP ポート（デフォルトは 587）。
         </summary>
      </member>
      <member name="P:LitDev.LDEmail.Server">
         <summary>
            SMTP サーバー（デフォルトは "smtp.gmail.com"）。
         </summary>
      </member>
      <member name="P:LitDev.LDEmail.From">
         <summary>
            電子メールアドレスから。
         </summary>
      </member>
      <member name="P:LitDev.LDEmail.Password">
         <summary>
            メールクライアントのパスワード。
         </summary>
      </member>
      <member name="P:LitDev.LDEmail.Recipient">
         <summary>
            受信者の電子メールアドレス。
         </summary>
      </member>
      <member name="P:LitDev.LDEmail.Subject">
         <summary>
            件名テキスト。
         </summary>
      </member>
      <member name="P:LitDev.LDEmail.Body">
         <summary>
            電子メール本文。
         </summary>
      </member>
      <member name="P:LitDev.LDEmail.Attachment">
         <summary>
            添付ファイル。
         </summary>
      </member>
      <member name="P:LitDev.LDEmail.UseSSL">
         <summary>
            "True" または "False"（デフォルトは "True"）。
         </summary>
      </member>
      <member name="T:LitDev.LDImage">
         <summary>
            ImageList に格納されているイメージを変更してイメージ処理するメソッドを提供します。
            エフェクトパラメータのデフォルト値は "" です。
         </summary>
      </member>
      <member name="M:LitDev.LDImage.SetPixel(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ピクセルの色を設定します。
         </summary>
         <param name="image">ImageList イメージ。</param>
         <param name="x">x ピクセル（1 からインデックス付け）。</param>
         <param name="y">y ピクセル（1 からインデックス付け）。</param>
         <param name="colour">ピクセルを設定する色。</param>
      </member>
      <member name="M:LitDev.LDImage.GetPixel(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ピクセルカラーを取得します。
         </summary>
         <param name="image">ImageList イメージ。</param>
         <param name="x">x ピクセル（1 からインデックス付け）。</param>
         <param name="y">y ピクセル（1 からインデックス付け）。</param>
         <returns>ピクセルカラー。</returns>
      </member>
      <member name="M:LitDev.LDImage.Save(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ImageList から jpg として画像を保存します。
         </summary>
         <param name="image">保存する ImageList イメージ。</param>
         <param name="fileName">画像を保存するファイル。</param>
      </member>
      <member name="M:LitDev.LDImage.SaveAs(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ImageList からのイメージをファイル拡張子で設定された異なるフォーマットで保存します。
         </summary>
         <param name="image">保存する ImageList イメージ。</param>
         <param name="fileName">
            画像を保存するファイル。
            受け入れられるファイルタイプの拡張子には、* .bmp、* .gif、* .jpg、* .png、* .tiff または * .ico が含まれます。
         </param>
      </member>
      <member name="M:LitDev.LDImage.Remove(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ImageList からイメージを削除します。
         </summary>
         <param name="image">削除する ImageList イメージ。</param>
      </member>
      <member name="M:LitDev.LDImage.Copy(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ImageList からイメージをコピーします。
         </summary>
         <param name="image">コピーする ImageList イメージ。</param>
         <returns>新しい ImageList イメージまたは失敗した場合は ""。</returns>
      </member>
      <member name="M:LitDev.LDImage.Resize(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ImageList からイメージのサイズを変更します。
         </summary>
         <param name="image">サイズ変更する ImageList イメージ。</param>
         <param name="width">幅（ピクセル単位）。</param>
         <param name="height">高さ（ピクセル単位）。</param>
      </member>
      <member name="M:LitDev.LDImage.Add(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            画像に色の値を追加します。
            画像には、0 ～ 255 の範囲の R、G、B のピクセルがあります。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="red">追加する赤の値。</param>
         <param name="green">追加する価値。</param>
         <param name="blue">追加する青の値。</param>
      </member>
      <member name="M:LitDev.LDImage.Multiply(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            画像の色の値を掛けます。
            画像には、0 ～ 255 の範囲の R、G、B のピクセルがあります。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="red">乗算する赤の値。</param>
         <param name="green">Geen の値を乗算する。</param>
         <param name="blue">Blue 値を乗算する。</param>
      </member>
      <member name="M:LitDev.LDImage.Statistics(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            カラーピクセル値の最小、最大、平均、および STD を取得します。
         </summary>
         <param name="image">ImageList イメージ。</param>
         <returns>R、G、B の "Min"、"Max"、"Mean"、"STD" および 1,2,3 でインデックスされた統計値の配列（0 ～ 255）。</returns>
      </member>
      <member name="M:LitDev.LDImage.Histogram(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            カラーピクセル値のヒストグラムを取得します。
         </summary>
         <param name="image">ImageList イメージ。</param>
         <returns>R、G、B および 0 ～ 255 の 1,2,3 でインデックスされた色ヒストグラムの配列。</returns>
      </member>
      <member name="M:LitDev.LDImage.AddImages(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2 枚の画像を一緒に追加します。
            画像には、0 ～ 255 の範囲の R、G、B のピクセルがあります。
            どちらの画像も同じ次元でなければなりません。
         </summary>
         <param name="image1">追加する最初の ImageList イメージ。</param>
         <param name="image2">追加する 2 番目の ImageList イメージ。</param>
         <returns>結果または "" が失敗した新しい ImageList イメージ。</returns>
      </member>
      <member name="M:LitDev.LDImage.DifferenceImages(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            違いは 2 画像。
            画像には、0 ～ 255 の範囲の R、G、B のピクセルがあります。
            どちらの画像も同じ次元でなければなりません。
         </summary>
         <param name="image1">差分の最初の ImageList イメージ。</param>
         <param name="image2">2 番目の ImageList イメージを差分に変換します。</param>
         <returns>結果または "" が失敗した新しい ImageList イメージ。</returns>
      </member>
      <member name="M:LitDev.LDImage.Crop(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ImageList から画像をトリミングします。
            クロップ領域は完全にターゲットイメージ内になければなりません。
         </summary>
         <param name="image">トリミングする ImageList イメージ。</param>
         <param name="x">切り抜かれたイメージの左の位置をピクセル数で示します（0 からインデックスされます）。</param>
         <param name="y">切り抜かれたイメージの上端の位置（ピクセル数は 0 からインデックス付けされています）。</param>
         <param name="width">切り抜かれたイメージの幅（ピクセル単位）。</param>
         <param name="height">切り抜かれたイメージの高さ（ピクセル単位）。</param>
      </member>
      <member name="M:LitDev.LDImage.ColorMatrix(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            画像に対してカラーマトリックス変換を実行します。
            これはあらゆる種類の色変換に使用できます。
            http://msdn.microsoft.com/en-us/library/a7xw19wh%28v=vs.110%29.aspx を参照してください。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="matrix">
            5×5 の 2D マトリックス。
            セピア例：
            matrix[1] = "1=0.393;2=0.349;3=0.272;4=0;5=0"
            matrix[2] = "1=0.769;2=0.686;3=0.534;4=0;5=0"
            matrix[3] = "1=0.189;2=0.168;3=0.131;4=0;5=0"
            matrix[4] = "1=0;2=0;3=0;4=1;5=0"
            matrix[5] = "1=0;2=0;3=0;4=0;5=1"
         </param>
      </member>
      <member name="M:LitDev.LDImage.Rotate(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            画像を回転する。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="angle">画像を時計回りに度単位で回転させる角度。</param>
      </member>
      <member name="M:LitDev.LDImage.GetEffects">
         <summary>
            利用可能な画像とウェブカメラのエフェクトの配列を取得します。
         </summary>
         <returns>エフェクト番号でインデックスされたエフェクトの配列。</returns>
      </member>
      <member name="M:LitDev.LDImage.EffectRed(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            赤色に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectGreen(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            緑の色に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectBlue(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            青色に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectGray(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            グレースケールに変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectInverse(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            逆の色に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectYellow(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            黄色に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectCyan(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            シアン色に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectMagenta(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            マゼンタ色に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectSnow(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            雪の効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="level">レベル 1 のピクセルはランダムに雪です（デフォルトは 25）。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectFuzzy(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ファジー効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="size">ファジーにするピクセル領域（デフォルトは 4）。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectContrast(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            高コントラスト効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="contrast">Contrast factor（デフォルト 2）.1 より小さいとコントラストが減少します。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectBlocks(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ブロック効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="size">ブロックサイズファクタ（デフォルトは 5）。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectReflect(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            X または Y 反射効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="flip">0 をフリップして X をフリップし、1 をフリップ Y（デフォルトは 0）にします。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectJagged(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ギザギザの効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="size">ギザギザにするピクセル領域のサイズ（デフォルトは 4）。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectRotate(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            90 度の回転効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="rotation">+90 の場合は 0、180 の場合は 1、270（-90）度回転の場合は 2（デフォルトは 0）。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectPixelate(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ピクセルレート効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="size">Pixelating size factor（デフォルトは 16）。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectGamma(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ガンマ効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="gamma">ガンマファクターは、1 より小さく、1 より大きく（デフォルトは 2）です。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectFishEye(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            魚眼効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="factor">FishEye 係数は 1 より大きい（デフォルトは 2）。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectBulge(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            バルジ効果に変換します（FishEye に似ています）。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="factor">バルジ係数は、ピンチ効果の場合は 1 未満（デフォルトは 2）です。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectSwirl(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            スワール効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="factor">Swirl factor（デフォルト値 1）。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectPosterise(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            posterise 効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="level">ポスターレベル（デフォルトは 50）。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectHue(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            色相を変更するために変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="hue">色相シフト（0 ～ 360、デフォルトは 180）。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectSaturation(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            彩度を変更するように変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="saturation">飽和倍率（デフォルトは 2）。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectLightness(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            明度を変更するために変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="lightness">明度乗数（デフォルトは 2）。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectOilPaint(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            オイルペイント効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="radius">オイルペイント半径（奇数、デフォルトは 7）。</param>
         <param name="levels">オイルペイントレベル（デフォルトは 20）。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectCharcoal(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            木炭効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectSketch(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ペンスケッチ効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectCartoon(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            漫画の効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="radius">漫画の半径（奇数、デフォルトは 7）。</param>
         <param name="levels">漫画レベル（デフォルトは 10）。</param>
         <param name="inverse">漫画逆閾値（デフォルト 40）。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectEdge(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            Prewitt エッジ効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectAccent(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            色のアクセント効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="hue">アクセントの色相（0 o 360、デフォルトは 0（赤））。</param>
         <param name="range">アクセント範囲（デフォルトは 40）。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectSepia(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            セピア効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="threshold">セピアのしきい値（デフォルトは 30）。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectNoiseRemoval(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ノイズ除去効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
      </member>
      <member name="M:LitDev.LDImage.EffectSolarise(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ソラリゼーション効果に変換します。
         </summary>
         <param name="image">変更する ImageList イメージ。</param>
         <param name="power">Solarise パワー（デフォルトは 2、2 次）</param>
      </member>
      <member name="M:LitDev.LDImage.LoadSVG(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            SVG ファイルを ImageList イメージとしてロードします。
         </summary>
         <param name="fileName">SVG ファイル。</param>
         <returns>ImageList イメージ。</returns>
      </member>
      <member name="M:LitDev.LDImage.SplitImage(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            入力画像から細分化された画像の配列を作成します。
         </summary>
         <param name="imageName">
            ロードするイメージファイル（ローカルまたはネットワーク）。
            ImageList イメージにすることもできます。
         </param>
         <param name="countX">
            X 方向のサブ画像の数。
         </param>
         <param name="countY">
            Y 方向のサブ画像の数。
         </param>
         <returns>
            結果のイメージの 2D 配列を ImageList に保存します。
         </returns>
      </member>
      <member name="M:LitDev.LDImage.NewImage(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ImageList に新しい 32bitARGB カラーイメージを作成します。
         </summary>
         <param name="width">新しい画像の幅。</param>
         <param name="height">新しい画像の高さ。</param>
         <param name="colour">新しいイメージの色。</param>
         <returns>成功した場合に作成された新しい ImageList イメージの名前。そうでない場合は ""。</returns>
      </member>
      <member name="M:LitDev.LDImage.GetImagePixels(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            イメージ内のすべてのピクセルで塗りつぶされた 2D 配列を取得します。
         </summary>
         <param name="image">ImageList イメージ。</param>
         <returns>[x] [y] でインデックスされた 16 進数ベースのイメージピクセルカラーの配列。</returns>
      </member>
      <member name="M:LitDev.LDImage.SetImagePixels(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ピクセルカラー値の 2 次元配列から新しいイメージを作成します。ピクセルのフォーマットについては、GetImagePixels を参照してください。
         </summary>
         <param name="pixels">[x] [y] でインデックスされた 16 進数ベースのイメージピクセルカラーの配列。</param>
         <returns>ピクセルから作成された ImageList イメージ。</returns>
      </member>
      <member name="M:LitDev.LDImage.OpenWorkingImage(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            高速ピクセルレベル操作のための一時的な作業イメージを開きます。
            一時的な作業イメージが終了したら、CloseWorkingImage を使用してイメージに設定する必要があります。
         </summary>
         <param name="image">ImageList イメージを一時的な作業イメージとして開きます。</param>
      </member>
      <member name="M:LitDev.LDImage.CloseWorkingImage(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            一時的な作業イメージからイメージを閉じてリセットします。
         </summary>
         <param name="image">OpenWorkingImage で以前に開かれた作業イメージ。</param>
      </member>
      <member name="M:LitDev.LDImage.GetWorkingImagePixel(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            一時的な作業イメージからピクセルの色を取得します。
         </summary>
         <param name="image">OpenWorkingImage で以前に開かれた作業イメージ。</param>
         <param name="x">x ピクセル座標（1 からインデックス付け）。</param>
         <param name="y">y ピクセルの座標（1 からのインデックス）。</param>
         <returns>ピクセルカラーまたは失敗時に "" 表示されます。</returns>
      </member>
      <member name="M:LitDev.LDImage.GetWorkingImagePixelARGB(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            一時的な作業イメージからピクセルの色を取得します。
         </summary>
         <param name="image">OpenWorkingImage で以前に開かれた作業イメージ。</param>
         <param name="x">x ピクセル座標（1 からインデックス付け）。</param>
         <param name="y">y ピクセルの座標（1 からのインデックス）。</param>
         <returns>ピクセルカラー、失敗時に "A"、"R"、"G"、"B" または "" でインデックス付けされた A、R、G、B コンポーネントの配列。</returns>
      </member>
      <member name="M:LitDev.LDImage.SetWorkingImagePixel(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            一時的な作業イメージ内のピクセルの色を設定します。
         </summary>
         <param name="image">OpenWorkingImage で以前に開かれた作業イメージ。</param>
         <param name="x">x ピクセル座標（1 からインデックス付け）。</param>
         <param name="y">y ピクセルの座標（1 からのインデックス）。</param>
         <param name="colour">ピクセルを設定する色。</param>
      </member>
      <member name="M:LitDev.LDImage.MetaData(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            イメージメタデータの配列を取得します。
         </summary>
         <param name="imageFile">画像ファイル（ImageList 画像ではありません）。</param>
         <returns>
            16 進数でインデックスされたメタデータ値の配列（16 進数の a から f までのインデックスには引用符を使用）
            ids の一覧については、https://msdn.microsoft.com/en-us/library/System.Drawing.Imaging.propertyitem.id%28v=vs.110%29.aspx を参照してください。
         </returns>
      </member>
      <member name="M:LitDev.LDImage.AddText(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在の GraphicsWindow フォントを使用して、画像にテキストで注釈を付ける。
         </summary>
         <param name="imageName">
            既存の ImageList イメージ。
         </param>
         <param name="text">追加するテキスト</param>
         <param name="x">テキストの左の位置。</param>
         <param name="y">テキストの先頭位置。</param>
         <param name="colour">
            テキストの色。
         </param>
      </member>
      <member name="M:LitDev.LDImage.NormalMap(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            通常のマップイメージに基づいてグレースケール（またはテクスチャが設定されている場合は修正されたイメージ）の影効果を表示するようにイメージを修正します。
         </summary>
         <param name="shapeName">
            画像形状法線マップ（R、G、B 色は 3D 画像の法線ベクトルを表す）。
            これは、法線マップイメージを含む Shapes.AddImage を使用して作成されたイメージ図形です。
         </param>
         <param name="sourceX">画像に対する光源の x 位置。</param>
         <param name="sourceY">画像に対する光源の y 位置。</param>
         <param name="sourceZ">
            画像に対する光源の z 位置。これは画像の高さです。
            これは影効果の有効コントラストを変更するのに使用できます。
         </param>
         <param name="texture">
            オプションの ImageList イメージ、またはテクスチャ（色）を変更する "" の場合は、通常のマップイメージと同じ寸法にする必要があります。
            その後の呼び出しでテクスチャ画像が変更されることがあります。
         </param>
         <param name="ambient">テクスチャが設定されている場合は、オプションの環境光強度（デフォルトは 0.3）。</param>
         <param name="intensity">テクスチャが設定されている場合は、オプションの光強度（デフォルトは 2）。</param>
      </member>
      <member name="M:LitDev.LDImage.HeightMap2NormalMap(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            高さマップから法線マップ画像を作成します。高さは各ピクセルの明るさによって与えられる。
         </summary>
         <param name="image">高さマップ ImageList イメージ。</param>
         <param name="scale">標高の縮尺係数（デフォルトは 1）。</param>
         <returns>結果の法線マップを持つ新しい ImageList イメージ。</returns>
      </member>
      <member name="M:LitDev.LDImage.MakeTransparent(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ImageList イメージを変更して、選択した色を透明にします。
         </summary>
         <param name="image">ImageList イメージ。</param>
         <param name="colour">透明にする色。</param>
      </member>
      <member name="M:LitDev.LDImage.ReplaceColour(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ImageList イメージのある色を別の色に置き換えます。
         </summary>
         <param name="image">ImageList イメージ。</param>
         <param name="colourFrom">置き換える色。</param>
         <param name="colourTo">適用する置換色。</param>
         <param name="tolerance">
            一致する色の許容差（デフォルトは 0  - 完全一致）。
            ARGB ピクセル値はすべて許容値内に置き換えられます。
         </param>
      </member>
      <member name="M:LitDev.LDImage.To32bitARGB(Microsoft.SmallBasic.Library.Primitive)">
         <summary>必要に応じて ImageList イメージをフォーマット ARGB（32 ビット / Pxl のアルファチャンネル）に変換します。</summary>
         <param name="image">ImageList イメージ。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="P:LitDev.LDImage.EffectDefaults">
         <summary>
            デフォルトのエフェクトパラメータの配列を取得または設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDImage.UseFastPixelMethods">
         <summary>
            高速ピクセル操作メソッドを使用します（デフォルトは "True"）。
            このメソッドは、このプロパティを使用してオフにすることができます。
         </summary>
      </member>
      <member name="T:LitDev.LDWeather">
         <summary>
            地元の気象条件を取得します。
         </summary>
      </member>
      <member name="M:LitDev.LDWeather.Forecast(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            場所の気象条件を取得します。
            現在の条件の詳細を取得するには、これを呼び出す必要があります。
         </summary>
         <param name="location">場所は、町 / 都市または郵便番号とすることができます。</param>
         <returns>4 日間の予測または "FAILED" を含む配列。</returns>
      </member>
      <member name="P:LitDev.LDWeather.Location">
         <summary>
            現在位置。
         </summary>
      </member>
      <member name="P:LitDev.LDWeather.Conditions">
         <summary>
            現在の状況。
         </summary>
      </member>
      <member name="P:LitDev.LDWeather.TempC">
         <summary>
            現在の温度（摂氏）。
         </summary>
      </member>
      <member name="P:LitDev.LDWeather.TempF">
         <summary>
            現在の温度（Farenheight）。
         </summary>
      </member>
      <member name="P:LitDev.LDWeather.Humidity">
         <summary>
            現在の湿度（％）
         </summary>
      </member>
      <member name="P:LitDev.LDWeather.WindDirection">
         <summary>
            現在の風向。
         </summary>
      </member>
      <member name="P:LitDev.LDWeather.WindSpeed">
         <summary>
            現在の風速（mph）。
         </summary>
      </member>
      <member name="F:LitDev.FormMatrix.components">
         <summary>
            必要なデザイナー変数。
         </summary>
      </member>
      <member name="M:LitDev.FormMatrix.Dispose(System.Boolean)">
         <summary>
            使用中のリソースをクリーンアップします。
         </summary>
         <param name="disposing">管理リソースを廃棄する必要がある場合は true、それ以外の場合は false。</param>
      </member>
      <member name="M:LitDev.FormMatrix.InitializeComponent">
         <summary>
            Designer サポートの必須メソッド - 変更しない
            コードエディタでこのメソッドの内容を返します。
         </summary>
      </member>
      <member name="T:LitDev.LDMatrix">
         <summary>
            線形方程式または他の方法を解くのに使用できる 2 次元行列構造。
            エラーが発生すると、"FAILED" という戻り値が返されます。
         </summary>
      </member>
      <member name="M:LitDev.LDMatrix.Create(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            行列オブジェクトを作成します。
            行と列の行列はそれぞれ rows = 1 または cols = 1 で定義できます。
         </summary>
         <param name="rows">行数。</param>
         <param name="cols">列の数。</param>
         <returns>行列または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDMatrix.Delete(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            既存の行列を削除します（一般的には必要ありませんが、多数の行列が作成される場合はメモリを節約できます）。
         </summary>
         <param name="matrix">
            行列名。
         </param>
         <returns>
            成功のためには "FAILED" または ""。
         </returns>
      </member>
      <member name="M:LitDev.LDMatrix.SetValue(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            行列の値を設定します。
         </summary>
         <param name="matrix">
            行列名。
         </param>
         <param name="row">
            値を追加する行（1 から始まるインデックス）。
         </param>
         <param name="col">
            値を追加する列です（1 からインデックスされます）。
         </param>
         <param name="value">
            値。
         </param>
         <returns>
            成功のためには "FAILED" または ""。
         </returns>
      </member>
      <member name="M:LitDev.LDMatrix.GetValue(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            マトリックスで価値を得る。
         </summary>
         <param name="matrix">
            行列名。
         </param>
         <param name="row">
            値を取得する行（1 から始まるインデックス）。
         </param>
         <param name="col">
            値を取得する列です（1 からインデックスされます）。
         </param>
         <returns>
            値または "FAILED"。
         </returns>
      </member>
      <member name="M:LitDev.LDMatrix.CopyNew(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            1 つの行列を新しい行列にコピーします。
         </summary>
         <param name="matrix">
            コピーする行列。
         </param>
         <returns>
            行列のコピーまたは "FAILED"。
         </returns>
      </member>
      <member name="M:LitDev.LDMatrix.Copy(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            1 つの行列を既存の行列にコピーします。
            2 つの行列の次元は同じでなければならない。
         </summary>
         <param name="matrix1">
            コピー元の行列。
         </param>
         <param name="matrix2">
            コピー先の行列。
         </param>
         <returns>
            成功のためには "FAILED" または ""。
         </returns>
      </member>
      <member name="M:LitDev.LDMatrix.Add(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2 つの行列を加算すると、与えられた 3 つの行列の行と列の数は同じでなければなりません。
            あるいは、第 2 の行列がスカラー数であれば、それは第 1 の行列の各要素に加えられる。
         </summary>
         <param name="matrix1">最初の行列。</param>
         <param name="matrix2">2 番目の行列（またはスカラー値）。</param>
         <param name="result">結果マトリックス。</param>
         <returns>
            成功のためには "FAILED" または ""。
         </returns>
      </member>
      <member name="M:LitDev.LDMatrix.Multiply(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2 つの行列を掛け合わせると、第 2 の行列の最初と最後の列の数は同じでなければなりません。
            結果行列の行と列の数は、2 番目の列の最初と最後の列でなければなりません。
            あるいは、第 2 の行列がスカラー数であれば、それは第 1 の行列の各要素と乗算され、第 1 と結果の次元は同じでなければならない。
         </summary>
         <param name="matrix1">最初の行列。</param>
         <param name="matrix2">2 番目の行列（またはスカラー値）。</param>
         <param name="result">結果マトリックス。</param>
         <returns>
            成功のためには "FAILED" または ""。
         </returns>
      </member>
      <member name="M:LitDev.LDMatrix.Inverse(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            （Gaussian Elimination を使用して）行列の逆行列を計算します。
            行列と逆行列の行と列の数は同じでなければなりません（正方行列）。
            特異行列は "SINGULAR" を返し、逆行列は正しくありません。
         </summary>
         <param name="matrix">反転する行列（反転されていない）。</param>
         <param name="inverse">逆行列。</param>
         <returns>
            成功のために "FAILED" または "SINGULAR" または ""
         </returns>
      </member>
      <member name="M:LitDev.LDMatrix.Transpose(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            行列の転置を計算します。
            行列と転置の行数と列数は逆にする必要があります（列 = 行かつその逆）。
         </summary>
         <param name="matrix">転置する行列。</param>
         <param name="transpose">結果の転置行列。</param>
         <returns>
            成功のためには "FAILED" または ""。
         </returns>
      </member>
      <member name="M:LitDev.LDMatrix.View(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            dubugging 目的のためのマトリックスを表示します。
         </summary>
         <param name="matrix">表示する行列。</param>
         <param name="modal">マトリックスディスプレイは、閉じられるまで他のすべての動作を一時停止します。（"True" または "False"）。</param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDMatrix.CopyToSBArray(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            LDMatrix 型を SmallBasic 配列型にコピーします。

            SmallBasic インデックスが必ずしも連続した整数ではないため、逆演算（SmallBasic から LDMatrix へ）は不可能です。
         </summary>
         <param name="matrix">
            行列名。
         </param>
         <returns>
            SmallBasic 配列または "FAILED"。
         </returns>
      </member>
      <member name="T:LitDev.LDMusic">
         <summary>
            Sound.PlayMusic メソッドを拡張して、さまざまな楽器音を含める。
            また、マルチチャンネル音楽を作成することもできます。
         </summary>
      </member>
      <member name="M:LitDev.LDMusic.PlayMusic(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            音符を演奏します。
         </summary>
         <param name="notes">
            演奏する音符のセット。形式は、QBasic でサポートされている音楽マークアップ言語のサブセットです。
         </param>
         <example>
            <code>
               LDMusic.Instrument = LDMusic.Xylophone
               LDMusic.PlayMusic("O5 C8 C8 G8 G8 A8 A8 G4 F8 F8 E8 E8 D8 D8 C2")
            </code>
         </example>
      </member>
      <member name="M:LitDev.LDMusic.PlayMusic2(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            特定の楽器や MDI チャンネルで音符を再生します。
            また、音量、パン（バランス）、ベロシティ（キー・ヒット・スピード）を設定します。
         </summary>
         <param name="notes">
            演奏する音符のセット。形式は、QBasic でサポートされている音楽マークアップ言語のサブセットです。
         </param>
         <param name="instrument">楽器番号。</param>
         <param name="velocity">キーのベロシティ（1 ～ 128、デフォルトは 100）。</param>
         <param name="volume">ボリューム（0 ～ 100、デフォルトは 50）。</param>
         <param name="pan">パンを左（-100）または右（100）（デフォルトは 0）。</param>
         <param name="channel">MIDI チャンネル（1 ～ 16）。</param>
      </member>
      <member name="M:LitDev.LDMusic.PlayNote(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            個々の音符を演奏します（マルチチャンネル楽器を許可します）。
         </summary>
         <param name="octave">オクターブ（0 ～ 8）。</param>
         <param name="note">メモ（"A"、"F#"、"B-" など）。</param>
         <param name="channel">MIDI チャンネル（1 ～ 16）。</param>
         <returns>再生されているノート値。</returns>
      </member>
      <member name="M:LitDev.LDMusic.EndNote(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            演奏中の音符を停止します。
         </summary>
         <param name="value">停止するノート（ノートが開始されたときに PlayNote が返す値）。</param>
      </member>
      <member name="M:LitDev.LDMusic.Reset">
         <summary>
            リセット（すべてのチャンネルのすべての音楽を停止）。
         </summary>
      </member>
      <member name="M:LitDev.LDMusic.InstrumentName(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            その番号から楽器名を入手してください。
         </summary>
         <param name="instrument">楽器番号。</param>
         <returns>
         </returns>
      </member>
      <member name="P:LitDev.LDMusic.Instrument">
         <summary>
            楽器を設定します（1 ～ 128）。
            1 Acoustic_Grand_Piano
            2 Bright_Acoustic_Piano
            3 Electric_Grand_Piano
            4 Honky_tonk_Piano
            5 Electric_Piano_1
            6 Electric_Piano_2
            7 ハープシコード
            8 クラビ
            9 セレスタ
            10 Glockenspiel
            11 Music_Box
            12 ビブラフォン
            13 マリンバ
            14 木琴
            15 チューブルベル
            16 ダルシマー
            17 Drawbar_Organ
            18 パーカッシブ _ オルガン
            19 Rock_Organ
            20 Church_Organ
            21 Reed_Organ
            22 アコーデオン
            23 ハーモニカ
            24 タンゴ _ アコーデオン
            25 Acoustic_Guitar_nylon
            26 Acoustic_Guitar_steel
            27 Electric_Guitar_jazz
            28 Electric_Guitar_clean
            29 Electric_Guitar_muted
            30 Overdriven_Guitar
            31 ディストーション _ ギター
            32 ギター _ ハーモニクス
            33 Acoustic_Bass
            34 Electric_Bass_finger
            35 Electric_Bass_pick
            36 フレットレスバス
            37 Slap_Bass_1
            38 Slap_Bass_2
            39 Synth_Bass_1
            40 Synth_Bass_2
            41 バイオリン
            42 ビオラ
            43 チェロ
            44 コントラバス
            45 トレモロ _ ストリングス
            46 Pizzicato_Strings
            47 オーケストラ _Harp
            48 ティンパニ
            49 String_Ensemble_1
            50 String_Ensemble_2
            51 SynthStrings_1
            52 SynthStrings_2
            53 Choir_Aahs
            54 Voice_Oohs
            55 Synth_Voice
            56 オーケストラ _ ヒット
            57 トランペット
            58 トロンボーン
            59 チューバ
            60 Muted_Trumpet
            61 French_Horn
            62 Brass_Section
            63 SynthBrass_1
            64 SynthBrass_2
            65 ソプラノサックス
            66 Alto_Sax
            67 Tenor_Sax
            68 Baritone_Sax
            69 オーボエ
            70 English_Horn
            71 バスーン
            72 クラリネット
            73 ピッコロ
            74 フルート
            75 レコーダー
            76 Pan_Flute
            77 Blown_Bottle
            78 尺八
            79 ホイッスル
            80 オカリナ
            81 Lead_1_square
            82 Lead_2_sawtooth
            83 Lead_3_calliope
            84 Lead_4_chiff
            85 Lead_5_charang
            86 Lead_6_voice
            87 Lead_7_fifths
            88 Lead_8_bass_lead
            89 Pad_1_new_age
            90 Pad_2_warm
            91 Pad_3_polysynth
            92 Pad_4_choir
            93 Pad_5_bowed
            94 Pad_6_metallic
            95 Pad_7_halo
            96 Pad_8_sweep
            97 FX_1_rain
            98 FX_2_soundtrack
            99 FX_3_crystal
            100 FX_4_atmosphere
            101 FX_5_ 輝度
            102 FX_6_goblins
            103 FX_7_echoes
            104 FX_8_sci_fi
            105 シタール
            106 バンジョー
            107 三味線
            108 琴
            109 カリンバ
            110 Bag_pipe
            111 フィドル
            112 シャナイ
            113 Tinkle_Bell
            114 アゴーゴ
            115 Steel_Drums
            116 木ブロック
            117 Taiko_Drum
            118 Melodic_Tom
            119 Synth_Drum
            120 Reverse_Cymbal
            121 Guitar_Fret_Noise
            122 ブレスノイズ
            123 海岸
            124 Bird_Tweet
            125 Telephone_Ring
            126 ヘリコプター
            127 拍手
            128 ガンショット
         </summary>
      </member>
      <member name="P:LitDev.LDMusic.Velocity">
         <summary>
            キーのベロシティ（1 ～ 128）を設定します。
            これは、キーが押された強さです（デフォルトは 100）。
         </summary>
      </member>
      <member name="P:LitDev.LDMusic.Channel">
         <summary>
            MIDI チャンネルを設定します（1 ～ 16、デフォルトは 1）。
            PlayMusic、楽器、ベロシティで使用されます。
         </summary>
      </member>
      <member name="T:LitDev.LDWebCam">
         <summary>
            ウェブカメラへのアクセスを提供します。
         </summary>
      </member>
      <member name="M:LitDev.LDWebCam.Start(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ウェブカメラ表示オブジェクトを開始します（SmallBasic 図形）。これを複数回呼び出すと、同じ Web カメラ画像の複数のコピーが生成されます。

            このオブジェクトは、標準の Shapes メソッドを使用して移動、回転、回転などができます。

            最大解像度は通常 640 x 480 ピクセルで、より高速になる場合があります。
         </summary>
         <param name="width">ウェブカメラ表示オブジェクトの幅。</param>
         <param name="height">ウェブカメラ表示オブジェクトの高さ。</param>
         <returns>ウェブカメラ表示オブジェクトの名前。</returns>
      </member>
      <member name="M:LitDev.LDWebCam.End">
         <summary>
            ウェブカメラの表示を終了し、ウェブカメラの形状を削除する前にこれを呼び出します。
         </summary>
      </member>
      <member name="M:LitDev.LDWebCam.Snapshot">
         <summary>
            スナップショットを作成し、SaveAs ダイアログで jpg として保存します。
         </summary>
      </member>
      <member name="M:LitDev.LDWebCam.SnapshotToFile(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            スナップショットを作成してファイルに保存します。
         </summary>
         <param name="fileName">jpg スナップショットを保存するファイル。</param>
      </member>
      <member name="M:LitDev.LDWebCam.SnapshotToImageList">
         <summary>
            スナップショットを作成し、ImageList（メモリがロードされたイメージ）に保存します。
         </summary>
         <returns>ロードされたイメージの名前を返します。</returns>
      </member>
      <member name="M:LitDev.LDWebCam.Pause">
         <summary>
            ウェブカメラの更新を一時停止します。
         </summary>
      </member>
      <member name="M:LitDev.LDWebCam.Resume">
         <summary>
            ウェブカメラの更新を再開します。
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.PreWin8Mode">
         <summary>
            Windows-8 以前の方法を使用します。
            "True" または "False"（デフォルト）。
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.Interval">
         <summary>
            ウェブカメラアップデートは、更新間隔を ms（デフォルトは 20）で最小限に抑えます。
            実際には多くの場合、特にエフェクトが設定されているほど大きくなります。
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.Effect">
         <summary>
            現在のエフェクト。
            エフェクトプロパティを使用して設定できます。
            （例：LDWebCam.Effect = LDWebCam.EffectGray）。
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectNone">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectRed">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectGreen">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectBlue">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectGray">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectInverse">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectYellow">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectCyan">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectMagenta">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectSnow">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectFuzzy">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectContrast">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectBlocks">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectReflect">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectJagged">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectRotate">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectPixelate">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectGamma">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectFishEye">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectBulge">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectSwirl">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectPosterise">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectHue">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectSaturation">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectLightness">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectOilPaint">
         <summary>
         </summary>
      </member>
      <member name="P:LitDev.LDWebCam.EffectParameter">
         <summary>
            エフェクトパラメータ - エフェクトのパラメータ値の LDImage エフェクトを参照してください。
         </summary>
      </member>
      <member name="T:LitDev.LDDebug">
         <summary>
            ユーティリティーのデバッグ。
         </summary>
      </member>
      <member name="M:LitDev.LDDebug.Start">
         <summary>
            デバッグセッションを開始します。通常、これをプログラムの最初の行として行います。

            通常は、実行（LDDebug.Break）またはブレークポイントの自動追加（LDDebug.Instrument）の前に、コード内に手動でブレークポイントを設定します。
         </summary>
      </member>
      <member name="M:LitDev.LDDebug.Instrument(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            各行にブレークポイントを自動的に追加した SmallBasic ファイル（_debug.sb）を作成します。

            新しい計測ファイルを開いて実行して、それをデバッグしてください。
            問題が見つかったら、オリジナルファイルと再インストゥルメントで修正して修正ファイルをデバッグします。
         </summary>
         <param name="fileName">インストルメントの Smallbasic ファイル（*.sb）。</param>
      </member>
      <member name="M:LitDev.LDDebug.Break(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            プログラムが一時停止し、変数値を表示できるブレークポイントを設定します。
         </summary>
         <param name="label">
            ブレークポイントの識別ラベル。
            定義されたブレークポイントごとに固有のラベルを選択する必要があります。
            イベントサブルーチン内にブレークポイントに関する既知の制限がいくつかあります。
         </param>
      </member>
      <member name="T:LitDev.LDDialogs">
         <summary>
            ダイアログとポップアップ。
         </summary>
      </member>
      <member name="M:LitDev.LDDialogs.SetStartupPosition(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ほとんどのダイアログの起動座標（左上）を設定します。これは、ダイアログが呼び出される前に設定する必要があります。
         </summary>
         <param name="x">X 座標。</param>
         <param name="y">X 座標。</param>
         <param name="mode">
            次のいずれかのモード
            0：オフ（デフォルト）
            1：座標は GraphicsWindow.MouseX / Y に相当するグラフィックスウィンドウに相対的です。
            2：座標は、Desktop.MouseX / Y に相当する表示ウィンドウを基準にしています。
         </param>
      </member>
      <member name="M:LitDev.LDDialogs.Wait(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            テキストメッセージで待機中のポップアップウィンドウを作成します。
         </summary>
         <param name="text">ポップアップウィンドウに表示するテキスト。</param>
         <param name="colour">ポップアップウィンドウの境界線の色は、デフォルトでは "" となります。</param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDDialogs.EndWait">
         <summary>
            待機中のポップアップウィンドウを閉じます。
         </summary>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDDialogs.ToolTip(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            一般的な図形やコントロールのツールチップポップアップを設定します。
         </summary>
         <param name="shapeName">形状またはコントロール。</param>
         <param name="tip">ツールチップのテキスト内容。</param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDDialogs.Calendar(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ポップアップカレンダーの日付選択 - 日付をダブルクリックするか、戻るを押して日付を選択します。
         </summary>
         <param name="start">コントロールの初期日付は、今日は "" となります。</param>
         <returns>選択した日付。</returns>
      </member>
      <member name="M:LitDev.LDDialogs.OpenFile(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ファイルダイアログを開く（既存のファイルを入手する）。
         </summary>
         <param name="extension">
            ファイルタイプ拡張子。"sb"。
            これは、"1=png;2=jpg;" のような拡張タイプの配列であってもよい。
            拡張子に "|" それは "Images|*.bmp;*.jpg;*.gif;*.png|All files (*.*)|*.*" のように直接使用されます。
         </param>
         <param name="folder">
            ダイアログを開くための最初のフォルダは "" とすることができます。
         </param>
         <returns>ファイルの絶対パス。</returns>
      </member>
      <member name="M:LitDev.LDDialogs.SaveFile(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            Save File Dialogue（新しいファイルを取得）。
         </summary>
         <param name="extension">
            ファイルタイプ拡張子。"sb"。
            これは、"1=png;2=jpg;" のような拡張タイプの配列であってもよい。
            拡張子に "|" それは "Images|*.bmp;*.jpg;*.gif;*.png|All files (*.*)|*.*" のように直接使用されます。
         </param>
         <param name="folder">
            ダイアログを開くための最初のフォルダは "" とすることができます。
         </param>
         <returns>ファイルの絶対パス。</returns>
      </member>
      <member name="M:LitDev.LDDialogs.GetFolder(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            フォルダ（ディレクトリ）を取得するためのダイアログ。
         </summary>
         <param name="InitialFolder">最初のフォルダ、または最後に選択したフォルダの ""</param>
         <returns>選択されたフォルダへのフルパス、または選択されていない場合は ""。</returns>
      </member>
      <member name="M:LitDev.LDDialogs.Font(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            フォントダイアログを使用してフォントを選択します。
         </summary>
         <param name="font">
            初期フォントが選択された配列。
            これは戻り配列と同じ書式を持ち、空の配列 "" にすることができます。
         </param>
         <returns>
            フォントプロパティを持つ配列。
            結果 [1] はフォント名
            結果 [2] はフォントサイズ
            result [3] は Font bold（"True" または "False"）です
            結果 [4] はフォントイタリック（"True" または "False"）。
         </returns>
      </member>
      <member name="M:LitDev.LDDialogs.Colour">
         <summary>
            ダイアログから色を選択します。
         </summary>
         <returns>
            選択した色。
         </returns>
      </member>
      <member name="M:LitDev.LDDialogs.AddRightClickMenu(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            GraphicsWindow の右クリックコンテキストメニューを追加します。
         </summary>
         <param name="items">コンテキストメニュー項目の選択テキストの配列。</param>
         <param name="images">
            オプションの画像アイコンの配列。いずれかまたはすべてが "" である可能性があります。
            ImageList.LoadImage またはローカルまたはネットワークイメージファイルの結果である可能性があります。
         </param>
      </member>
      <member name="M:LitDev.LDDialogs.Confirm(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            [ はい ]、[ いいえ ]、および [ キャンセル ] オプションを含むメッセージダイアログ。
         </summary>
         <param name="text">ダイアログのテキスト質問。</param>
         <param name="title">ダイアログのタイトル。</param>
         <returns>"Yes"（はい）、"No"（いいえ） または "Cancel"（キャンセル）</returns>
      </member>
      <member name="P:LitDev.LDDialogs.LastRightClickMenuItem">
         <summary>
            選択された最後の右クリックコンテキストメニュー項目のインデックス。
         </summary>
      </member>
      <member name="E:LitDev.LDDialogs.RightClickMenu">
         <summary>
            右クリックコンテキストメニュー項目が選択されたときのイベント。
         </summary>
      </member>
      <member name="F:LitDev.FormWait.components">
         <summary>
            必要なデザイナー変数。
         </summary>
      </member>
      <member name="M:LitDev.FormWait.Dispose(System.Boolean)">
         <summary>
            使用中のリソースをクリーンアップします。
         </summary>
         <param name="disposing">管理されたリソースを廃棄する必要がある場合は true、それ以外の場合は false。</param>
      </member>
      <member name="M:LitDev.FormWait.InitializeComponent">
         <summary>
            Designer サポートの必須メソッド - 変更しない
            コードエディタでこのメソッドの内容を返します。
         </summary>
      </member>
      <member name="T:LitDev.LDStatistics">
         <summary>
            データの 1 次元配列に関する統計を実行します。
         </summary>
      </member>
      <member name="M:LitDev.LDStatistics.SetArray(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            いくつかの統計を実行するために 1D の配列を設定します。

            このコマンドは、統計が計算される前に呼び出される必要があります。
         </summary>
         <param name="array">
            統計を実行する配列。
         </param>
         <returns>
            ソートされたデータの配列。
         </returns>
      </member>
      <member name="M:LitDev.LDStatistics.DistNormal(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            正規分布を持つ配列を作成します。
         </summary>
         <param name="distMean">分布の平均。</param>
         <param name="distSTD">分布の標準偏差。</param>
         <param name="size">ポイント数。</param>
         <returns>正規分布の 1 次元配列（Array[x] = y）。</returns>
      </member>
      <member name="M:LitDev.LDStatistics.DistBinomial(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            二項分布を持つ配列を作成します。

            これは、20（n）のコイントスから k 個の頭を得る可能性のようであり、各トスが 0.5（p）の頭を得る可能性が高い。
         </summary>
         <param name="n">試行回数</param>
         <param name="p">各試行の成功の確率。</param>
         <returns>二項分布の 1D 配列、k 個の成功確率の確率（Array[k] = y）。</returns>
      </member>
      <member name="M:LitDev.LDStatistics.DistUniform(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            Uniform 分布を持つ配列を作成します。
         </summary>
         <param name="rangeMin">最小値。</param>
         <param name="rangeMax">最大値。</param>
         <param name="size">ポイント数。</param>
         <returns>Uniform 分布の 1D 配列（Array[x] = y）。</returns>
      </member>
      <member name="M:LitDev.LDStatistics.DistTriangular(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            三角分布を持つ配列を作成します。
         </summary>
         <param name="rangeMin">最小値。</param>
         <param name="rangeMax">最大値。</param>
         <param name="size">ポイント数。</param>
         <returns>三角分布の 1 次元配列（Array[x] = y）。</returns>
      </member>
      <member name="M:LitDev.LDStatistics.Integrate(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            1D データ配列の積分を計算します。
         </summary>
         <param name="array">積分する配列（array[x] = y）。</param>
         <returns>入力配列の Integral の 1D 配列。</returns>
      </member>
      <member name="M:LitDev.LDStatistics.Differentiate(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            1D データ配列の導関数を計算します。
         </summary>
         <param name="array">差別化する配列（array[x] = y）。</param>
         <returns>入力配列の導関数の 1D 配列。</returns>
      </member>
      <member name="M:LitDev.LDStatistics.InterpolateY(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            1 次元データ配列を補間して y（x）の値を求める。

            x の値は単調増加するはずです。
         </summary>
         <param name="array">補間する配列（array[x] = y）。</param>
         <param name="x">x の値（x 値の配列でもよい）。</param>
         <returns>補間された値 y または y 値の配列。</returns>
      </member>
      <member name="M:LitDev.LDStatistics.InterpolateX(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            1D データ配列を補間して x（y）の値を求める。

            y の値は x で単調増加するはずです。
         </summary>
         <param name="array">補間する配列（array[x] = y）。</param>
         <param name="y">y の値（y 値の配列でもよい）。</param>
         <returns>補間された値 x または x 値の配列。</returns>
      </member>
      <member name="M:LitDev.LDStatistics.Frequency(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データの配列から度数分布を計算します。
         </summary>
         <param name="array">周波数分布を作成する配列。</param>
         <param name="bins">データにまたがるビンの数。</param>
         <param name="normalised">周波数を正規化して 1 に統合するか（"True" または "False"）。</param>
         <returns>周波数分布を配列として返します（array[bin] = frequency）。</returns>
      </member>
      <member name="P:LitDev.LDStatistics.Sum">
         <summary>
            データポイントの合計。
         </summary>
      </member>
      <member name="P:LitDev.LDStatistics.Sum2">
         <summary>
            データ点の二乗の和。
         </summary>
      </member>
      <member name="P:LitDev.LDStatistics.Count">
         <summary>
            データポイントの数。
         </summary>
      </member>
      <member name="P:LitDev.LDStatistics.Mean">
         <summary>
            データポイントの算術平均。
         </summary>
      </member>
      <member name="P:LitDev.LDStatistics.HarmonicMean">
         <summary>
            データ点の調和平均（すべての点 &gt; 0）。
         </summary>
      </member>
      <member name="P:LitDev.LDStatistics.GeometricMean">
         <summary>
            データ点の幾何平均（すべての点 &gt; 0）。
         </summary>
      </member>
      <member name="P:LitDev.LDStatistics.SDev">
         <summary>
            データポイントの標準偏差。
         </summary>
      </member>
      <member name="P:LitDev.LDStatistics.PDev">
         <summary>
            データポイントの母集団の偏差。
         </summary>
      </member>
      <member name="P:LitDev.LDStatistics.Median">
         <summary>
            データポイントの中央値。
         </summary>
      </member>
      <member name="P:LitDev.LDStatistics.Min">
         <summary>
            データポイントの最小値。
         </summary>
      </member>
      <member name="P:LitDev.LDStatistics.Max">
         <summary>
            データポイントの最大値。
         </summary>
      </member>
      <member name="P:LitDev.LDStatistics.Mode">
         <summary>
            データポイントのモード。
         </summary>
      </member>
      <member name="T:LitDev.LDSort">
         <summary>
            配列をソートする（文字列のソートは大文字と小文字を区別するか、または区別しない）。
         </summary>
      </member>
      <member name="M:LitDev.LDSort.ByIndex(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            任意の次元の配列をインデックス（キー）でソートします。
         </summary>
         <param name="array">
            並べ替える配列。
         </param>
         <returns>
            ソートされた配列。
         </returns>
      </member>
      <member name="M:LitDev.LDSort.ByValue(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            1D 配列を値でソートします（インデックスは 1 から再番号付けされます）。
         </summary>
         <param name="array">
            並べ替える配列。
         </param>
         <returns>
            ソートされた配列。
         </returns>
      </member>
      <member name="M:LitDev.LDSort.ByValueWithIndex(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            1D 配列を値でソートします（インデックスは変更されずにソートされます）。
         </summary>
         <param name="array">
            並べ替える配列。
         </param>
         <returns>
            ソートされた配列。
         </returns>
      </member>
      <member name="P:LitDev.LDSort.CaseSensitive">
         <summary>
            文字列の比較では、大文字と小文字が区別されます（"True" または "False"）。
         </summary>
      </member>
      <member name="T:LitDev.LDFile">
         <summary>
            ファイルユーティリティ。
         </summary>
      </member>
      <member name="M:LitDev.LDFile.ReadToArray(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ファイル内の各行に対して 1 つの要素を持つ配列にテキストファイルを読み込みます。

            ブランク行は、配列内の 1 つの空白スペースを持つ要素として含まれます。
         </summary>
         <param name="fileName">
            ファイルの絶対パス。
         </param>
         <returns>
            ファイル内の各行に 1 つの要素を持つ配列。
         </returns>
      </member>
      <member name="M:LitDev.LDFile.Length(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            テキストファイルの行数を取得します。
         </summary>
         <param name="fileName">
            ファイルの絶対パス。
         </param>
         <returns>
            ファイル内の行数（失敗時に -1）。
         </returns>
      </member>
      <member name="M:LitDev.LDFile.CreationTime(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ファイルの作成時間を取得します。
         </summary>
         <param name="fileName">
            ファイルの絶対パス。
         </param>
         <returns>
            ファイルまたはディレクトリの作成時刻（失敗時には ""）。
         </returns>
      </member>
      <member name="M:LitDev.LDFile.AccessTime(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ファイルが最後にアクセスされた時刻を取得します。
         </summary>
         <param name="fileName">
            ファイルの絶対パス。
         </param>
         <returns>
            ファイルまたはディレクトリの最後のアクセス時間（失敗時には ""）。
         </returns>
      </member>
      <member name="M:LitDev.LDFile.ModifiedTime(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ファイルが最後に変更された時刻を取得します。
         </summary>
         <param name="fileName">
            ファイルの絶対パス。
         </param>
         <returns>
            ファイルまたはディレクトリの最後の変更時刻（失敗時には ""）。
         </returns>
      </member>
      <member name="M:LitDev.LDFile.ReadCSV(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            CSV（カンマ区切り値）ファイルを配列に読み込みます。
            区切り文字は、LDUtilities.CSVDeliminator を使用してコンマから変更することができます。
         </summary>
         <param name="fileName">
            CSV ファイルのフルパス。
         </param>
         <returns>
            CSV ファイルをインポートした 2D 配列。
         </returns>
      </member>
      <member name="M:LitDev.LDFile.ReadCSVTransposed(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            CSV（カンマ区切り値）ファイルを配列に読み込みます。転置（行と列の入れ替え）。
            区切り文字は、LDUtilities.CSVDeliminator を使用してコンマから変更することができます。
         </summary>
         <param name="fileName">
            CSV ファイルのフルパス。
         </param>
         <returns>
            転置された CSV ファイルをインポートした 2D 配列。
         </returns>
      </member>
      <member name="M:LitDev.LDFile.WriteCSV(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2D 配列を CSV（カンマ区切り値）ファイルに書き込む。
            区切り文字は、LDUtilities.CSVDeliminator を使用してコンマから変更することができます。
         </summary>
         <param name="fileName">
            CSV ファイルのフルパス。
         </param>
         <param name="array">
            エクスポートする配列。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDFile.PrintFile(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ファイルを印刷します。
         </summary>
         <param name="fileName">印刷するファイルの絶対パス。</param>
      </member>
      <member name="M:LitDev.LDFile.GetFolder(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            完全なファイルパスのフォルダを取得します。
         </summary>
         <param name="fileName">ファイルの絶対パス。</param>
         <returns>ファイルパスのフォルダ部分。</returns>
      </member>
      <member name="M:LitDev.LDFile.GetFile(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            完全なファイルパスを取得します。
         </summary>
         <param name="fileName">ファイルの絶対パス。</param>
         <returns>ファイルパスのファイル名部分（フォルダまたは拡張子なし）。</returns>
      </member>
      <member name="M:LitDev.LDFile.GetExtension(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ファイルのファイル拡張子を取得します。
         </summary>
         <param name="fileName">拡張子の付いたファイル名（フォルダパスを含むかどうか）</param>
         <returns>ファイルの拡張子（'。' なし）または拡張子がない場合は ""。</returns>
      </member>
      <member name="M:LitDev.LDFile.ANSItoUTF8(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ANSI でエンコードされたテキストファイルを UTF8 に変換します。
            他のエンコーディングでも動作するはずです。
            UTF8 は、Small Basic で使用されるデフォルトのテキストファイルエンコーディングです。
         </summary>
         <param name="fileName">変換するファイルパス。</param>
         <param name="BOM">バイトオーダーマーク（BOM）を UTF8 ファイルに含めます（"True" または "False"、BOM は通常ありません）。</param>
         <returns>変換されたファイルパス（-UTF8.txt）または失敗（"encoding" が正しく検出されていない可能性があります）。</returns>
      </member>
      <member name="M:LitDev.LDFile.ReadANSI(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ANSI でエンコードされたテキストファイルを読み込みます。
            また、UTF8 を含む他のエンコーディングでも動作するはずです。
            UTF8 は、Small Basic で使用されるデフォルトのテキストファイルエンコーディングです。
         </summary>
         <param name="fileName">読み込むファイルパス。</param>
         <returns>ファイルの内容、または失敗の場合は ""（エンコーディングが正しく検出されていない可能性があります）。</returns>
      </member>
      <member name="M:LitDev.LDFile.ReadANSIToArray(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ファイル内の各行に対して 1 つの要素を持つ配列に、ANSI エンコーディングのテキストファイルを読み込みます。
            また、UTF8 を含む他のエンコーディングでも動作するはずです。
            ブランク行は、配列内の 1 つの空白スペースを持つ要素として含まれます。
         </summary>
         <param name="fileName">
            ファイルの絶対パス。
         </param>
         <returns>
            ファイル内の各行に対して 1 つの要素を持つ配列、または失敗の場合は ""（エンコーディングが正しく検出されていない可能性があります）。
         </returns>
      </member>
      <member name="M:LitDev.LDFile.Exists(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ファイルパスが既存のファイルまたはディレクトリであるかどうかを確認します。
         </summary>
         <param name="fileName">
            ファイルまたはディレクトリのフルパス。
         </param>
         <returns>"True" または "False"。</returns>
      </member>
      <member name="M:LitDev.LDFile.SaveAllVariables(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            すべての現在の変数をファイルに保存します。
            これはあなたのプログラムの完全な現在の状態です。
            ゲーム状態の保存やデバッグに便利です。
         </summary>
         <param name="fileName">
            変数とその値を格納する完全パス。
            このファイルは上書きされます。
         </param>
      </member>
      <member name="M:LitDev.LDFile.LoadAllVariables(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            SaveAllVariables を使用して以前に格納されたすべての変数の値を復元します。
         </summary>
         <param name="fileName">格納された変数値を持つファイルへのフルパス。</param>
      </member>
      <member name="M:LitDev.LDFile.Size(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            バイト単位のファイルのサイズを取得します。
         </summary>
         <param name="fileName">サイズを取得するファイルへのフルパス。</param>
         <returns>ファイル内のバイト数またはエラー時に -1。</returns>
      </member>
      <member name="M:LitDev.LDFile.RenameFile(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ファイルの名前を変更するか、ファイルを移動します。
         </summary>
         <param name="fileFrom">名前を変更するファイルへのフルパス。</param>
         <param name="fileTo">ファイルの新しい名前への完全パス。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDFile.RenameDirectory(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ディレクトリの名前を変更するか、移動します。
         </summary>
         <param name="directoryFrom">名前を変更するディレクトリへのフルパス。</param>
         <param name="directoryTo">ディレクトリの新しい名前への完全パス。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDFile.CopyDirectory(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ディレクトリとサブディレクトリを含むすべての内容を再帰的にコピーします。
         </summary>
         <param name="directoryFrom">コピー元のディレクトリへのフルパス。</param>
         <param name="directoryTo">コピー先のディレクトリへのフルパス。</param>
         <returns>"SUCCESS" または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDFile.GetAllDirectories(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ディレクトリ内のすべてのサブディレクトリを再帰的に取得します。
         </summary>
         <param name="path">ルートディレクトリへのフルパス。</param>
         <returns>すべてのサブディレクトリまたは "FAILED" の配列。</returns>
      </member>
      <member name="P:LitDev.LDFile.CSVplaceholder">
         <summary>
            CSV ファイルを読み込むときに、インポートされた配列に空の値の代わりに使用する文字。
            SmallBasic 配列は空の値、つまり "" を保持できません。

            デフォルトは空文字列 "" です（CSV ファイルの空の値に対して作成された配列エントリはありません）。
         </summary>
      </member>
      <member name="P:LitDev.LDFile.TempFolder">
         <summary>
            Temp フォルダのパスを取得します。
         </summary>
      </member>
      <member name="P:LitDev.LDFile.UserName">
         <summary>
            現在のユーザー名を取得します。
         </summary>
      </member>
      <member name="P:LitDev.LDFile.AppDataFolder">
         <summary>
            ApplicationData フォルダパスを取得します。
         </summary>
      </member>
      <member name="P:LitDev.LDFile.PublicFolder">
         <summary>
            パブリックフォルダーパスを取得します。
         </summary>
      </member>
      <member name="P:LitDev.LDFile.DocumentsFolder">
         <summary>
            ドキュメントフォルダのパスを取得します。
         </summary>
      </member>
      <member name="P:LitDev.LDFile.MusicFolder">
         <summary>
            ミュージックフォルダのパスを取得します。
         </summary>
      </member>
      <member name="P:LitDev.LDFile.PicturesFolder">
         <summary>
            ピクチャのフォルダパスを取得します。
         </summary>
      </member>
      <member name="T:LitDev.LDDateTime">
         <summary>
            時間と日付の変換。

            日付形式は "25/01/2012 22:18:52" です。時間部分はオプションです。
            日付部分はロケールに依存します（例：米国では "01/25/2012 22:18:52" となります。

            OADate は、1899 年 12 月 30 日以降の日数（および部分日数）で、日付の加算または減算が可能です。
         </summary>
      </member>
      <member name="M:LitDev.LDDateTime.Now">
         <summary>
            現在の日付と時刻。
         </summary>
         <returns>
            現在の日付と時刻。

            形式は "25/01/2012 22:18:52" です。時間部分はオプションです。
            日付部分はロケールに依存します（例：米国では "01/25/2012 22:18:52" となります。
         </returns>
      </member>
      <member name="M:LitDev.LDDateTime.NowOADate">
         <summary>
            現在の OADate。
         </summary>
         <returns>
            1899 年 12 月 30 日以降の日数（および一部日数）（OADate）。
         </returns>
      </member>
      <member name="M:LitDev.LDDateTime.Add(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            入力日付からの日付とオフセットを日数で計算します。
         </summary>
         <param name="date">入力日付。</param>
         <param name="offset">日数でのオフセット。</param>
         <returns>
            入力日付 + オフセットに相当する日付。

            形式は "25/01/2012 22:18:52" です。時間部分はオプションです。
            日付部分はロケールに依存します（例：米国では "01/25/2012 22:18:52" となります。
         </returns>
      </member>
      <member name="M:LitDev.LDDateTime.Subtract(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2 つの日付間の日数を計算します。
         </summary>
         <param name="date1">入力された日付 1。</param>
         <param name="date2">入力 date2。</param>
         <returns>
            日付間の日数（および日数）（date1-date2）。
         </returns>
      </member>
      <member name="M:LitDev.LDDateTime.ToOADate(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            日付文字列を OADate に変換します。
         </summary>
         <param name="date">
            変換する日付文字列。

            形式は "25/01/2012 22:18:52" です。時間部分はオプションです。
            日付部分はロケールに依存します（例：米国では "01/25/2012 22:18:52" となります。
         </param>
         <returns>
            1899 年 12 月 30 日以降の日数（および一部日数）（OADate）。
         </returns>
      </member>
      <member name="M:LitDev.LDDateTime.FromOADate(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            OADate を日付文字列に変換します。
         </summary>
         <param name="OAdate">
            変換する OADate。

            1899 年 12 月 30 日以降の日数（OADate）。
         </param>
         <returns>
            日付文字列。

            形式は "25/01/2012 22:18:52" です。時間部分はオプションです。
            日付部分はロケールに依存します（例：米国では "01/25/2012 22:18:52" となります。
         </returns>
      </member>
      <member name="M:LitDev.LDDateTime.OADate(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            日付と時刻の値から OADate を作成します。
         </summary>
         <param name="year">
            年。
         </param>
         <param name="month">
            月。
         </param>
         <param name="day">
            その日。
         </param>
         <param name="hour">
            時間。
         </param>
         <param name="minute">
            分。
         </param>
         <param name="second">
            二番目。
         </param>
         <returns>
            1899 年 12 月 30 日以降の日数（および一部日数）（OADate）。
         </returns>
      </member>
      <member name="M:LitDev.LDDateTime.GetYear(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            OADate から 1 年を得る。
         </summary>
         <param name="OAdate">
            OADate。

            1899 年 12 月 30 日以降の日数（OADate）。
         </param>
         <returns>
            年。
         </returns>
      </member>
      <member name="M:LitDev.LDDateTime.GetMonth(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            OADate から月を得る。
         </summary>
         <param name="OAdate">
            OADate。

            1899 年 12 月 30 日以降の日数（OADate）。
         </param>
         <returns>
            月。
         </returns>
      </member>
      <member name="M:LitDev.LDDateTime.GetDay(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            OADate から 1 日を取得します。
         </summary>
         <param name="OAdate">
            OADate。

            1899 年 12 月 30 日以降の日数（OADate）。
         </param>
         <returns>
            月。
         </returns>
      </member>
      <member name="M:LitDev.LDDateTime.GetHour(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            OADate から時間を得る。
         </summary>
         <param name="OAdate">
            OADate。

            1899 年 12 月 30 日以降の日数（OADate）。
         </param>
         <returns>
            時間。
         </returns>
      </member>
      <member name="M:LitDev.LDDateTime.GetMinute(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            OADate から分を得る。
         </summary>
         <param name="OAdate">
            OADate。

            1899 年 12 月 30 日以降の日数（OADate）。
         </param>
         <returns>
            分。
         </returns>
      </member>
      <member name="M:LitDev.LDDateTime.GetSecond(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            OADate から 2 番目を取得します。
         </summary>
         <param name="OAdate">
            OADate。

            1899 年 12 月 30 日以降の日数（OADate）。
         </param>
         <returns>
            二番目。
         </returns>
      </member>
      <member name="M:LitDev.LDDateTime.GetDayName(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            OADate から曜日を取得します。
         </summary>
         <param name="OAdate">
            OADate。

            1899 年 12 月 30 日以降の日数（OADate）。
         </param>
         <returns>
            昼の名前。
         </returns>
      </member>
      <member name="M:LitDev.LDDateTime.GetMonthName(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            OADate から月の名前を取得します。
         </summary>
         <param name="OAdate">
            OADate。

            1899 年 12 月 30 日以降の日数（OADate）。
         </param>
         <returns>
            月の名前。
         </returns>
      </member>
      <member name="T:LitDev.LDUtilities">
         <summary>
            一般
         </summary>
      </member>
      <member name="M:LitDev.LDUtilities.Version">
         <summary>
            拡張機能の現在のバージョンを取得し、この情報と変更履歴を含むウィンドウを表示します。
         </summary>
         <returns>
            現在のバージョン。
         </returns>
      </member>
      <member name="M:LitDev.LDUtilities.KeyDown(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            キーがダウンしている場合に取得します。
            簡略化されたキーボードゲームコントロールに役立ちます。
         </summary>
         <param name="key">州を倒すための鍵、例えば "Space"（スペース）。</param>
         <returns>キーダウン状態（"True" または "False"）</returns>
      </member>
      <member name="M:LitDev.LDUtilities.FontList">
         <summary>
            使用可能なフォント名の配列を取得します。
         </summary>
         <returns>フォント名の配列。</returns>
      </member>
      <member name="M:LitDev.LDUtilities.ColourList">
         <summary>
            使用可能な色の名前の配列を取得します。
         </summary>
         <returns>色の名前の配列。</returns>
      </member>
      <member name="M:LitDev.LDUtilities.IsNumber(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            入力が SmallBasic によって数値として扱われるかどうかをテストします。
            これはカルチャ不変の番号です（例："3.14" ではなく、"3,14" または "24x" です。
         </summary>
         <param name="input">テストする入力。</param>
         <returns>"True" または "False"</returns>
      </member>
      <member name="M:LitDev.LDUtilities.GetCurrentCultureNumber(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在の文化で表現された数字を取得します。
            数値は計算で数値として扱うためにはカルチャ不変でなければなりません。
            現在のカルチャー番号は、入力または出力方法です。
            例えば、"3.14" は文化不変であり、"3,14" はフランス文化です。
         </summary>
         <param name="input">文化不変数。</param>
         <returns>現在のカルチャーで表現された数字または失敗したときの入力。</returns>
      </member>
      <member name="M:LitDev.LDUtilities.GetCultureInvariantNumber(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            文化不変式で表現された数を取得します。
            数値は計算で数値として扱うためにはカルチャ不変でなければなりません。
            現在のカルチャー番号は、入力または出力方法です。
            例えば、"3.14" は文化不変であり、"3,14" はフランス文化です。
         </summary>
         <param name="input">現在の文化で表現されている数字。</param>
         <returns>文化不変の形式で表現された数または失敗時の入力数。</returns>
      </member>
      <member name="M:LitDev.LDUtilities.CleanTemp">
         <summary>
            すべての Small Basic 関連ファイルを temp フォルダから削除します。
            これらは拡張子 tmp、pdb、dll のファイルです。
            他のアプリケーションもこれらを使用する可能性があるので、他のアプリケーションを実行していない状態で使用することをおすすめします。
         </summary>
         <returns>削除されたファイルの数。</returns>
      </member>
      <member name="M:LitDev.LDUtilities.GetNextMapIndex(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            オブジェクト名の次の整数を取得します。
            たとえば、ボタンには "Button1"、"Button2" などのラベルが付けられます。
            このメソッドは、次に追加されるオブジェクトに使用される整数インデックスを返します。
         </summary>
         <param name="listName">
            マップ（リスト）タイプ、有効な listNames（大文字と小文字を区別する）は次のとおりです。
            "Button"（ボタン）
            "TextBox"（テキストボックス）
            "ImageList"（イメージリスト）
            "Ellipse"（楕円）
            "Image"（画像）
            "Line"（ライン）
            "Rectangle"（矩形）
            "Text"（テキスト）
            "Triangle"（三角形）
            "Polygon"（ポリゴン）
            "Control"（コントロール）
         </param>
         <returns>使用される次のオブジェクトインデックス（失敗時に 0）。</returns>
      </member>
      <member name="M:LitDev.LDUtilities.FixFlickr">
         <summary>
            Flickr オブジェクトを修正する（バージョン 1.0）。
         </summary>
      </member>
      <member name="P:LitDev.LDUtilities.ShowPrintPreview">
         <summary>
            LDGraphicsWindow.Print および LDTextWindow.Print（"True" または "False"）で印刷するときに印刷プレビューウィンドウを表示する
            デフォルト "True"
         </summary>
      </member>
      <member name="P:LitDev.LDUtilities.ShowErrors">
         <summary>
            検出されたエラーを TextWindow に報告する "True"（デフォルト）または "False"
         </summary>
      </member>
      <member name="P:LitDev.LDUtilities.ShowFileErrors">
         <summary>
            検出されなかったファイルを TextWindow に報告する "True"（デフォルト）または "False"
         </summary>
      </member>
      <member name="P:LitDev.LDUtilities.ShowNoShapeErrors">
         <summary>
            メソッド "True"（デフォルト）または "False" に見つかりませんでした
         </summary>
      </member>
      <member name="P:LitDev.LDUtilities.CSVDeliminator">
         <summary>
            CSV ファイルの読み書き用の 1 文字の区切り文字
            デフォルト ","
         </summary>
      </member>
      <member name="P:LitDev.LDUtilities.NetworkURL">
         <summary>
            gamedata と highscore メソッドが別のサーバで処理される場合は、LDNetwork で使用する Web アドレスを設定します。
         </summary>
      </member>
      <member name="P:LitDev.LDUtilities.DPIX">
         <summary>
            ディスプレイデバイスの X DPI（dots per inch）解像度を取得します。
         </summary>
      </member>
      <member name="P:LitDev.LDUtilities.DPIY">
         <summary>
            ディスプレイデバイス Y の DPI（dots per inch）解像度を取得します。
         </summary>
      </member>
      <member name="P:LitDev.LDUtilities.CurrentCulture">
         <summary>
            現在のカルチャーを取得または設定する。
         </summary>
      </member>
      <member name="P:LitDev.LDUtilities.UseExpression">
         <summary>
            SmallBasicLibrary オブジェクトとのやり取りの速度を上げるための実験的なオプション。
            "True"（デフォルト）または "False"
         </summary>
      </member>
      <member name="P:LitDev.LDUtilities.UseDispatcher">
         <summary>
            SmallBasicLibrary オブジェクトとのやり取りの速度を上げるための実験的なオプション。
            "True"（デフォルト）または "False"
         </summary>
      </member>
      <member name="P:LitDev.LDUtilities.ForceInvoke">
         <summary>
            SmallBasicLibrary オブジェクトとのやり取りの速度を上げるための実験的なオプション。
            0 強制なし（デフォルト）、1 強制起動（シリアル）、2 強制 BeginInvoke（非同期）
         </summary>
      </member>
      <member name="P:LitDev.LDUtilities.Priority">
         <summary>
            ディスパッチャの SmallBasicLibrary オブジェクトとのやり取りの速度を上げるための実験的なオプション。
            1 ～ 10（デフォルトは 7、Render）
         </summary>
      </member>
      <member name="T:LitDev.LDCursors">
         <summary>
            GraphicsWindow カーソルを設定します。
         </summary>
      </member>
      <member name="M:LitDev.LDCursors.CreateCursor(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            SetUserCursor または SetShapeCursor を使用して設定できるカーソルを作成します。
            ImageList イメージのサイズは、LDImage.Resize で変更できます。
         </summary>
         <param name="imageName">ファイルパスまたは ImageList イメージ。</param>
         <param name="xHotSpot">ホットスポットとして使用する x ピクセル。</param>
         <param name="yHotSpot">ホットスポットとして使用する y ピクセル。</param>
         <returns>カーソル。</returns>
      </member>
      <member name="M:LitDev.LDCursors.SetUserCursor(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            グラフィックスウィンドウでカスタムカーソルをポインタとして設定します。
         </summary>
         <param name="cursor">
            CreateCursor またはで作成されたカーソル
            このオブジェクト内の標準カーソル（例えば、"ArrowCD"）、または
            カーソルとして使用する *.cur ファイルまたは *.ani ファイルへのフルパス。
         </param>
      </member>
      <member name="M:LitDev.LDCursors.SetShapeCursor(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            マウスが図形上にあるときに図形またはコントロールのカーソルを設定します。
         </summary>
         <param name="shapeName">形状または制御名。</param>
         <param name="cursor">
            CreateCursor またはで作成されたカーソル
            このオブジェクト内の標準カーソル（例えば、"ArrowCD"）、または
            カーソルとして使用する *.cur ファイルまたは *.ani ファイルへのフルパス。
         </param>
      </member>
      <member name="M:LitDev.LDCursors.None">
         <summary>
            カーソルなし。
         </summary>
      </member>
      <member name="M:LitDev.LDCursors.Arrow">
         <summary>
            矢印カーソル（デフォルト）。
         </summary>
      </member>
      <member name="M:LitDev.LDCursors.Cross">
         <summary>
            クロスカーソル。
         </summary>
      </member>
      <member name="M:LitDev.LDCursors.Hand">
         <summary>
            ハンドカーソル。
         </summary>
      </member>
      <member name="M:LitDev.LDCursors.Help">
         <summary>
            ヘルプカーソル。
         </summary>
      </member>
      <member name="M:LitDev.LDCursors.IBeam">
         <summary>
            IBeam カーソル。
         </summary>
      </member>
      <member name="M:LitDev.LDCursors.Wait">
         <summary>
            カーソルを待つ。
         </summary>
      </member>
      <member name="M:LitDev.LDCursors.Pen">
         <summary>
            ペンカーソル。
         </summary>
      </member>
      <member name="M:LitDev.LDCursors.Invalid">
         <summary>
            カーソルが無効です。
         </summary>
      </member>
      <member name="M:LitDev.LDCursors.Starting">
         <summary>
            カーソルの開始。
         </summary>
      </member>
      <member name="M:LitDev.LDCursors.Scroll">
         <summary>
            スクロールカーソル。
         </summary>
      </member>
      <member name="M:LitDev.LDCursors.ArrowCD">
         <summary>CD カーソル付きの矢印。</summary>
      </member>
      <member name="M:LitDev.LDCursors.UpArrow">
         <summary>上矢印カーソル（挿入）。</summary>
      </member>
      <member name="M:LitDev.LDCursors.SizeAll">
         <summary>すべてのカーソルのサイズ（サイズ変更）。</summary>
      </member>
      <member name="M:LitDev.LDCursors.SizeNESW">
         <summary>NESW DoubleArrow カーソル（サイズ変更）。</summary>
      </member>
      <member name="M:LitDev.LDCursors.SizeNWSE">
         <summary>NWSE DoubleArrow カーソル（サイズ変更）。</summary>
      </member>
      <member name="M:LitDev.LDCursors.SizeNS">
         <summary>NS DoubleArrow（サイズ変更）。</summary>
      </member>
      <member name="M:LitDev.LDCursors.SizeWE">
         <summary>WE DoubleArrow（サイズ変更）。</summary>
      </member>
      <member name="T:LitDev.LDGraph">
         <summary>
            グラフ作成ユーティリティ。
         </summary>
      </member>
      <member name="M:LitDev.LDGraph.AddGraph(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            グラフを作成します。
         </summary>
         <param name="xpos">
            グラフは左の位置にあります。
         </param>
         <param name="ypos">
            グラフの右の位置。
         </param>
         <param name="width">
            グラフの幅。
         </param>
         <param name="height">
            グラフの高さ。
         </param>
         <param name="title">
            グラフのタイトル。
         </param>
         <param name="labelX">
            X 軸ラベル。
         </param>
         <param name="labelY">
            Y 軸ラベル。
         </param>
         <returns>
            グラフ名。
         </returns>
      </member>
      <member name="M:LitDev.LDGraph.AddSeriesLine(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            既存のグラフに新しいデータ系列を折れ線グラフとして追加します。
         </summary>
         <param name="graphName">
            グラフ名。
         </param>
         <param name="seriesLabel">
            シリーズラベル。
            このラベルのシリーズがすでに存在する場合は、このシリーズに置き換えられます。
         </param>
         <param name="data">
            X 座標データと Y 座標データを保持する配列。

            例えば、点（0,1）と（2,3）を持つ線は、
            data[0] = 1
            data[2] = 3

            より一般的には、data[x] = y。
         </param>
         <param name="colour">
            シリーズデータの色。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDGraph.AddSeriesHistogram(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            既存のグラフに新しいデータ系列をヒストグラムとして追加します。
         </summary>
         <param name="graphName">
            グラフ名。
         </param>
         <param name="seriesLabel">
            シリーズラベル。
            このラベルのシリーズがすでに存在する場合は、このシリーズに置き換えられます。
         </param>
         <param name="data">
            X 座標データと Y 座標データを保持する配列。

            例えば、点（0,1）と（2,3）を持つ線は、
            data[0] = 1
            data[2] = 3

            より一般的には、data[x] = y。
         </param>
         <param name="colour">
            シリーズデータの色。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDGraph.AddSeriesPoints(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            既存のグラフに新しいデータ系列を点として追加します。
         </summary>
         <param name="graphName">
            グラフ名。
         </param>
         <param name="seriesLabel">
            シリーズラベル。
            このラベルのシリーズがすでに存在する場合は、このシリーズに置き換えられます。
         </param>
         <param name="data">
            X 座標データと Y 座標データを保持する配列。

            例えば、点（0,1）と（2,3）を持つ線は、
            data[0] = 1
            data[2] = 3

            より一般的には、data[x] = y。
         </param>
         <param name="colour">
            シリーズデータの色。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDGraph.DeleteSeries(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            既存のグラフ上の既存の系列を削除する。
         </summary>
         <param name="graphName">
            グラフ名。
         </param>
         <param name="seriesLabel">
            削除する系列ラベル名。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDGraph.StopEvents">
         <summary>
            すべてのグラフの左クリックマウスイベントを停止します。
         </summary>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDGraph.RestartEvents">
         <summary>
            すべてのグラフの左クリックマウスイベントを再開します。
         </summary>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDGraph.ExportCSV(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データシリーズを直接 CSV ファイルにエクスポートします（グラフなし）。
         </summary>
         <param name="data">
            X 座標データと Y 座標データを保持する配列。
         </param>
         <param name="fileName">
            CSV 出力ファイル名。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDGraph.ScaleAxisX(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            X 軸スケーリングを設定します。
            これは自動メソッドをオーバーライドします。
         </summary>
         <param name="graphName">グラフ名。</param>
         <param name="min">X 軸の最小値。</param>
         <param name="interval">
            グリッド間隔の間隔。
            この値が 0 の場合、間隔がデータから計算されます。
         </param>
         <param name="max">
            X 軸の最大値。
            この値が min に等しい場合、データから最大値が計算されます。
            この値が min より小さい場合、最小値と最大値の両方がデータから計算されます。
         </param>
      </member>
      <member name="M:LitDev.LDGraph.ScaleAxisY(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            Y 軸スケーリングを設定します。
            これは自動メソッドをオーバーライドします。
         </summary>
         <param name="graphName">グラフ名。</param>
         <param name="min">Y 軸の最小値。</param>
         <param name="interval">
            グリッド間隔の間隔。
            この値が 0 の場合、間隔がデータから計算されます。
         </param>
         <param name="max">
            Y 軸の最大値。
            この値が min に等しい場合、データから最大値が計算されます。
            この値が min より小さい場合、最小値と最大値の両方がデータから計算されます。
         </param>
      </member>
      <member name="M:LitDev.LDGraph.Help">
         <summary>
            この機能はこのヘルプを表示するためのものです。

            データのグラフは、線、点またはヒストグラムとしてプロットすることができます。

            各一連のデータは、（ユニークな）X 値を返す配列インデックスと Y 値を表す配列値を持つ SmallBasic 配列です。

            例えば：
            data[1] = 5
            data[2] = 8
            data[3] = 3

            最初に AddGraph でグラフオブジェクトを作成し、AddSeriesLine、AddSeriesHistogram または AddSeriesPoints でシリーズを追加します。

            グラフを作成してプロットすると、ハンドカーソルが表示されている場所で軸をつかんでスクロールできます。凡例は移動することもできます。

            マウスの左ボタンを使用してズームする領域を選択するか、マウスホイールを使用して表示をズームすることで、グラフを再スケーリングすることができます。ダブルクリックするとスケーリングが元のデフォルトにリセットされます。

            右クリックすると、画像またはデータのエクスポート、カーソル座標の表示、凡例の非表示などの他の機能を持つメニューが表示されます。

            最後に、この方法のための様々なパルメータが、プロットの色および挙動をさらに制御する。
         </summary>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDGraph.CreateTrend(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            データからトレンドを作成します。
         </summary>
         <param name="data">
            X 座標データと Y 座標データを保持する配列。

            例えば、点（0,1）と（2,3）を持つ線は、
            data[0] = 1
            data[2] = 3

            より一般的には、data[x] = y。
         </param>
         <param name="order">
            トレンドラインの多項式次数。
            1 は線形です。
            2 は 2 次です。
         </param>
         <returns>プロットされる傾向を保持するデータ配列。</returns>
      </member>
      <member name="M:LitDev.LDGraph.TrendCoef">
         <summary>
            CreateTrend を使用して最後に計算されたトレンドの多項式トレンドライン係数を取得します。
         </summary>
         <returns>
            トレンドラインの多項式係数の配列 'coef'。
            配列内の係数の数は、トレンドを作成するために使用された順序（order + 1）よりも 1 つ大きく、0 からインデックスされます。
            y = coef[0] + coef[1]x + coef[2]x^2 ...
         </returns>
      </member>
      <member name="P:LitDev.LDGraph.BorderColour">
         <summary>
            境界線の色。
         </summary>
      </member>
      <member name="P:LitDev.LDGraph.InteriorColour">
         <summary>
            インテリアカラー。
         </summary>
      </member>
      <member name="P:LitDev.LDGraph.TextColour">
         <summary>
            テキストの色。
         </summary>
      </member>
      <member name="P:LitDev.LDGraph.AxesColour">
         <summary>
            境界軸と目盛りの色。
         </summary>
      </member>
      <member name="P:LitDev.LDGraph.GridColour">
         <summary>
            内部スケールグリッド線の色。
         </summary>
      </member>
      <member name="P:LitDev.LDGraph.GridLinesX">
         <summary>
            X 軸目盛りとグリッド線の数（デフォルトは 10）
         </summary>
      </member>
      <member name="P:LitDev.LDGraph.GridLinesY">
         <summary>
            Y 軸目盛りとグリッド線の数（デフォルトは 10）
         </summary>
      </member>
      <member name="P:LitDev.LDGraph.AutoScale">
         <summary>
            自動スケール軸は "True"（デフォルト）または "False" です。
            "False" に設定すると、初期バージョンのスケーリングが使用されます。
         </summary>
      </member>
      <member name="P:LitDev.LDGraph.AxesResolution">
         <summary>
            軸（最小値と最大値）の有効数字（デフォルトは 2）。
         </summary>
      </member>
      <member name="P:LitDev.LDGraph.TrendPointCount">
         <summary>
            CreateTrend を使用してトレンドライン用に作成されたポイントの数を設定または取得します。
            デフォルトは 50 です。
         </summary>
      </member>
      <member name="T:LitDev.LDEvents">
         <summary>
            追加イベント。
         </summary>
      </member>
      <member name="P:LitDev.LDEvents.LastMouseWheelDelta">
         <summary>
            最後のマウスホイール Delta（回転方向）。
         </summary>
      </member>
      <member name="P:LitDev.LDEvents.FilePath">
         <summary>
            FileSystem ファイル変更イベントを監視するルートパス（デフォルトは "C:"）。
         </summary>
      </member>
      <member name="P:LitDev.LDEvents.FileFilter">
         <summary>
            FileSystem ファイル変更イベントのファイルフィルタ（デフォルトは "*.*"）。
         </summary>
      </member>
      <member name="P:LitDev.LDEvents.LastFileChanged">
         <summary>
            最後のファイルへのフルパスが変更されました。
         </summary>
      </member>
      <member name="P:LitDev.LDEvents.LastFileChangeType">
         <summary>
            最後のファイル変更タイプ、"Created"（作成済み）、"Changed"（変更済み） または "Deleted"（削除済み）。
         </summary>
      </member>
      <member name="P:LitDev.LDEvents.LastError">
         <summary>
            最後のエラーメッセージ。
         </summary>
      </member>
      <member name="E:LitDev.LDEvents.MouseWheel">
         <summary>
            マウスホイールが回転したときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDEvents.MouseDoubleClick">
         <summary>
            マウスをダブルクリックしたときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDEvents.Resized">
         <summary>
            GraphicsWindow のサイズが変更されたときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDEvents.FileChange">
         <summary>
            ファイルが作成、変更、または削除されたときのイベント。

            このイベントを登録する前に FilePath と FileFilter を設定する必要があります。
         </summary>
      </member>
      <member name="E:LitDev.LDEvents.Error">
         <summary>
            LitDev 拡張エラーが発生したときのイベント。
            これは、TextWindow の警告に加えて、LDUtilties.ShowErrors、LDUtilties.ShowFileErrors、および LDUtilties.ShowNoShapeErrors を使用して無効にすることができます。
         </summary>
      </member>
      <member name="T:LitDev.LDPhysics">
         <summary>
            Box2D エンジンを使った物理拡張。
         </summary>
      </member>
      <member name="M:LitDev.LDPhysics.AddChain(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            既存の 2 つの図形の間にチェーンを追加します。
         </summary>
         <param name="shape1">
            最初の形。
         </param>
         <param name="shape2">
            第 2 の形。
         </param>
         <returns>
            チェーン名。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.AddFixedAnchor(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            固定されたアンカーポイントとして使用するための新しい小さくて透明な図形を追加します。
         </summary>
         <param name="posX">
            アンカーの X 座標。
         </param>
         <param name="posY">
            アンカーの Y 座標。
         </param>
         <returns>
            アンカーの形名。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.AddFixedShape(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            フィジカルエンジンに既存の SmallBasic 図形を追加します。フィーチャに影響を与える摩擦や反発を伴う固定（非動的）図形として追加します。
         </summary>
         <param name="shapeName">
            形状の名前。
         </param>
         <param name="friction">
            形状の摩擦（通常 0 ～ 1）。
         </param>
         <param name="restitution">
            形状の復元またはうねり（通常 0 ～ 1）。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.AddInactiveShape(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            既存の SmallBasic 図形を物理エンジンに追加するには、PanView メソッドでのみ動作する非アクティブ（非インタラクティブで非インタラクティブな）図形として追加します。
         </summary>
         <param name="shapeName">
            形状の名前。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.AddMovingAnchor(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            移動するアンカーポイントとして使用するために、新しい小さな透明な高密度の図形を追加します。
         </summary>
         <param name="posX">
            アンカーの X 座標。
         </param>
         <param name="posY">
            アンカーの Y 座標。
         </param>
         <returns>
            アンカーの形名。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.AddMovingShape(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            既存の SmallBasic 図形を物理エンジンに移動（動的）図形として追加します。
         </summary>
         <param name="shapeName">
            形状の名前。
         </param>
         <param name="friction">
            形状の摩擦（通常 0 ～ 1）。
         </param>
         <param name="restitution">
            形状の復元またはうねり（通常 0 ～ 1）。
            反転のために負の値が設定されている場合、形状は画像境界に一致する不規則な複合形状内にグループ化できる非アクティブ画像を追加するために使用される非常に小さいサイズで追加されます。
         </param>
         <param name="density">
            形状密度（デフォルトは 1）。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.AddRope(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            既存の 2 つの図形の間にロープを追加します。
         </summary>
         <param name="shape1">
            最初の形。
         </param>
         <param name="shape2">
            第 2 の形。
         </param>
         <returns>
            ロープの名前。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.AttachShapes(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2 つの図形を 1 つの図形として一緒に移動します。それらの形状は遠隔のジョイントと接続されており、ヒットした場合には少しぐらつくことがあります。
         </summary>
         <param name="shape1">
            最初の図形名。
         </param>
         <param name="shape2">
            2 番目の図形名。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.AttachShapesWithRotation(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2 つの図形を 1 つとして一緒に動くように接続しますが、図形は互いに回転します。
         </summary>
         <param name="shape1">
            最初の図形名。
         </param>
         <param name="shape2">
            2 番目の図形名。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.DetachShapes(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            以前に添付された 2 つの図形を切断します。
         </summary>
         <param name="shape1">
            最初の図形名。
         </param>
         <param name="shape2">
            2 番目の図形名。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.DisconnectShape(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            図形を削除せずにフィジックスエンジンから図形を切断します。
         </summary>
         <param name="shapeName">
            形状の名前。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.DoTimestep">
         <summary>
            タイムステップ更新を実行します。
         </summary>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.GetAngle(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状の回転角度を取得します。
         </summary>
         <param name="shapeName">
            形状の名前。
         </param>
         <returns>
            回転角度（度）。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.SetAngle(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            図形の回転角度をリセットします。
         </summary>
         <param name="shapeName">
            形状の名前。
         </param>
         <param name="angle">
            回転角度（度）。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.GetCollisions(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定された図形が最後の DoTimestep（）の間に衝突したすべての図形の配列を取得します。
         </summary>
         <param name="shapeName">
            衝突をチェックするための形状。
         </param>
         <returns>
            すべての形状の配列が衝突しました（静的な障害物の場合は空 "" または "Wall"（壁）かもしれません）。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.GetInertia(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状の慣性モーメントを得る。
         </summary>
         <param name="shapeName">
            形状の名前。
         </param>
         <returns>
            形状の慣性。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.GetMass(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状の質量を得る。
         </summary>
         <param name="shapeName">
            形状の名前。
         </param>
         <returns>
            形状の質量。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.GetPosition(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状座標の中心を取得します。
         </summary>
         <param name="shapeName">
            形状の名前。
         </param>
         <returns>
            形状中心位置を持つ 2 要素配列。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.GetContacts(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定された接点の距離内で衝突した図形のリストを取得します。
         </summary>
         <param name="posX">
            確認する接触位置の X 座標。
         </param>
         <param name="posY">
            確認する接触位置の Y 座標。
         </param>
         <param name="distance">
            接点の接点からの最大距離。
         </param>
         <returns>
            各連絡先が 2 つの形状名の配列である連絡先の配列。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.GetAllShapesAt(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            入力座標で物理エンジンのすべての形状（存在する場合）の配列を取得します。
            このメソッドの座標は、パンが存在する場合の物理エンジンの座標です。
         </summary>
         <param name="posX">
            X 座標。
         </param>
         <param name="posY">
            Y 座標。
         </param>
         <returns>
            形状名または "" の配列。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.GetRotation(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状回転速度を取得します。
         </summary>
         <param name="shapeName">
            形状の名前。
         </param>
         <returns>
            角回転速度度 / s。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.GetShapeAt(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            入力座標で（もしあれば）形状を取得します。
            このメソッドの座標は、パンが存在する場合の画面座標です。
         </summary>
         <param name="posX">
            X 座標。
         </param>
         <param name="posY">
            Y 座標。
         </param>
         <returns>
            入力位置の形状名または ""。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.GetVelocity(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状の速度を取得します。
         </summary>
         <param name="shapeName">
            形状の名前。
         </param>
         <returns>
            形状速度を持つ 2 要素配列。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.GroupShapes(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2 つの図形をしっかりとグループ化して一緒に動かします。Shape1 が shape2 に追加されて 1 つの図形として機能します。
         </summary>
         <param name="shape1">
            最初の図形名。
         </param>
         <param name="shape2">
            2 番目の図形名。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.Help">
         <summary>
            この機能はこのヘルプを表示するためのものです。

            拡張機能は Box2D（http://box2d.org）をエンジンとして使用し、SmallBasic のグラフィックス機能との間のインターフェイスを提供します。

            物理エンジンに接続されている図形だけがモーション物理に参加します。たとえば、通常の図形（たとえば、ガンを物理エンジンに接続しないなど）を追加することができます。図形がエンジンに接続されたら、拡張機能によって提供される方法でのみ図形と対話するのが最善です。すべての位置は SmallBasic GraphicsWindow ピクセルにあり、図形センターを参照します。

            画像とテキストの形は長方形として扱われ、楕円は円として扱われます。三角形と凸多角形のサポートもありますが、線はありません。LoadImagesAsCircles プロパティを "True" に設定することで、画像を円として扱うことができます。

            Box2D が難しかった 1 つの問題は、偏向されずに他の図形を "トンネル" することができる小さな動きの速いオブジェクトです（SetBullet オプションを参照）。

            別の問題は、非常に異なるサイズ、したがって質量、特にそれらが互いに接続されたときの大きな形状の形状です。これらの密度を変更する必要があるかもしれません（Anchor オプションはこれを少し自動化しようとしています）。さもなければ、デフォルト密度 1 が良いです。余りにも多くの形を一緒に接続する誘惑に抵抗する。

            TimestepControl の設定を使用していくつかの "難しい" モデルの安定性を向上させることは可能かもしれませんが、デフォルトはほとんどの場合よく見えます。

            SmallBasic イベントサブルーチン内の物理メソッドを直接呼び出すのではなく、メインのゲームループで処理できるフラグを設定します。

            サンプルの SmallBasic プログラムと、拡張 DLL に付属の "入門ガイド" があります。これは開始するのに最適な場所です。

            バグや問題を SmallBasic フォーラム（http://social.msdn.microsoft.com/Forums/en-US/smallbasic/threads）に報告してください。しかし、最初に SmallBasic コードを単純化して短い "実行可能な" コードを提供する前に問題を特定してくださいサンプル。
         </summary>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.PanView(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ウィンドウ境界を含むカメラビューをパンします。
         </summary>
         <param name="panHorizontal">
            水平方向にパンします（マイナスが残っています）。
         </param>
         <param name="panVertical">
            垂直方向にパンします（ネガは上になります）。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.GetPan">
         <summary>
            現在のパンオフセットを取得します .PanView、FollowShapeX（Y）、BoxShape を参照してください。
            ワールド座標 = スクリーン座標 + パンオフセット。
         </summary>
         <returns>
            現在のパンオフセットを持つ 2 要素配列。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.FollowShapeX(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ビューの X 位置に固定された形状を設定します。
            これは PanView と似ていますが、ビューが一定の視覚的 X 位置に指定された形状を維持するように自動的にパンする点が異なります。
            X 方向には 1 つの形状しか続かない。次の図形の設定を解除するには、shapeName を "" に設定します。
         </summary>
         <param name="shapeName">
            それに続く形や ""。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.FollowShapeY(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ビューの Y 位置に固定された形状を設定します。
            これは、ビューが一定の視覚的 Y 位置に指定された形状を維持するように自動的にパンする点を除いて、PanView と似ています。
            Y 方向には 1 つの形状しか続かない。次の図形の設定を解除するには、shapeName を "" に設定します。
         </summary>
         <param name="shapeName">
            それに続く形や ""。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.BoxShape(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ビュー内のボックス内に残るように図形を設定します。
            これは、ビューが自動的にパンして、指定された図形を GraphicsWindow のボックス領域内に保持することを除いて、PanView と似ています。
            ボックスに入れることができるのは 1 つの形だけです。図形ボックスの設定を解除するには、shapeName を "" に設定します。
         </summary>
         <param name="shapeName">形状をボックスまたは "" にします。</param>
         <param name="x1">ボックスの左の x 座標。</param>
         <param name="y1">ボックスの上部 y 座標。</param>
         <param name="x2">ボックスの右の x 座標。</param>
         <param name="y2">ボックスの下の y 座標。</param>
      </member>
      <member name="M:LitDev.LDPhysics.RemoveChain(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            チェーンを取り外します。
         </summary>
         <param name="shapeName">
            チェーン名。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.RemoveFrozen">
         <summary>
            エンジンの AABB の外にあるフリーズした図形をすべて削除します。
         </summary>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.RemoveRope(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ロープを取り外します。
         </summary>
         <param name="shapeName">
            ロープの名前。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.RemoveShape(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            図形を削除します。
         </summary>
         <param name="shapeName">
            形状の名前。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.Reset">
         <summary>
            リセット（物理エンジンに取り付けられたすべての図形を削除）。
         </summary>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.SetAABB(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            物理エンジン AABB（軸に沿ったバウンディングボックス）。単位は m のエンジン単位です。設定後にリセットが必要です。これを変更することはお勧めしません。
         </summary>
         <param name="minX">
            ユニバースの左座標（デフォルトは -100）。
         </param>
         <param name="maxX">
            宇宙の右座標（デフォルトは 200）。
         </param>
         <param name="minY">
            ユニバースの上の座標（デフォルトは -100）。
         </param>
         <param name="maxY">
            ユニバースの下位座標（デフォルトは 200）。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.SetBoundaries(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ソリッド境界を設定します（GraphicsWindow の外側の境界を配置すると境界が削除されます）。
         </summary>
         <param name="left">
            左境界 X 値。
         </param>
         <param name="right">
            右境界 X 値。
         </param>
         <param name="top">
            上端の Y 値。
         </param>
         <param name="bottom">
            底（地面）の境界 Y 値。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.SetBullet(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状を弾丸として設定します。これは、パフォーマンスを犠牲にして、高速で動く小さなオブジェクトの "トンネリング" を防ぎます。
         </summary>
         <param name="shapeName">
            形状の名前。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.SetDamping(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            図形の減衰係数を設定します（デフォルトは 0）。
         </summary>
         <param name="shapeName">
            変更する形状。
         </param>
         <param name="linear">
            線形減衰係数。
         </param>
         <param name="angular">
            角度減衰係数。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.SetForce(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状に適用する力を設定する（F = ma を記憶する）。
         </summary>
         <param name="shapeName">
            変更する形状。
         </param>
         <param name="forceX">
            力の X 成分。
         </param>
         <param name="forceY">
            力の Y 成分。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.SetGroup(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            どのスプライトが他の図形と相互作用（衝突）するかを制御します。
         </summary>
         <param name="shapeName">
            変更する形状。
         </param>
         <param name="group">
            現在の図形が属するグループ（デフォルトは 0）。これは 0 ～ 15 の整数でなければなりません。
         </param>
         <param name="mask">
            この図形が衝突するグループの配列（デフォルトではすべてのグループ 0,1,2、..、14,15）。
            形状がグループ 0、1、および 4 とだけ相互作用できるようにするには、"1=0;2=1;3=4;" となります。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.SetGravity(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            重力方向と大きさを設定します（デフォルトは 0,100）。
         </summary>
         <param name="gravX">
            重力の X 成分。
         </param>
         <param name="gravY">
            重力の Y 成分。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.SetShapeGravity(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            個々の形状の重力方向と大きさを設定します（デフォルトは 0,100）。
         </summary>
         <param name="shapeName">
            変更する形状。
         </param>
         <param name="gravX">
            重力の X 成分。
         </param>
         <param name="gravY">
            重力の Y 成分。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.SetImpulse(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            インパルスを形状に設定する（キック）。
         </summary>
         <param name="shapeName">
            変更する形状。
         </param>
         <param name="impulseX">
            インパルスの X 成分。
         </param>
         <param name="impulseY">
            インパルスの Y 成分。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.SetPosition(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状の位置をリセットします。
         </summary>
         <param name="shapeName">
            変更する形状。
         </param>
         <param name="posX">
            X コンポーネントの形状中心。
         </param>
         <param name="posY">
            Y 成分の形状中心。
         </param>
         <param name="angle">
            回転角度（度）。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.SetRotation(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状回転速度を設定します。
         </summary>
         <param name="shapeName">
            変更する形状。
         </param>
         <param name="rotation">
            角回転速度度 / s。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.SetTorque(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            トルクを形状に設定する（回転キック）。
         </summary>
         <param name="shapeName">
            変更する形状。
         </param>
         <param name="torque">
            適用するトルク。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.SetVelocity(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状の速度を設定します。
         </summary>
         <param name="shapeName">
            変更する形状。
         </param>
         <param name="velX">
            速度の X 成分。
         </param>
         <param name="velY">
            速度の Y 成分。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.TimestepControl(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            デフォルトのタイムステップ制御パラメータを変更する - 個々のパラメータを使用して設定することもできます。
         </summary>
         <param name="timestep">
            タイムステップ（デフォルトは 0.025）。
         </param>
         <param name="velocityIterations">
            ベロシティ反復（デフォルトは 6）。
         </param>
         <param name="positionIterations">
            位置の繰り返し（デフォルトは 2）。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.UngroupShapes(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            図形グループのペアを削除します。
         </summary>
         <param name="shape1">
            最初の図形名。
         </param>
         <param name="shape2">
            2 番目の図形名。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.UnsetBullet(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状を箇条書きとして解除します。これにより、形状が通常の衝突検出に戻ります。
         </summary>
         <param name="shapeName">
            形状の名前。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.SetTire(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            トップダウンゲームのために運転可能なタイヤとして機能するオブジェクトを設定します。
            通常、重力は 0 になり、形状はすでにエンジンに追加されています。
            オブジェクトは、最初にディスプレイ上で前方を向いて配置する必要があります。
         </summary>
         <param name="shapeName">タイヤを作るための形。</param>
      </member>
      <member name="M:LitDev.LDPhysics.MoveTire(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            タイヤの形を動かす、前方または後方の力を加える。
         </summary>
         <param name="shapeName">移動するタイヤの形状。</param>
         <param name="force">適用する力は正、前方は負です。</param>
      </member>
      <member name="M:LitDev.LDPhysics.BrakeTire(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            タイヤの形にブレーキをかける。
         </summary>
         <param name="shapeName">制動するタイヤの形状。</param>
      </member>
      <member name="M:LitDev.LDPhysics.TurnTire(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            タイヤの形を変えて、左右に操縦する。
         </summary>
         <param name="shapeName">回転するタイヤの形状。</param>
         <param name="torque">トルク、適用する回転力、正は右に曲がり、負は左に曲がる。</param>
      </member>
      <member name="M:LitDev.LDPhysics.GetTireProperties(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            タイヤのプロパティを取得するには、以下が含まれます：

            アンチスキッド（高い値はスキッドを減少させる）
            ドラッグ（値を大きくすると前後のドラッグが増えます）
            ブレーキ（高い値は制動力を増加させる）
            ストレート（より高い値はステアリングを素早く復帰させる）
            BrakeStraighten（より高い値は制動中により速く操舵を回復する）
         </summary>
         <param name="shapeName">タイヤの形状。</param>
         <returns>プロパティ名でインデックスされたプロパティの配列。"AntiSkid"（滑り止め）。</returns>
      </member>
      <member name="M:LitDev.LDPhysics.SetTireProperties(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            タイヤのプロパティを設定します。

            アンチスキッド（高い値はスキッドを減少させる）
            ドラッグ（値を大きくすると前後のドラッグが増えます）
            ブレーキ（高い値は制動力を増加させる）
            ストレート（より高い値は、より早くステアーを回復させる）
            BrakeStraighten（より高い値は、制動中により迅速にステアリングを回復させる）
         </summary>
         <param name="shapeName">タイヤの形状。</param>
         <param name="properties">
            設定する 1 つ以上のプロパティの配列。
            インデックスはプロパティ（大文字と小文字を区別します）の 1 つで、値はプロパティ値です。
         </param>
      </member>
      <member name="M:LitDev.LDPhysics.GetTireInformation(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            タイヤ情報を取得するには、以下が含まれます：

            スキッド（この値がプロパティ AntiSkid を超える場合、タイヤが滑っている）
            クラッシュ（値はインパクトの速度）
         </summary>
         <param name="shapeName">タイヤの形状。</param>
         <returns>情報名でインデックスされた情報の配列。"Skid"（スキッド）。</returns>
      </member>
      <member name="M:LitDev.LDPhysics.AddExplosion(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            500 ミリ秒以上かけて 50x20kg の粒子を爆発させて爆発させる。
         </summary>
         <param name="posX">爆発の X 座標。</param>
         <param name="posY">爆発の Y 座標。</param>
         <param name="power">爆発力、これは爆発粒子の初期速度です。</param>
         <param name="damping">ブラストのダンピングは、この値が小さいほどブラスト範囲が大きくなります（デフォルトは 10）。</param>
         <param name="colour">爆発粒子の任意の色です（ない場合は ""）。</param>
      </member>
      <member name="M:LitDev.LDPhysics.ToggleMoving(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            移動する図形を固定し、固定図形を固定図形に切り替えます。
            また、このメソッドは、移動または固定されている場合は、回転をオンまたはオフに設定して一致させます。
         </summary>
         <param name="shapeName">形状の名前。</param>
      </member>
      <member name="M:LitDev.LDPhysics.ToggleRotation(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            回転しないように図形を切り替えたり、図形を回転しないように切り替えたりします。
            このメソッドは、固定および移動図形の回転プロパティを切り替えます。
         </summary>
         <param name="shapeName">形状の名前。</param>
      </member>
      <member name="M:LitDev.LDPhysics.ToggleSensor(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            センサとして動作するように図形を切り替える（逆も同様）。
            センサ形状は他の形状と相互作用しませんが、依然として衝突データを提供します。
         </summary>
         <param name="shapeName">形状の名前。</param>
      </member>
      <member name="M:LitDev.LDPhysics.AttachShapesWithJoint(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2 つの図形を接続して、いくつかの関節タイプの 1 つとして一緒に動くようにします。
            これらは高度化することができ、Box2D のマニュアルを参照する必要があります。
            多くの場合、ジョイントが必要に応じて動作するように図形の回転を防止することが最善です。
            複数のジョイントを図形に適用することもできます。
            この方法では最初の形状の位置が使用されるため、最初に設定します。
         </summary>
         <param name="shape1">最初の図形名。</param>
         <param name="shape2">2 番目の図形名。</param>
         <param name="type">
            以下のジョイントタイプのいずれか。

            "Distance"（距離） - 形状間の固定距離を維持します。
            "Gear"（歯車） -  2 つの形状のプリズムまたは回転ジョイント（以前に作成したもの）をリンクします。
            "Line"（線） - 最初に図形を結ぶ線に沿って図形を移動します。
            "Mouse" - 図形をマウスの後に移動します（両方の図形名は同じにする必要があります）。
            "Prismatic_H" -  2 つの図形の間の線に沿って図形を垂直に移動します。
            "Prismatic_V" -  2 つの図形の間の線に沿って図形を水平に移動します。
            "Pulley"（プーリー） - プーリーシステムで、一方の形状が下に動くにつれて上に移動し、最初にプーリーの動きの極端な点で形状を位置決めします。
            "Revolute" - 形状はお互いに回転することができます。
         </param>
         <param name="collide">
            接続された図形は、相互に "True" または "False"（デフォルト）で対話できます。
         </param>
         <param name="parameters">
            オプションのパラメータ（デフォルトは ""）、複数のパラメータは配列にあります。

            "Distance"（距離） - 減衰比（デフォルトは 0）
            "Gear"（歯車） - 歯車比、第 1 関節、第 2 関節（デフォルト 1、関節の自動検出）
            "Line"（線） -  X 方向、Y 方向、下側平行移動、上側平行移動（形状を結ぶデフォルトの線、制限なし）
            "Mouse"（マウス） - 最大加速、減衰比（デフォルト 10000,0.7）
            "Prismatic_H" -  X 方向、Y 方向、下側平行移動、上側平行移動（デフォルト 1,0、無制限）
            "Prismatic_V" -  X 方向、Y 方向、下側平行移動、上側平行移動（デフォルトは 0,1、無限）
            "Pulley"（プーリ） - プーリ比（ブロックとタックル）（デフォルトは 1）
            "Revolute" - 低い角度、上の角度（デフォルトなし）
         </param>
         <returns>
            ジョイント名。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.DetachJoint(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            以前にジョイントで結合された 2 つの図形を切断します。
         </summary>
         <param name="jointName">
            ジョイント名。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.SetJointMotor(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            選択したジョイント（Line、Prismatic_H、Prismatic_V、Revolute）にモーターを設定します。
         </summary>
         <param name="jointName">
            ジョイント名。
         </param>
         <param name="speed">希望のモータ速度。</param>
         <param name="maxForce">
            最大モータ力（Revolute のトルク）。
            ゼロ値はモーターをオフにします。
         </param>
      </member>
      <member name="M:LitDev.LDPhysics.WakeAll">
         <summary>
            すべての睡眠の形を起こす - 形状は力や接触が加えられていないため眠る。接触や力が加えられたときに自動的に起きるため、この操作はほとんど必要ありません。
         </summary>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.RayCast(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            目に見えない光線を投射して形の近接を検出する。
         </summary>
         <param name="shapeName">レイをキャストするための形状。</param>
         <param name="angle">チェックする角度（度）。これは角度の配列でもあります。</param>
         <param name="distance">確認する最大距離。</param>
         <returns>
            その距離に等しい値を持つ形状名（静的障害物の場合は "Wall"（壁））によってインデックスされた結果の配列。
            図形はソートされ、最も近いものが最初にリストされます。
            入力角度の配列を使用すると、各角度に最も近い形状のみが返され、値は距離ではなく角度です。
         </returns>
      </member>
      <member name="M:LitDev.LDPhysics.WriteJson(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            R.U.B.E と互換性のある json スクリプトを作成します。現在の LDPhysics モデルから。
            詳細については、https://www.iforce2d.net/rube を参照してください。
         </summary>
         <param name="fileName">作成する json ファイルへのフルパス。</param>
      </member>
      <member name="M:LitDev.LDPhysics.ReadJson(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            R.U.B.E と互換性のある json スクリプトで読み込みます。LDPhysics モデルを作成します。
            詳細については、https://www.iforce2d.net/rube を参照してください。
         </summary>
         <param name="fileName">読み取る json ファイルへのフルパス。</param>
         <param name="scale">すべての図形のスケールを設定します（既定の 1（スケーリングなし））。</param>
         <param name="reverseY">Y 方向を上から下に反転します（"True" または "False"）。</param>
         <param name="stationary">すべての図形を最初に休止状態に設定すると、ジョイントモーターはまだ有効です（"True" または "False"）。</param>
         <param name="offsetX">すべての図形に x 座標オフセットを追加します。</param>
         <param name="offsetY">すべての図形に y 座標オフセットを追加します。特に、reverseY が設定されている場合に便利です。</param>
         <returns>モデルの作成に使用された LDPhysics コマンドを含むテキスト配列。</returns>
      </member>
      <member name="P:LitDev.LDPhysics.ChainColour">
         <summary>
            チェーンに使用される色。
         </summary>
      </member>
      <member name="P:LitDev.LDPhysics.LoadImagesAsCircles">
         <summary>
            画像の形状を円として読み込むかどうかを "True" または "False"（デフォルトは "False"）に切り替えます。
         </summary>
      </member>
      <member name="P:LitDev.LDPhysics.PositionIterations">
         <summary>
            物理エンジン位置の反復（デフォルトは 2）。
         </summary>
      </member>
      <member name="P:LitDev.LDPhysics.RopeColour">
         <summary>
            ロープに使用される色。
         </summary>
      </member>
      <member name="P:LitDev.LDPhysics.Scaling">
         <summary>
            物理エンジンのスケーリング（ピクセル / m、デフォルトは 10）。これを変更することはお勧めしません。
         </summary>
      </member>
      <member name="P:LitDev.LDPhysics.TimeStep">
         <summary>
            物理エンジンのタイムステップサイズ（デフォルトは 0.025）。
         </summary>
      </member>
      <member name="P:LitDev.LDPhysics.VelocityIterations">
         <summary>
            物理エンジンの速度反復（デフォルトは 6）。
         </summary>
      </member>
      <member name="P:LitDev.LDPhysics.VelocityThreshold">
         <summary>
            非弾性衝突の "粘り強い壁"（デフォルト 1）の物理エンジンの速度閾値。
         </summary>
      </member>
      <member name="P:LitDev.LDPhysics.MaxPolygonVertices">
         <summary>
            物理エンジン凸多角形上の頂点の最大数（デフォルトは 8）。
         </summary>
      </member>
      <member name="P:LitDev.LDPhysics.MaxProxies">
         <summary>
            物理エンジンの最大オブジェクト数 "プロキシ"（デフォルトは 1024）。
         </summary>
      </member>
      <member name="T:LitDev.LDCommPort">
         <summary>
            シリアルポート経由でデータを送受信します。
            Nino Carrillo のオリジナルコード
         </summary>
      </member>
      <member name="M:LitDev.LDCommPort.OpenPort(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            使用するシリアルポートを開きます。パリティなしの 8 つの databits を仮定します。
         </summary>
         <param name="portName">
            "COM8" の形式で開くポートを識別する文字列。
         </param>
         <param name="baudRate">
            整数ボーレート、たとえば 9600。
         </param>
         <returns>
            エラーメッセージ "SUCCESS"（成功）、"NOSERIALPORTS"、"PORTNOTFOUND" または "CONNECTIONFAILED"。
         </returns>
      </member>
      <member name="M:LitDev.LDCommPort.SwapPort(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在アクティブなポートを以前に開いたポートに切り替えます。
         </summary>
         <param name="portName">すでに開いているポートを識別する文字列。</param>
         <returns>エラーメッセージ "SUCCESS" または "PORTNOTFOUND"。</returns>
      </member>
      <member name="M:LitDev.LDCommPort.RXByte">
         <summary>
            開いているシリアルポートから 1 バイトを読み取り、そのバイトを整数として返します。
         </summary>
         <returns>
            1 ～ 255 の整数値（失敗時には "NOCONNECTION" または "FAILED"）。
         </returns>
      </member>
      <member name="M:LitDev.LDCommPort.RXChar">
         <summary>
            開いているシリアルポートから 1 バイトを読み取り、そのバイトをユニコード文字として返します。
         </summary>
         <returns>
            1 つのユニコード文字（失敗時には "NOCONNECTION" または "FAILED"）。
         </returns>
      </member>
      <member name="M:LitDev.LDCommPort.RXAll">
         <summary>
            オープン通信ポート入力バッファー内の使用可能なすべてのバイトを読み取ります。
         </summary>
         <returns>
            バイトの文字列を返します（失敗時には "NOCONNECTION" または "FAILED"）。
         </returns>
      </member>
      <member name="M:LitDev.LDCommPort.ClosePort">
         <summary>
            開いているシリアルポートを閉じます。
         </summary>
         <returns>
            "SUCCESS"、"NOCONNECTION"、"FAILED" のいずれか。
         </returns>
      </member>
      <member name="M:LitDev.LDCommPort.AvailablePorts">
         <summary>
            使用可能なシリアルポートのリストを返します。
         </summary>
         <returns>
            利用可能なシリアルポートの名前を含む配列。
         </returns>
      </member>
      <member name="M:LitDev.LDCommPort.TXByte(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            シリアルポートに 1 バイトを送信します。
         </summary>
         <param name="dataByte">
            ポートに書き込まれるバイト。
         </param>
         <returns>
            "SUCCESS"、"NOCONNECTION"、"FAILED" のいずれか。
         </returns>
      </member>
      <member name="M:LitDev.LDCommPort.TXString(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            文字列をシリアルポートに送信します。
         </summary>
         <param name="dataString">
            送信される文字列値。
         </param>
         <returns>
            "SUCCESS"、"NOCONNECTION"、"FAILED" のいずれか。
         </returns>
      </member>
      <member name="M:LitDev.LDCommPort.SetHandshake(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在のポートのハードウェアフロー制御を設定またはクリアします。
         </summary>
         <param name="handshake">
            "H" はハードウェアフロー制御を、"HX" はハードウェアおよびソフトウェアフロー制御を、"X" はソフトウェア制御を、その他の文字はクリアする。
         </param>
         <returns>
            "SUCCESS"、"NOCONNECTION"、"FAILED" のいずれか。
         </returns>
      </member>
      <member name="M:LitDev.LDCommPort.SetEncoding(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            送受信テキスト変換の現在のポートエンコーディングを設定します。
         </summary>
         <param name="encoding">
            エンコーディング：
            "Ascii"（デフォルト）、"Unicode"、"UTF7"、"UTF8"、"UTF32" または "BigEndianUnicode"。
         </param>
         <returns>
            "SUCCESS"、"NOCONNECTION"、"FAILED" のいずれか。
         </returns>
      </member>
      <member name="M:LitDev.LDCommPort.SetParity(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在のポートのパリティを設定します。
         </summary>
         <param name="parity">
            パリティ：
            "None"（デフォルト）、"Even"、"Mark"、"Odd" または "Space"。
         </param>
         <returns>
            "SUCCESS"、"NOCONNECTION"、"FAILED" のいずれか。
         </returns>
      </member>
      <member name="M:LitDev.LDCommPort.SetDataBits(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在のポートデータビットを設定します。
            5 ～ 8（デフォルト）。
         </summary>
         <param name="dataBits">
            データビット：
            5 ～ 8（デフォルト）。
         </param>
         <returns>
            "SUCCESS"、"NOCONNECTION"、"FAILED" のいずれか。
         </returns>
      </member>
      <member name="M:LitDev.LDCommPort.SetStopBits(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            現在のポートストップビット。
         </summary>
         <param name="stopBits">
            停止ビット：
            "One"（デフォルト）、"None"、"OnePointFive" または "Two"。
         </param>
         <returns>
            "SUCCESS"、"NOCONNECTION"、"FAILED" のいずれか。
         </returns>
      </member>
      <member name="P:LitDev.LDCommPort.LastPort">
         <summary>
            イベントが発生した最後のポート名。
         </summary>
      </member>
      <member name="P:LitDev.LDCommPort.LastError">
         <summary>
            エラーイベントが発生した最後のエラー。
         </summary>
      </member>
      <member name="E:LitDev.LDCommPort.DataReceived">
         <summary>
            シリアルポートがデータを受信したときのイベント。
         </summary>
      </member>
      <member name="E:LitDev.LDCommPort.ErrorReceived">
         <summary>
            シリアルポートがエラーを受信したときのイベント。
         </summary>
      </member>
      <member name="T:LitDev.LDShapes">
         <summary>
            図形拡張ユーティリティ。
         </summary>
      </member>
      <member name="M:LitDev.LDShapes.GetProperty(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            図形プロパティを取得します。これは .Net UIElement プロパティです。
         </summary>
         <param name="shapeName">形状または制御名。</param>
         <param name="property">取得するプロパティ名。</param>
         <returns>プロパティの値。</returns>
      </member>
      <member name="M:LitDev.LDShapes.GetProperties(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            図形のプロパティのリストを取得します。これらは .Net UIElement プロパティです。
         </summary>
         <param name="shapeName">形状または制御名。</param>
         <returns>プロパティとその値の配列。</returns>
      </member>
      <member name="M:LitDev.LDShapes.SetProperty(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            図形プロパティを設定します。これは .Net UIElement プロパティです。
         </summary>
         <param name="shapeName">形状または制御名。</param>
         <param name="property">設定するプロパティ名。</param>
         <param name="value">プロパティを設定する値。</param>
      </member>
      <member name="M:LitDev.LDShapes.ResetTurtle">
         <summary>
            GraphicsWindow.Clear（）の後に Turtle をリセットします。
         </summary>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.SetTurtleImage(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            タートルをイメージに設定します。
         </summary>
         <param name="imageName">
            カメのために読み込む画像。
            ImageList.LoadImage またはローカルまたはネットワークイメージファイルから返された値。
         </param>
         <param name="size">
            カメのサイズを変更するサイズ（デフォルトのカメは 16 です）。
         </param>
      </member>
      <member name="M:LitDev.LDShapes.RemoveTurtleLines">
         <summary>
            すべてのカメの尾道を取り除く。
         </summary>
      </member>
      <member name="M:LitDev.LDShapes.RasteriseTurtleLines">
         <summary>
            すべてのカメの軌跡線をラスタライズします。
            亀の軌跡の数が多い場合、プログラムは線の形状（軌跡）の数のために遅くなることがあります。
            これは、タートルの線を線の形から背景の図に変換します。
         </summary>
      </member>
      <member name="M:LitDev.LDShapes.MoveLine(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            線の形を移動します。
         </summary>
         <param name="shapeName">
            図形名（Shapes.AddLine で作成された行）。
         </param>
         <param name="x1">
            行を移動する最初の X 座標。
         </param>
         <param name="y1">
            行を移動する最初の Y 座標。
         </param>
         <param name="x2">
            行を移動する 2 番目の X 座標。
         </param>
         <param name="y2">
            行を移動する 2 番目の Y 座標。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.MoveTriangle(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            三角形を移動します。
         </summary>
         <param name="shapeName">
            図形名（Shapes.AddTriangle で作成された三角形）。
         </param>
         <param name="x1">
            三角形を移動する最初の X 座標。
         </param>
         <param name="y1">
            三角形を移動する最初の Y 座標。
         </param>
         <param name="x2">
            三角形を移動する 2 番目の X 座標。
         </param>
         <param name="y2">
            三角形を移動する 2 番目の Y 座標。
         </param>
         <param name="x3">
            三角形を移動する 3 番目の X 座標。
         </param>
         <param name="y3">
            三角形を移動する 3 番目の Y 座標。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.Move(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            三角形またはポリゴンの左上の位置を移動します。
            このメソッドは、線（Shapes.AddLine）でも機能します。
         </summary>
         <param name="shapeName">
            形状名（三角形、ポリゴンまたは線形）。
         </param>
         <param name="x">
            三角形、ポリゴンまたは線の X（左）座標。
         </param>
         <param name="y">
            三角形、ポリゴンまたは線の Y（上）座標。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.RotateAbout(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ある点を中心にして図形を回転させます。
         </summary>
         <param name="shapeName">
            形状の名前。
         </param>
         <param name="x">
            図形を回転させるための X 座標。
         </param>
         <param name="y">
            図形を回転させるための Y 座標。
         </param>
         <param name="angle">
            形状を回転させる角度（度）。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.MovePolygon(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            多角形を移動します。
         </summary>
         <param name="shapeName">
            図形名（LDShapes.AddPolygon で作成されたポリゴン）。
         </param>
         <param name="points">
            points[i][1] = x、points[i][2] = y 形式のポリゴンコーナーの新しい座標の配列。

            ポイント数は 3 以上でなければならず、コールごとに変更することができます。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.AddPolygon(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ポリゴン図形を作成します。
         </summary>
         <param name="points">
            points[i][1] = x、points[i][2] = y 形式のポリゴンコーナーの座標の配列。

            ポイント数は 3 以上でなければなりません。
         </param>
         <returns>
            多角形の名前。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.AddStar(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            星型を作成します。
            負の距離で楽しいエフェクトを作成できます。
         </summary>
         <param name="numPoint">スターポイントの数。</param>
         <param name="innerRadius">中心から内側の点までの距離。</param>
         <param name="outerRadius">中心点から外側点までの距離。</param>
         <returns>
            星形の名前。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.AddRegularPolygon(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            正多角形を作成します。
         </summary>
         <param name="numPoint">ポリゴン面の数。</param>
         <param name="radius">中央からコーナーまでの距離。</param>
         <returns>
            正多角形の名前。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.OverlapBox(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            境界ボックスの形状の重なりをチェックします（衝突検出）。
         </summary>
         <param name="shape1">
            最初の図形名。
         </param>
         <param name="shape2">
            2 番目の図形名。
         </param>
         <returns>
            "True" または "False"。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.OverlapCircle(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            境界円の形の重なりをチェックします（衝突検出）。
         </summary>
         <param name="shape1">
            最初の図形名。
         </param>
         <param name="shape2">
            2 番目の図形名。
         </param>
         <returns>
            "True" または "False"。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.Overlap(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状の重なりをチェックします（楕円形または長方形のタイプの衝突検出）。
            最初の形状は、ズームされず、回転しないようにする必要があります。
         </summary>
         <param name="shape1">
            最初の図形名。
         </param>
         <param name="shape2">
            2 番目の図形名。
         </param>
         <returns>
            "True" または "False"。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.BrushColour(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状ブラシの色を設定します。
         </summary>
         <param name="shapeName">
            形状または制御名。
         </param>
         <param name="colour">
            新しいブラシの色。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.GetColour(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            図形のブラシとペンの色を取得します。
         </summary>
         <param name="shapeName">
            形状または制御名。
         </param>
         <returns>
            3 要素配列
            1）16 進形式のブラシ（または背景色）の図形
            2）形状の不透明度（0 ～ 100）
            3）16 進形式のペン（またはフォアグラウンド）カラーを描く
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.BrushGradient(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            線形または放射状のグラデーションブラシを作成します。
         </summary>
         <param name="colours">
            グラデーションの図形に適用する色の配列。
         </param>
         <param name="orientation">
            グラデーションの向き。
            "H" 水平。
            "V" 垂直。
            "DU" は斜め上に上がる。
            "DD" は斜めに下がります。
            "R" ラジアル（デフォルトの場合 ""）
         </param>
         <returns>グラデーションブラシの名前。</returns>
      </member>
      <member name="M:LitDev.LDShapes.BrushImage(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            イメージブラシを作成します。
            これらのブラシは、BrushGradient を使用できる場所であればどこでも動作します。
         </summary>
         <param name="imageName">
            ブラシにロードする画像。
            ImageList.LoadImage またはローカルまたはネットワークイメージファイルから返された値。
         </param>
         <returns>イメージブラシの名前。</returns>
      </member>
      <member name="M:LitDev.LDShapes.BrushText(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            テキストブラシを作成します。
            これらのブラシは、BrushGradient を使用できる場所であればどこでも動作するはずです。
         </summary>
         <param name="text">
            ブラシに追加するテキスト。
            現在の GraphicsWindow フォントが使用されます。
         </param>
         <param name="background">
            背景色。
         </param>
         <param name="foreground">
            フォアグラウンド（ペン）の色。
         </param>
         <returns>テキストブラシの名前。</returns>
      </member>
      <member name="M:LitDev.LDShapes.BrushShape(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ブラシスタイルを色のグラデーションとして設定します。
         </summary>
         <param name="shapeName">
            形状または制御名。
         </param>
         <param name="brush">
            以前に作成されたグラデーションまたはイメージブラシ（LDShapes.BrushGradient LDShapes.BrushImage）。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.BrushRectangle(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            彩度のグラデーションで塗りつぶされた矩形を描きます。
         </summary>
         <param name="brush">
            以前に作成されたグラデーションまたはイメージブラシ（LDShapes.BrushGradient LDShapes.BrushImage）。
         </param>
         <param name="x">
            長方形の x 座標。
         </param>
         <param name="y">
            長方形の y 座標。
         </param>
         <param name="width">
            長方形の幅。
         </param>
         <param name="height">
            長方形の高さ。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.BrushEllipse(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            彩度のグラデーションで塗りつぶされた楕円を描きます。
         </summary>
         <param name="brush">
            以前に作成されたグラデーションまたはイメージブラシ（LDShapes.BrushGradient LDShapes.BrushImage）。
         </param>
         <param name="x">
            楕円の x 座標。
         </param>
         <param name="y">
            楕円の y 座標。
         </param>
         <param name="width">
            楕円の幅。
         </param>
         <param name="height">
            楕円の高さ。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.BrushRoundedRectangle(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            グラデーションを塗りつぶした丸い四角形を描きます。
         </summary>
         <param name="brush">
            以前に作成されたグラデーションまたはイメージブラシ（LDShapes.BrushGradient LDShapes.BrushImage）。
         </param>
         <param name="x">
            長方形の x 座標。
         </param>
         <param name="y">
            長方形の y 座標。
         </param>
         <param name="width">
            長方形の幅。
         </param>
         <param name="height">
            長方形の高さ。
         </param>
         <param name="radius">
            丸みを帯びた角の半径。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.BrushPolygon(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            グラデーションの色で塗りつぶされたポリゴンを描画します。
         </summary>
         <param name="brush">
            以前に作成されたグラデーションまたはイメージブラシ（LDShapes.BrushGradient LDShapes.BrushImage）。
         </param>
         <param name="points">
            points[i][1] = x、points[i][2] = y 形式のポリゴンコーナーの座標の配列。

            ポイント数は 3 以上でなければなりません。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.PenColour(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状ペンの色を設定します。
         </summary>
         <param name="shapeName">
            形状または制御名。
         </param>
         <param name="colour">
            新しいペンの色。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.Font(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状のフォントを設定します。
         </summary>
         <param name="shapeName">
            形状または制御名。
         </param>
         <param name="family">
            新しいフォントファミリ名
            使用可能なフォントファミリについては、LDUtilities.FontList（）を参照してください。
         </param>
         <param name="size">新しいフォントサイズ。</param>
         <param name="bold">新しいフォント太字の状態（"True" または "False"）。</param>
         <param name="italic">新しいフォントイタリック体（"True" または "False"）。</param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.PenWidth(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状ペンの幅を設定します。
         </summary>
         <param name="shapeName">
            形状または制御名。
         </param>
         <param name="width">
            新しいペン幅。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.PenStyle(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状ペンスタイル（ダッシュ、ドットなど）を設定します。
         </summary>
         <param name="shapeName">
            形状の名前。
         </param>
         <param name="dash">
            ダッシュの長さ。
         </param>
         <param name="space">
            スペースの長さ。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.ZIndex(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状 z のインデックスを設定します（レイヤーのポジションはバックグラウンドで、ポジティブはフォアグラウンドです - デフォルトは 0）。
         </summary>
         <param name="shapeName">
            形状または制御名。
         </param>
         <param name="z_index">
            z- インデックス（ゼロ、正または負の整数）。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.ReSize(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            図形の幅と高さのサイズ変更（ズームの絶対バージョン）。
         </summary>
         <param name="shapeName">
            形状または制御名。
         </param>
         <param name="width">
            形状の幅。
         </param>
         <param name="height">
            形状の高さ。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.SetSize(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            あたかも新しいサイズで作成されたかのように、図形のサイズをリセットします。
            位置（左上の点）は変更されません。
         </summary>
         <param name="shapeName">
            形状または制御名。
         </param>
         <param name="width">
            形状の幅。
         </param>
         <param name="height">
            形状の高さ。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.Centre(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状をある点に集中させ、拡大した図形に対しても機能します。
         </summary>
         <param name="shapeName">
            形状または制御名。
         </param>
         <param name="x">
            中心の x 座標。
         </param>
         <param name="y">
            中心の y 座標。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.GetLeft(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            図形の左の位置を取得します（三角形、ポリゴン、および線に対して機能します）。
            アニメーション化しながら図形でも機能します。
         </summary>
         <param name="shapeName">
            形状または制御名。
         </param>
         <returns>
            図形の左端の x 座標。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.GetTop(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            図形の一番上の位置を取得します（三角形、ポリゴン、および線に対して機能します）。
            アニメーション化しながら図形でも機能します。
         </summary>
         <param name="shapeName">
            形状または制御名。
         </param>
         <returns>
            形状の上端の y 座標。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.Width(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            図形の表示可能な幅（ズームを含む）を取得します。
         </summary>
         <param name="shapeName">
            形状または制御名。
         </param>
         <returns>
            形状の可視幅。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.Height(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            形状の可視（ズームを含む）の高さを取得します。
         </summary>
         <param name="shapeName">
            形状または制御名。
         </param>
         <returns>
            形状は可視の高さ。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.SetImage(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ボタンや画像の形で画像を設定または変更する。
         </summary>
         <param name="shapeName">
            画像またはボタン名。
         </param>
         <param name="imageName">
            ロードするイメージ。
            ImageList.LoadImage またはローカルまたはネットワークイメージファイルから返された値。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.AddAnimatedGif(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            アニメーション GIF 図形を作成します。
            これらを非常に多く追加したり、パフォーマンスが低下する可能性があります。
         </summary>
         <param name="imageName">
            ロードするアニメーション GIF ファイル（ローカルまたはネットワーク）。
         </param>
         <param name="repeat">
            アニメーション "True" または "False" を連続して繰り返します。
         </param>
         <returns>
            アニメーション GIF 図形名。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.AddAnimatedImage(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            1 つのレイヤーに複数の画像を含む 1 つの画像からアニメーションを作成します。
            これらを非常に多く追加したり、パフォーマンスが低下する可能性があります。
         </summary>
         <param name="imageName">
            ロードするイメージファイル（ローカルまたはネットワーク）。
            ImageList イメージにすることもできます。
         </param>
         <param name="repeat">
            アニメーション "True" または "False" を連続して繰り返します。
         </param>
         <param name="countX">
            X 方向のサブ画像の数。
         </param>
         <param name="countY">
            Y 方向のサブ画像の数。
         </param>
         <returns>
            アニメーション図形名。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.AnimationSet(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            アニメーションイメージを選択したイメージにリセットします。
         </summary>
         <param name="shapeName">
            アニメーション画像の図形名。
         </param>
         <param name="image">
            選択したアニメーション画像番号（1 からインデックス付け）。
         </param>
      </member>
      <member name="M:LitDev.LDShapes.AnimationCount(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            アニメーション画像内の画像の数を取得します。
         </summary>
         <param name="shapeName">
            アニメーション画像の図形名。
         </param>
         <returns>アニメーション画像内の画像の数。</returns>
      </member>
      <member name="M:LitDev.LDShapes.AnimationPause(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            アニメーション画像を一時停止する。
            AnimationSet を使用して一時停止した画像を更新することもできます
         </summary>
         <param name="shapeName">
            アニメーション画像の図形名。
         </param>
      </member>
      <member name="M:LitDev.LDShapes.AnimationResume(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            以前に一時停止したアニメーション画像を再開します。
         </summary>
         <param name="shapeName">
            アニメーション画像の図形名。
         </param>
      </member>
      <member name="M:LitDev.LDShapes.GetAllShapesAt(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定された座標にあるすべての図形（存在する場合）の配列を取得します。
            座標は、例えばマウス座標であってもよい。
         </summary>
         <param name="x">X 座標</param>
         <param name="y">Y 座標</param>
         <returns>
            形状名の配列または "False"。
            複数の図形の場合、返される配列は、最上位のビジュアルレイヤーから最下部のレイヤーに並べられます。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.AnimateOpacity(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            不透明度をアニメーション化するための図形を設定し、フラッシュ（フェードアウトおよびイン）します。
         </summary>
         <param name="shapeName">点滅する図形またはコントロール。</param>
         <param name="interval">
            完全なフラッシュあサイクルの間隔（ミリ秒単位）。
            値 0 は点滅を停止します。
         </param>
         <param name="count">
            フラッシュの数。
            0 の値は連続的に点滅します。
         </param>
      </member>
      <member name="M:LitDev.LDShapes.AnimateRotation(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            回転をアニメートするための図形を設定します（連続的に回転します）。
         </summary>
         <param name="shapeName">回転する図形またはコントロール。</param>
         <param name="interval">
            完全な 360 度回転の間隔（ms 単位）。
            値 0 を指定すると回転が停止します。
            0 より小さい値は反時計回りに回転します。
         </param>
         <param name="count">
            回転数。
            値 0 は連続的に回転します。
         </param>
      </member>
      <member name="M:LitDev.LDShapes.AnimateZoom(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ズームをアニメーション化するための図形を設定します（イン / アウト）。
         </summary>
         <param name="shapeName">ズームする図形またはコントロール。</param>
         <param name="interval">
            完全なズームサイクルの間隔（ミリ秒単位）。
            値 0 はズームを停止します。
         </param>
         <param name="count">
            ズームサイクル数。
            値 0 は連続的にズームします。
         </param>
         <param name="scaleX">X ズーム倍率。</param>
         <param name="scaleY">Y ズーム倍率。</param>
      </member>
      <member name="M:LitDev.LDShapes.SetShapeEvent(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            マウスイベントを記録する図形を登録する：MouseDown、MouseUp、MouseEnter、MouseLeave、GotFocus、LostFocus。
         </summary>
         <param name="shapeName">追加する図形またはコントロール。</param>
      </member>
      <member name="M:LitDev.LDShapes.GetAllShapes">
         <summary>
            現在作成されているすべての図形の配列を取得します。
         </summary>
         <returns>形状名の配列。</returns>
      </member>
      <member name="M:LitDev.LDShapes.GetOpacity(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            図形の不透明度を取得します。
         </summary>
         <param name="shapeName">
            形状の名前。
         </param>
         <returns>
            0 ～ 100 の値のオブジェクトの不透明度。0 は完全に透明で 100 は完全に不透明。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.ZoomAll(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            すべての図形をズームします。
         </summary>
         <param name="scaleX">x 軸ズームレベル。</param>
         <param name="scaleY">y 軸ズームレベル。</param>
      </member>
      <member name="M:LitDev.LDShapes.Skew(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定された名前の図形を指定された角度だけ傾けます。
         </summary>
         <param name="shapeName">
            スキューする図形の名前。
         </param>
         <param name="angleX">
            X 方向の図形を斜めにする角度。
         </param>
         <param name="angleY">
            Y 方向の図形を傾斜させる角度。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDShapes.FastMove(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定された名前の図形を新しい位置に移動します。
            この方法は速度を最大限に最適化しています。
         </summary>
         <param name="shapeName">
            移動する図形の名前。
         </param>
         <param name="x">
            新しい位置の x 座標。
         </param>
         <param name="y">
            新しい位置の y 座標。
         </param>
      </member>
      <member name="P:LitDev.LDShapes.OverlapDetail">
         <summary>
            オーバーラップメソッドを呼び出した後、このプロパティは交差点に追加の詳細を提供します。
            結果は次のいずれか。
            "Empty"（空） - 交差点なし
            "FullyContains" -  shape1 は完全に内側にあります 2
            "Intersects"（交差） - 重複しているが、どちらも完全に含まれていない
            "FullyInside" -  shape2 は完全に内側にあります 1
         </summary>
      </member>
      <member name="P:LitDev.LDShapes.AnimationInterval">
         <summary>
            アニメーション画像の更新間隔（ms）（デフォルトは 100）。
            0 の値を指定すると、すべてのアニメーション画像の更新が一時停止されます。たとえば、必要に応じて AnimationSet で画像を設定できるようにします。
            これは、一時停止していない、または繰り返していないサイクルを完了したアニメーションイメージすべてに適用される内部タイマーです。
         </summary>
      </member>
      <member name="P:LitDev.LDShapes.LastEventShape">
         <summary>
            イベントが発生した最後の図形です（ShapeEvent）。
         </summary>
      </member>
      <member name="P:LitDev.LDShapes.LastEventType">
         <summary>
            イベントが発生した最後の図形イベントタイプ（ShapeEvent）。次のいずれかになります。
            "MouseDown"
            "MouseUp"
            "MouseEnter"
            "MouseLeave"
            "GotFocus"
            "LostFocus"
         </summary>
      </member>
      <member name="E:LitDev.LDShapes.ShapeEvent">
         <summary>
            登録された形状に形状イベントが発生したときのイベント（SetShapeEvent）
         </summary>
      </member>
      <member name="T:LitDev.LDProcess">
         <summary>
            外部アプリケーションを制御する。
         </summary>
      </member>
      <member name="M:LitDev.LDProcess.Start(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            外部アプリケーションを起動します。
         </summary>
         <param name="application">
            アプリケーションの完全なパスを開始する。"C:\Program Files (x86)\Microsoft\Small Basic\SB.exe" と入力します。
         </param>
         <param name="arguments">
            コマンドに与える引数、ない場合は "" のいずれか。
         </param>
         <returns>
            開始されたアプリケーションのプロセス ID、失敗した場合は -1、既存のプロセスにアタッチされている場合は -2。
         </returns>
      </member>
      <member name="M:LitDev.LDProcess.Stop(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            外部プロセスを停止します。
         </summary>
         <param name="ID">
            プロセス ID を停止します。
         </param>
         <returns>
            成功または失敗の場合は "True" または "False"。
         </returns>
      </member>
      <member name="M:LitDev.LDProcess.GetProcesses">
         <summary>
            システムプロセスのリストを取得します。
         </summary>
         <returns>
            プロセス ID でインデックスされたすべてのシステム・プロセス名の配列。
         </returns>
      </member>
      <member name="T:LitDev.LDSpeech">
         <summary>
            スピーチライブラリは、テキストを音声で認識させ、音声認識を可能にします。
         </summary>
      </member>
      <member name="M:LitDev.LDSpeech.Voices">
         <summary>
            使用可能なボイスの配列を返します。
         </summary>
         <returns>
            利用可能な音声の配列。
         </returns>
      </member>
      <member name="M:LitDev.LDSpeech.Speak(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            いくつかのテキストを話す。
         </summary>
         <param name="text">
            話されるテキスト。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="M:LitDev.LDSpeech.Vocabulary(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            音声規則を使用するための単語とフレーズのボキャブラリを設定します。
            これが設定されていないと、大きな言語ボキャブラリが使用され、結果は一般にあまり良くありません（使用できなくなります）。
            また、明確なフレーズは、単一の単語よりも優れた認識を持つことができます。
         </summary>
         <param name="dictionary">
            認識される単語またはフレーズの配列。
            それが空の場合、デフォルトの言語ボキャブラリが使用されます。
         </param>
         <returns>
            なし。
         </returns>
      </member>
      <member name="P:LitDev.LDSpeech.Speed">
         <summary>
            スピーチスピード（-10 ～ 10）
         </summary>
      </member>
      <member name="P:LitDev.LDSpeech.Volume">
         <summary>
            音声の音量（0 ～ 100）。
         </summary>
      </member>
      <member name="P:LitDev.LDSpeech.Voice">
         <summary>
            現在の音声。
         </summary>
      </member>
      <member name="P:LitDev.LDSpeech.LastSpoken">
         <summary>
            コンピュータが発声した（認識された）最後の音声のテキスト。
         </summary>
      </member>
      <member name="P:LitDev.LDSpeech.LastSpokenConfidence">
         <summary>
            最後のスピーチは、正確さ（0 対 1）の検出の信頼を語った。
         </summary>
      </member>
      <member name="E:LitDev.LDSpeech.Listen">
         <summary>
            スピーチがコンピュータによって話され（そして認識される）イベント。
            適切なマイク、多くのトレーニングや consise 辞書は、まともな結果を得るために必要です。
         </summary>
      </member>
      <member name="T:LitDev.LDFocus">
         <summary>
            フォーカスを制御する TextBoxFocus ユーティリティ（現在入力用にアクティブなテキストボックス）。
         </summary>
      </member>
      <member name="M:LitDev.LDFocus.IsFocus(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            指定された図形にフォーカスがあるかどうかをチェックします。
         </summary>
         <param name="shapeName">
            図形名（通常はテキストボックス）。
         </param>
         <returns>
            "True" または "False"。
         </returns>
      </member>
      <member name="M:LitDev.LDFocus.SetFocus(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            名前付き図形にフォーカスを設定します。
         </summary>
         <param name="shapeName">
            図形名（通常はテキストボックス）。
         </param>
         <returns>
            成功または失敗に応じて "True"（真） または "False"（偽）。
         </returns>
      </member>
      <member name="M:LitDev.LDFocus.GetFocus">
         <summary>
            現在のフォーカスがある図形を取得します。
         </summary>
         <returns>
            形状名（通常はテキストボックス）または "False"。
         </returns>
      </member>
      <member name="T:LitDev.LDMath">
         <summary>
            Trig は次数で機能します。
            その他の数学関数と計算が用意されています。
         </summary>
      </member>
      <member name="M:LitDev.LDMath.Sin(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            度の角度の罪。
         </summary>
         <param name="angle">
            角度（度）。
         </param>
         <returns>
            角度の罪。
         </returns>
      </member>
      <member name="M:LitDev.LDMath.Cos(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            度単位の角度のコス。
         </summary>
         <param name="angle">
            角度（度）。
         </param>
         <returns>
            角度のコス。
         </returns>
      </member>
      <member name="M:LitDev.LDMath.Tan(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            タンの角度。
         </summary>
         <param name="angle">
            角度（度）。
         </param>
         <returns>
            角のタン。
         </returns>
      </member>
      <member name="M:LitDev.LDMath.ArcSin(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ArcSin（度）
         </summary>
         <param name="sin">
            角度の罪。
         </param>
         <returns>
            角度（度）。
         </returns>
      </member>
      <member name="M:LitDev.LDMath.ArcCos(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ArcCos（度）
         </summary>
         <param name="cos">
            角度のコス。
         </param>
         <returns>
            角度（度）。
         </returns>
      </member>
      <member name="M:LitDev.LDMath.ArcTan(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            ArcTan 度。
         </summary>
         <param name="tan">
            角のタン。
         </param>
         <returns>
            角度（度）。
         </returns>
      </member>
      <member name="M:LitDev.LDMath.Convert2Radial(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            2 点間の距離と角度を計算します。
         </summary>
         <param name="x1">
            ポイント 1 の X 座標。
         </param>
         <param name="y1">
            点 1 の Y 座標。
         </param>
         <param name="x2">
            点 2 の X 座標。
         </param>
         <param name="y2">
            点 2 の Y 座標。
         </param>
         <returns>
            点 1 から点 2 までの距離と角度を持つ 2 要素配列。
         </returns>
      </member>
      <member name="M:LitDev.LDMath.Convert2Cartesian(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            点 1 から点 2 の座標、点 2 から点までの距離と角度を計算します。
         </summary>
         <param name="x1">
            ポイント 1 の X 座標。
         </param>
         <param name="y1">
            点 1 の Y 座標。
         </param>
         <param name="dist">
            ポイント 2 までの距離。
         </param>
         <param name="angle">
            角度を 2 度とする角度。
         </param>
         <returns>
            点 2 の座標を持つ 2 要素配列。
         </returns>
      </member>
      <member name="M:LitDev.LDMath.Rotate(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            点 2 を、点 1 を中心に時計回りに回転させる。
         </summary>
         <param name="x1">
            ポイント 1 の X 座標。
         </param>
         <param name="y1">
            点 1 の Y 座標。
         </param>
         <param name="x2">
            点 2 の X 座標。
         </param>
         <param name="y2">
            点 2 の Y 座標。
         </param>
         <param name="angle">
            点 2 を点 1 の周りで度で回転させるための角度。
         </param>
         <returns>
            回転した点 2 の座標を持つ 2 要素の配列。
         </returns>
      </member>
      <member name="M:LitDev.LDMath.Exp(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            数 e ^ x の指数関数。
         </summary>
         <param name="value">e の力を e に引き上げる価値。</param>
         <returns>e ^ x</returns>
      </member>
      <member name="M:LitDev.LDMath.Truncate(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            数値の整数部分を取得します。
         </summary>
         <param name="value">切り捨てる数値。</param>
         <returns>数値の整数部分（小数点以下を削除）。</returns>
      </member>
      <member name="M:LitDev.LDMath.Decimal2Base(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            10 進整数を別の基数に変換します。
         </summary>
         <param name="number">変換する 10 進数（負ではない）。</param>
         <param name="Base">（2 進数）（8 進数）（16 進数）またはその他の基数（36）に変換する基数。</param>
         <returns>要求されたベースの番号、または "FAILED"。</returns>
      </member>
      <member name="M:LitDev.LDMath.Base2Decimal(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            基数を 10 進整数に変換します。
         </summary>
         <param name="number">変換する基数（負ではない）。</param>
         <param name="Base">（2 進数）（8 進数）（16 進数）またはその他の基数から 36 に変換するための基数。</param>
         <returns>数値を 10 進整数または "FAILED" として表します。</returns>
      </member>
      <member name="M:LitDev.LDMath.Sinh(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            双曲線サイン。
         </summary>
         <param name="angle">ラジアン単位の角度。</param>
         <returns>双曲線サイン。</returns>
      </member>
      <member name="M:LitDev.LDMath.Cosh(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            双曲線コサイン。
         </summary>
         <param name="angle">ラジアン単位の角度。</param>
         <returns>双曲線コサイン。</returns>
      </member>
      <member name="M:LitDev.LDMath.Tanh(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            双曲線正接。
         </summary>
         <param name="angle">ラジアン単位の角度。</param>
         <returns>双曲線正接。</returns>
      </member>
      <member name="M:LitDev.LDMath.Evaluate(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            文字列式を数値またはブール値に評価します（可能な場合）。
            JScript コマンド 'eval' が使用されているため、より複雑な JScript 操作が可能です（LDInline も参照してください）。
            後で TextWindow を使用する必要がある場合は、このメソッドを使用する前に TextWindow を表示する必要があります。
         </summary>
         <param name="expression">評価する式。"(9/6) + 3" または "2.1 &gt; 1.5" となる。</param>
         <returns>評価された結果。</returns>
      </member>
      <member name="M:LitDev.LDMath.Evaluate2(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            文字列式を数値に評価します（可能な場合）。
            TextWindow でうまく動作する Evaluate の代替方法。
         </summary>
         <param name="expression">評価する式。"1e6 + 6/4"。</param>
         <returns>評価された結果。</returns>
      </member>
      <member name="M:LitDev.LDMath.Evaluate3(Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            文字列式をブール値 "True" または "False"（可能であれば）に評価します。
            TextWindow でうまく動作する Evaluate の代替方法。
         </summary>
         <param name="expression">ブール値に評価する式。"21.3 &gt; 16"。</param>
         <returns>評価結果（"True" または "False"）。</returns>
      </member>
      <member name="M:LitDev.LDMath.FixSigFig(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            数字を固定数の有効数字に丸めます。
         </summary>
         <param name="number">変更する番号。</param>
         <param name="digits">有効数字の数。</param>
         <returns>変更された番号。</returns>
      </member>
      <member name="M:LitDev.LDMath.FixDecimal(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
         <summary>
            数値を固定小数点以下の桁数に丸めます。必要に応じて追加のトレーニング 10 進数が追加されます。
         </summary>
         <param name="number">変更する番号。</param>
         <param name="digits">小数点以下の桁数。</param>
         <returns>変更された番号。</returns>
      </member>
      <member name="P:LitDev.LDMath.E">
         <summary>
            自然対数基底。
         </summary>
      </member>
      <member name="P:LitDev.LDMath.RandomNumberSeed">
         <summary>
            乱数の種を設定します。シードは整数で、Math.GetRandomNumber が呼び出される前に設定する必要があります。
            乱数シーケンスは、シードによって初期化され、乱数の繰り返し可能なシーケンスが必要な場合にテストに使用できます。
         </summary>
      </member>
      <member name="P:LitDev.LDMath.MinNumber">
         <summary>
            Small Basic が処理できる最小数。
         </summary>
      </member>
      <member name="P:LitDev.LDMath.MaxNumber">
         <summary>
            Small Basic が処理できる最大数。
         </summary>
      </member>
      <member name="T:LitDev.Properties.Resources">
         <summary>
            ローカライズされた文字列を検索するための強く型付けされたリソースクラス。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.ResourceManager">
         <summary>
            このクラスで使用されるキャッシュされた ResourceManager インスタンスを返します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.Culture">
         <summary>
            現在のスレッドの CurrentUICulture プロパティをすべてオーバーライドします。
            この強く型付けされたリソースクラスを使用したリソース参照。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.allBP">
         <summary>
            System.Drawing.Bitmap 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.array">
         <summary>
            System.Drawing.Bitmap 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.bug">
         <summary>
            System.Drawing.Bitmap 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.csv">
         <summary>
            System.Drawing.Bitmap 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.DebugHelp">
         <summary>
            {\ rtf1 \ adeflang1025 \ ansi \ ansicpg1252 \ uc1 \ adeff0 \ deff0 \ stshfdbch0 \ stshfloch31506 \ stshfhich31506 \ stshfbi31506 \ deflang2057 \ deflangfe2057 \ themelang2057 \ themelangfe0 \ themelangcs0 {\ fonttbl {\ f0 \ fbidi \ froman] のようなローカライズされた文字列を検索します \ fcharset0 \ fprq2 {\ * \ panose 02020603050405020304} Times New Roman;} カンブリア数学 ;} \ fBarset0 \ fprq2 {\ * \ panose 02040503050406030204}
            {\ f38 \ fbidi \ franc \ f2 \ fBidi \ fBidi \ fBidi \ fBidi \ fBidi \ fBidi \ fBidi \ fBidi \ fBidi \ fBidi \ fBidi \ fBidi \ fBidi \ fBidi [ 文字列が切り捨てられました ] " ;
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.excel">
         <summary>
            System.Drawing.Bitmap 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.exit">
         <summary>
            System.Drawing.Bitmap 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.help">
         <summary>
            System.Drawing.Bitmap 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.info">
         <summary>
            System.Drawing.Bitmap 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.iowkit32">
         <summary>
            System.Byte [] 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.iowkit64">
         <summary>
            System.Byte [] 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.legend">
         <summary>
            System.Drawing.Bitmap 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.Microsoft_Expression_Drawing">
         <summary>
            System.Byte [] 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.Microsoft_Expression_Effects">
         <summary>
            System.Byte [] 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.noBP">
         <summary>
            System.Drawing.Bitmap 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.pause">
         <summary>
            System.Drawing.Bitmap 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.play">
         <summary>
            System.Drawing.Bitmap 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.quit">
         <summary>
            System.Drawing.Bitmap 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.save">
         <summary>
            System.Drawing.Bitmap 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.SBIcon">
         <summary>
            System.Drawing.Bitmap 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.SQLite_Interop32">
         <summary>
            System.Byte [] 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.SQLite_Interop64">
         <summary>
            System.Byte [] 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.stepout">
         <summary>
            System.Drawing.Bitmap 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.transparency">
         <summary>
            System.Drawing.Bitmap 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="P:LitDev.Properties.Resources.zoom">
         <summary>
            System.Drawing.Bitmap 型のローカライズされたリソースを検索します。
         </summary>
      </member>
      <member name="M:LitDev.Engines.FIP.LPF1">
         <summary>
            ローパスフィルタ
         </summary>
         <returns>ローパスフィルタ</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.LPF2">
         <summary>
            ローパスフィルタ
         </summary>
         <returns>ローパスフィルタ</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.LPF3">
         <summary>
            ローパスフィルタ
         </summary>
         <returns>ローパスフィルタ</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.LPF4">
         <summary>
            ローパスフィルタ
         </summary>
         <returns>ローパスフィルタ</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.HPF1">
         <summary>
            ハイパスフィルタ
         </summary>
         <returns>ハイパスフィルタ</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.HPF2">
         <summary>
            ハイパスフィルタ
         </summary>
         <returns>ハイパスフィルタ</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.HPF3">
         <summary>
            ハイパスフィルタ
         </summary>
         <returns>ハイパスフィルタ</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.HPF4">
         <summary>
            ハイパスフィルタ
         </summary>
         <returns>ハイパスフィルタ</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.LaplaceF1">
         <summary>
            ラプラスフィルター
         </summary>
         <returns>ラプラスフィルター</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.LaplaceF2">
         <summary>
            ラプラスフィルター
         </summary>
         <returns>ラプラスフィルター</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.LaplaceF3">
         <summary>
            ラプラスフィルター
         </summary>
         <returns>ラプラスフィルター</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.LaplaceF4">
         <summary>
            ラプラスフィルター
         </summary>
         <returns>ラプラスフィルター</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.GF1">
         <summary>
            ガウシアンフィルタ
         </summary>
         <returns>ガウシアンフィルタ</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.GF2">
         <summary>
            ガウシアンフィルタ
         </summary>
         <returns>ガウシアンフィルタ</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.GF3">
         <summary>
            ガウシアンフィルタ
         </summary>
         <returns>ガウシアンフィルタ</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.Resize(System.Drawing.Bitmap,System.Int32,System.Int32)">
         <summary>
            最近隣法を用いた画像のサイズ変更
         </summary>
         <param name="OriginalImage">元画像</param>
         <param name="Width">出力幅</param>
         <param name="Height">出力の高さ</param>
         <returns>サイズ変更された画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.Resize2(System.Drawing.Bitmap,System.Int32,System.Int32)">
         <summary>
            バイリニア補間法を用いた画像のサイズ変更
         </summary>
         <param name="OriginalImage">元画像</param>
         <param name="Width">出力幅</param>
         <param name="Height">出力の高さ</param>
         <returns>サイズ変更された画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.Rotate(System.Drawing.Bitmap,System.Double)">
         <summary>
            画像の回転
         </summary>
         <param name="OriginalImage">元画像</param>
         <param name="Angle">角度を度で回転する</param>
         <returns>回転イメージ</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.Rotate(System.Drawing.Bitmap,System.Double,System.Int32,System.Int32)">
         <summary>
            画像の回転
         </summary>
         <param name="OriginalImage">元画像</param>
         <param name="Angle">角度を度で回転する</param>
         <param name="xCenter">X センター</param>
         <param name="yCenter">Y センター</param>
         <returns>回転イメージ</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.rgb2hsv(System.Drawing.Color)">
         <summary>
            RGB カラーモデルを HSV に変換する
         </summary>
         <param name="pixel">RGB カラー</param>
         <returns>HSV 値 [H、S、V]</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.hsv2rgb(System.Double[])">
         <summary>
            HSV カラーモデルを RGB に変換する
         </summary>
         <param name="hsv">HSV 値 [H、S、V]</param>
         <returns>RGB カラー</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.rgb2cmyk(System.Drawing.Color)">
         <summary>
            RGB カラーモデルを CMYK に変換します。
         </summary>
         <param name="pixel">RGB カラー</param>
         <returns>CMYK 値 [C、M、Y、K]</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.cmyk2rgb(System.Double[])">
         <summary>
            CMYK カラーモデルを RGB に変換する
         </summary>
         <param name="cmyk">CMYK 値 [C、M、Y、K]</param>
         <returns>RGB カラー</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.color2greyscale(System.Drawing.Color)">
         <summary>
            輝度法を使用して RGB ピクセルをグレースケールに変換します。
         </summary>
         <param name="pixel">RGB ピクセル</param>
         <returns>グレースケールのピクセル</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.CMYKLayers(System.Drawing.Bitmap)">
         <summary>
            RGB イメージから CMYK レイアウトを作成します。
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>RGB ビットマップとしての CMYK レイヤー</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.Shift(System.Drawing.Bitmap)">
         <summary>
            画像をシフトした倍精度の配列に変換します。
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>シフト配列</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.DFT(System.Drawing.Bitmap)">
         <summary>
            画像の離散フーリエ変換
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>画像スペクトル</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.SDFT(System.Drawing.Bitmap)">
         <summary>
            画像のシフト離散フーリエ変換。
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>シフトイメージスペクトル</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.RGBMatrix(System.Drawing.Bitmap)">
         <summary>
            各 RGB レイヤーの値を分離する
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>[ 赤、緑、青 ] イメージレイヤー</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.RMatrix(System.Drawing.Bitmap)">
         <summary>
            赤色層を分離する
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>赤色層</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.GMatrix(System.Drawing.Bitmap)">
         <summary>
            緑色のレイヤーを分離する
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>緑色のレイヤー</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.BMatrix(System.Drawing.Bitmap)">
         <summary>
            青色層を分離する
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>青色層</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.RGBLayers(System.Drawing.Bitmap)">
         <summary>
            各 RGB レイヤーの値を分離する
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>[ 赤、緑、青 ] の画像レイヤーをビットマップとして</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.LogaritmicScaling(System.Drawing.Bitmap)">
         <summary>
            10 塩基対数スケーリングによる画像ヒストグラム正規化
         </summary>
         <param name="OriginalImage">元の AGB 画像</param>
         <returns>正規化画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ToGreyscale(System.Drawing.Bitmap)">
         <summary>
            輝度法を用いて ARGB 画像をグレースケールに変換する
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>グレースケール画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ToGreyscaleAVG(System.Drawing.Bitmap)">
         <summary>
            平均法を使用して ARGB 画像をグレースケールに変換する
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>グレースケール画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ToGreyscaleLightness(System.Drawing.Bitmap)">
         <summary>
            明度法を使用して ARGB 画像をグレースケールに変換する
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>グレースケール画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.InverseImage(System.Drawing.Bitmap,System.Int32)">
         <summary>
            輝度法を使用して ARGB 画像をグレースケールに変換し、与えられた閾値
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <param name="threshold">逆しきい値</param>
         <returns>逆の画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.NegativeImageGS(System.Drawing.Bitmap)">
         <summary>
            輝度法を使用して ARGB 画像をグレースケールに変換し、その負数を計算します。
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>負</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.NegativeImageColor(System.Drawing.Bitmap)">
         <summary>
            画像のネガを計算する
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>負</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.AddImages(System.Drawing.Bitmap,System.Drawing.Bitmap)">
         <summary>
            輝度法を使用して ARGB 画像をグレースケールに変換し、追加します
         </summary>
         <param name="Left">画像</param>
         <param name="Right">画像</param>
         <returns>添加物</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.SubtractImages(System.Drawing.Bitmap,System.Drawing.Bitmap)">
         <summary>
            輝度法を使用して ARGB 画像をグレースケールに変換し、減算します。
         </summary>
         <param name="Left">ミューネンド画像</param>
         <param name="Right">サブトレージョン画像</param>
         <returns>減算の積</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ToBlackwhite(System.Drawing.Bitmap,System.Int32)">
         <summary>
            ARGB 画像を白黒に変換し、与えられた閾値と逆に変換します。
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <param name="threshold">閾値</param>
         <returns>バルクと白の画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ToBlackwhiteInverse(System.Drawing.Bitmap,System.Int32)">
         <summary>
            ARGB 画像を白黒に変換し、与えられた閾値と逆に変換します。
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <param name="threshold">閾値</param>
         <returns>バルクと白の画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.Histogram(System.Drawing.Bitmap)">
         <summary>
            輝度法を使用して ARGB 画像をグレースケールに変換し、ヒストグラムを返します。
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>画像ヒストグラム（各リスト位置は輝度レベルに対応）</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.RGBHistogram(System.Drawing.Bitmap)">
         <summary>
            カラー画像ヒストグラムを返します。
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>画像ヒストグラム（次元 0 はカラーコード（0  -&gt; 赤、1  -&gt; 緑、2  -&gt; 青）、次元 1  - 各位置は輝度レベルに対応）</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.MinBrightness(System.Drawing.Bitmap)">
         <summary>
            画像の最小輝度レベルを返す
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>指定された画像の最小輝度レベル</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.MaxBrightness(System.Drawing.Bitmap)">
         <summary>
            画像の最大輝度レベルを返します。
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>指定された画像の最大輝度レベル</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ContrastStretching(System.Drawing.Bitmap)">
         <summary>
            輝度法を使用して ARGB 画像をグレースケールに変換し、コントラストストレッチ法を使用して明るくします。
            明るさの最小値と最大値は、デフォルトで 0 ～ 255。
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>グレーススケール画像を強調する</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ContrastStretching(System.Drawing.Bitmap,System.Int32,System.Int32)">
         <summary>
            輝度法を使用して ARGB 画像をグレースケールに変換し、コントラストストレッチ法を使用して明るくします。
            明るさの最小値と最大値は、デフォルトで 0 ～ 255。
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <param name="RMinSet">使用可能な最小輝度値</param>
         <param name="RMaxSet">使用可能な最大輝度値</param>
         <returns>グレースケール画像を強調する</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.HistogramShift(System.Drawing.Bitmap,System.Int32)">
         <summary>
            輝度法を使用して ARGB 画像をグレースケールに変換し、ヒストグラムを所定のオフセットに対してシフトします。
         </summary>
         <param name="OriginalImage">Orignal ARGB 画像</param>
         <param name="offset">シフトオフセット</param>
         <returns>シフトグレースケール画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.HistoramEqualization(System.Drawing.Bitmap)">
         <summary>
            輝度法を使用して ARGB 画像をグレースケールに変換し、等化法を使用してコントラストを向上させます。
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>グレースケールコントラスト強調画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImageSobelFilterGS(System.Drawing.Bitmap)">
         <summary>
            輝度法を使用して ARGB 画像をグレースケールに変換し、Sobel 演算子（水平軸と垂直軸）による画像畳み込みのモジュールを計算します。
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>フィルタリングされた画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImageSobelFilterColor(System.Drawing.Bitmap)">
         <summary>
            Sobel 演算子（水平軸および垂直軸）を使用してイメージコンボリューションのモジュールを計算します。
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>フィルタリングされた画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImagePrewittFilterGS(System.Drawing.Bitmap)">
         <summary>
            輝度法を使用して ARGB 画像をグレースケールに変換し、Prewitt 演算子（水平軸および垂直軸）を使用して画像コンボリューションのモジュールを計算します。
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>フィルタリングされた画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImagePrewittFilterColor(System.Drawing.Bitmap)">
         <summary>
            Prewitt 演算子（水平軸と垂直軸）を使用してイメージコンボリューションのモジュールを計算します。
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>フィルタリングされた画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImageMedianFilterGS(System.Drawing.Bitmap,System.Int32)">
         <summary>
            輝度法を使用して ARGB 画像をグレースケールに変換し、所定のサイズのメジアンマスクで画像フィルタを計算します。
         </summary>
         <param name="OriginalImage">Orignal ARGB 画像</param>
         <param name="size">メジアンマスク寸法</param>
         <returns>フィルタリングされた画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImageMedianFilterColor(System.Drawing.Bitmap,System.Int32)">
         <summary>
            指定されたサイズのメジアンマスクを使用して画像 filtartion を計算します。
         </summary>
         <param name="OriginalImage">Orignal ARGB 画像</param>
         <param name="size">メジアンマスク寸法</param>
         <returns>フィルタリングされた画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImageErosionFilterGS(System.Drawing.Bitmap)">
         <summary>
            ルミナンス法を用いて ARGB 画像をグレースケールに変換し、3×3 次元のエロージョンマスクを有する画像フィルタを計算する。
         </summary>
         <param name="OriginalImage">Orignal ARGB 画像</param>
         <returns>フィルタリングされた画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImageErosionFilterGS(System.Drawing.Bitmap,System.Int32)">
         <summary>
            ルミナンス法を用いて ARGB 画像をグレースケールに変換し、所定サイズのエロージョンマスクを用いて画像フィルタを計算する。
         </summary>
         <param name="OriginalImage">Orignal ARGB 画像</param>
         <param name="size">エロージョンマスク寸法</param>
         <returns>フィルタリングされた画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImageDilatationFilterGS(System.Drawing.Bitmap)">
         <summary>
            ルミナンス法を用いて ARGB 画像をグレースケールに変換し、3×3 次元の拡張マスクを用いて画像フィルタを計算する。
         </summary>
         <param name="OriginalImage">Orignal ARGB 画像</param>
         <returns>フィルタリングされた画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImageDilatationFilterGS(System.Drawing.Bitmap,System.Int32)">
         <summary>
            ルミナンス法を使用して ARGB 画像をグレースケールに変換し、指定されたサイズの拡張マスクで画像フィルタを計算します。
         </summary>
         <param name="OriginalImage">Orignal ARGB 画像</param>
         <param name="size">ダイレーションマスク寸法</param>
         <returns>フィルタリングされた画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImageSDROMFilterGS(System.Drawing.Bitmap)">
         <summary>
            輝度法を使用して ARGB 画像をグレースケールに変換し、サイズ 3 の SD-ROM マスクを使用して画像フィルタを計算します。
         </summary>
         <param name="OriginalImage">Orignal ARGB 画像</param>
         <returns>フィルタリングされた画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImageSDROMFilterGS(System.Drawing.Bitmap,System.Int32,System.Int32[])">
         <summary>
            輝度法を使用して ARGB 画像をグレースケールに変換し、所定のサイズの SD-ROM マスクで画像フィルタを計算します。
         </summary>
         <param name="OriginalImage">Orignal ARGB 画像</param>
         <param name="size">SD-ROM マスクサイズ</param>
         <param name="thresholds">しきい値の配列</param>
         <returns>フィルタリングされた画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImageSDROMFilterColor(System.Drawing.Bitmap)">
         <summary>
            サイズ 3 の SD-ROM マスクで画像フィルタを計算します。
         </summary>
         <param name="OriginalImage">Orignal ARGB 画像</param>
         <returns>フィルタリングされた画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImageSDROMFilterColor(System.Drawing.Bitmap,System.Int32,System.Int32[])">
         <summary>
            指定されたサイズの SD-ROM マスクで画像フィルタを計算します。
         </summary>
         <param name="OriginalImage">Orignal ARGB 画像</param>
         <param name="size">SD-ROM マスクサイズ</param>
         <param name="thresholds">しきい値の配列</param>
         <returns>フィルタリングされた画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImageOpenGS(System.Drawing.Bitmap)">
         <summary>
            グレースケール変換と 3x3 要素で開く画像
         </summary>
         <param name="OriginalImage">Orignal ARGB 画像</param>
         <returns>開放操作の結果</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImageOpenGS(System.Drawing.Bitmap,System.Int32)">
         <summary>
            指定されたサイズの要素でグレースケールの変換と開くイメージ
         </summary>
         <param name="OriginalImage">Orignal ARGB 画像</param>
         <param name="size">オープニング要素のサイズ</param>
         <returns>開放操作の結果</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImageCloseGS(System.Drawing.Bitmap)">
         <summary>
            グレースケール変換と 3x3 要素によるクロージングの画像
         </summary>
         <param name="OriginalImage">Orignal ARGB 画像</param>
         <returns>終了操作の結果</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImageCloseGS(System.Drawing.Bitmap,System.Int32)">
         <summary>
            指定されたサイズの要素でグレースケールの変換と開くイメージ
         </summary>
         <param name="OriginalImage">Orignal ARGB 画像</param>
         <param name="size">オープニング要素のサイズ</param>
         <returns>開放操作の結果</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ColorFiltration(System.Drawing.Bitmap,System.String)">
         <summary>
            定義されたカラーフィルタによるイメージカラーフィルタリング
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <param name="color">カラーフィルタ。使用可能なカラーフィルタは、マゼンタ、イエロー、シアン、マゼンタ - イエロー、シアン - マゼンタ、イエロー - シアン</param>
         <returns>色ろ過の結果</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.GammaCorrection(System.Drawing.Bitmap,System.Double)">
         <summary>
            イメージをグレースケールに変換し、ガンマ補正を実行します。
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <param name="Gamma">ガンマ補正係数</param>
         <returns>ガンマ補正画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.GammaCorrectionGS(System.Drawing.Bitmap,System.Double)">
         <summary>
            ガンマ補正
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <param name="Gamma">ガンマ補正係数</param>
         <returns>ガンマ補正画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.Sepia(System.Drawing.Bitmap,System.Double)">
         <summary>
            セピア濾過
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <param name="Coef">セピアレベル</param>
         <returns>セピア画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ColorAccent(System.Drawing.Bitmap,System.Double,System.Double)">
         <summary>
            カラーアクセントフィルター
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <param name="h">アクセントカラーの色相</param>
         <param name="range">受け入れの範囲</param>
         <returns>カラーアクセントフィルター</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImageKuwaharaFilterGS(System.Drawing.Bitmap,System.Int32)">
         <summary>
            グレースケール変換とクワハラろ過画像
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <param name="FilterSize">桑原フィルターサイズ</param>
         <returns>フィルタリングされた画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.ImageKuwaharaFilterColor(System.Drawing.Bitmap,System.Int32)">
         <summary>
            桑原ろ過
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <param name="FilterSize">桑原フィルターサイズ</param>
         <returns>フィルタリングされた画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.TiltShift(System.Drawing.Bitmap)">
         <summary>
            チルトシフト濾過
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>チルトシフト画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.Blurring(System.Drawing.Bitmap,System.Int32,System.Int32,System.Double)">
         <summary>
            イメージブラーリング
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <param name="X">水平座標</param>
         <param name="Y">垂直座標</param>
         <param name="r">シャープ領域半径</param>
         <returns>ぼやけた画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.OilPaint(System.Drawing.Bitmap,System.Int32,System.Int32)">
         <summary>
            オイルペイント濾過
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <param name="R">オイルペイントアルゴリズムの半径</param>
         <param name="Level">使用可能なレベルの強度</param>
         <returns>オイル塗料のろ過画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.Cartoon(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32)">
         <summary>
            オイルペイントアルゴリズムとソーベルエッジ検出を組み合わせて漫画効果を受信
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <param name="R">オイルペイントアルゴリズムの半径</param>
         <param name="Level">使用可能なレベルの強度</param>
         <param name="InverseThreshold">逆しきい値</param>
         <returns>漫画の効果の結果</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.SketchCharcoal(System.Drawing.Bitmap)">
         <summary>
            マスクサイズ 5 のメジアンフィルタと、ソーベルエッジ検出、点 80 の画像反転を組み合わせた木炭スケッチ効果
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>スケッチ効果画像</returns>
      </member>
      <member name="M:LitDev.Engines.FIP.Sketch(System.Drawing.Bitmap)">
         <summary>
            ポイント 35 の反転を伴うラプラスエッジ検出、白黒変換、および SDROM フィルタを組み合わせて受信したペンスケッチ効果で、小さなアーチファクトを排除します
         </summary>
         <param name="OriginalImage">元の ARGB 画像</param>
         <returns>スケッチ効果画像</returns>
      </member>
      <member name="T:LitDev.Engines.Capture">
         <summary>MainForm のサマリーの説明。</summary>
      </member>
      <member name="F:LitDev.Engines.Capture.m_FilterGraph">
         <summary>グラフビルダインタフェース。</summary>
      </member>
      <member name="F:LitDev.Engines.Capture.m_PictureReady">
         <summary>非同期ジョブが完了するのを待つことができます</summary>
      </member>
      <member name="F:LitDev.Engines.Capture.m_bGotOne">
         <summary>イメージをキャプチャするときに非同期ルーチンによって設定される</summary>
      </member>
      <member name="F:LitDev.Engines.Capture.m_bRunning">
         <summary>グラフの状態を示します。</summary>
      </member>
      <member name="F:LitDev.Engines.Capture.m_handle">
         <summary>コンストラクタで 1 回計算された画像の寸法。</summary>
      </member>
      <member name="M:LitDev.Engines.Capture.#ctor">
         <summary>キャプチャデバイスのゼロ、デフォルトのフレームレートとサイズを使用する</summary>
      </member>
      <member name="M:LitDev.Engines.Capture.#ctor(System.Int32)">
         <summary>指定されたキャプチャデバイス、デフォルトのフレームレートとサイズを使用する</summary>
      </member>
      <member name="M:LitDev.Engines.Capture.#ctor(System.Int32,System.Int32)">
         <summary>指定されたキャプチャデバイス、指定されたフレームレート、およびデフォルトサイズを使用する</summary>
      </member>
      <member name="M:LitDev.Engines.Capture.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
         <summary>指定されたキャプチャデバイス、指定されたフレームレートとサイズを使用する</summary>
      </member>
      <member name="M:LitDev.Engines.Capture.Dispose">
         <summary>すべてをリリースする。</summary>
      </member>
      <member name="M:LitDev.Engines.Capture.GetBitMap">
         <summary>次の画像をキャプチャする</summary>
      </member>
      <member name="M:LitDev.Engines.Capture.SetupGraph(DirectShowLib.DsDevice,System.Int32,System.Int32,System.Int32)">
         <summary>グラバー用のキャプチャグラフを作成します。</summary>
      </member>
      <member name="M:LitDev.Engines.Capture.CloseInterfaces">
         <summary>キャプチャをシャットダウンする</summary>
      </member>
      <member name="T:LitDev.Engines.Defines">
         <summary>
            クラス IowKitFunctions は IowKit.dll の機能をカプセル化し、
            クラス IowKitDefines が Iowkit.dll の定数をカプセル化します。
         </summary>
      </member>
      <member name="M:LitDev.Engines.Functions.IowKitOpenDevice">
         <summary>
            メソッド IowKitOpenDevice が戻ってすべての USB デバイスを認識 IO-Warrior
            を開き、最初に見つかった IO-Warrior へのハンドルを提供。
         </summary>
         <returns>IO-Warrior に処理するか、失敗した場合にはゼロ。</returns>
      </member>
      <member name="M:LitDev.Engines.Functions.IowKitCloseDevice(System.IntPtr)">
         <summary>
            メソッド IowKitCloseDevice は
            所与のハンドルによって制御される IO-Warrior を閉じる。
         </summary>
         <param name="IowHandle">IO-Warrior への有効なハンドル。</param>
      </member>
      <member name="M:LitDev.Engines.Functions.IowKitGetProductId(System.IntPtr)">
         <summary>
            与えられたハンドルによって制御される IO-Warrior チップのプロダクト ID（PID）
            を取得する。
         </summary>
         <param name="IowHandle">IO-Warrior への有効なハンドル。</param>
      </member>
      <member name="M:LitDev.Engines.Functions.IowKitGetNumDevs">
         <summary>
            IO-Warrior チップの USB コネクタの数を取得します。
         </summary>
         <returns>
         </returns>
      </member>
      <member name="M:LitDev.Engines.Functions.IowKitGetDeviceHandle(System.UInt32)">
         <summary>
            メソッド IowKitGetDeviceHandle が有効なハンドル
            指定された番号をデバイスに供給を動作します。しかし、番号でデバイス
            が存在することを確認してください。IowKitGetDeviceHandle だけ
            IowKitDeviceOpen の成功コール
            後に動作します。だけにして、すべてのブロックが番号が付けられます。
         </summary>
         <param name="numDevice">デバイスの数が開かれます。</param>
         <returns>有効なデバイスへのハンドルまたは失敗した場合に 0。</returns>
      </member>
      <member name="M:LitDev.Engines.Functions.IowKitGetRevision(System.IntPtr)">
         <summary>
            バック IoWarrior 会社の財のバージョンを返します。
            上位 2 つのバイトは常に 0。
            4 桁の 16 進数の有効なあります。現在のソフトウェアバージョン 1.0.2.1 は 0x1021
            返された場合。シリアル番号を持っていないリモートの年齢 IO-Warrior、バック小さいバージョン番号 1.0.1.0 を。
         </summary>
         <param name="IowHandle">IO-Warrior への有効なハンドル。</param>
         <returns>IO-Warrior のソフトウェアバージョンまたは 0。</returns>
      </member>
      <member name="M:LitDev.Engines.Functions.IowKitGetSerialNumber(System.IntPtr,System.Text.StringBuilder)">
         <summary>
            IO-Warrior の有効なハンドルで制御されるシリアル番号を読み取ります。
         </summary>
         <param name="IowHandle">IO-Warrior への有効なハンドル。</param>
         <param name="SnTarget">
            対象のシリアル番号が。文字列ビルダを
            というデータフィールドに
            参照がインスタンス化されている必要があります。
         </param>
         <returns>
            "True"、シリアル番号が正しく指定されたデータフィールドに格納
            することができれば。ハンドルが無効だった場合、IO-Warrior は、"False" のシリアル番号を
            ないか、指定されたターゲット内の数字は失敗し保存しています。
         </returns>
      </member>
      <member name="M:LitDev.Engines.Functions.IowKitRead(System.IntPtr,System.UInt32,System.Byte[],System.UInt32)">
         <summary>
            は IO-Warrior からデータを読み込みます。ブロックによって IO-Warrior の入力における変化が regisriert。非ブロッキング
            はれるまでスレッドを呼び出す機能ブロックは
            は IowKitReadNonBlocking を呼び出すことによって行うことができる READ（）。
            データは、報告書の形で到着します。レポートの詳細な説明は、それぞれの IO-Warrior のデータシートに見つけること
            れる。
         </summary>
         <param name="IowHandle">IO-Warrior への有効なハンドル。</param>
         <param name="numPipe">
            データチャネルはから読み取ることができます。0 から
            IOWKIT_MAX_PIPES-1
            の範囲。
         </param>
         <param name="buffer">データを格納するためのターゲット。</param>
         <param name="Length">読み込むバイト数。</param>
         <returns>数は、実際に失敗した場合にバイトまたは 0 を刈り取りました。</returns>
      </member>
      <member name="M:LitDev.Engines.Functions.IowKitReadNonBlocking(System.IntPtr,System.UInt32,System.Byte[],System.UInt32)">
         <summary>
            は IO-Warrior からデータを読み込みます。呼び出し元のスレッドが
            、使用可能なデータがないとき、ブロックされていないため、
            IO-Warrior の入力では変更されていない。
         </summary>
         <param name="IowHandle">IO-Warrior への有効なハンドル。</param>
         <param name="numPipe">
            データチャネルはから読み取ることができます。0 から
            IOWKIT_MAX_PIPES-1
            の範囲。
         </param>
         <param name="buffer">データを格納するためのターゲット。</param>
         <param name="Length">読み込むバイト数。</param>
         <returns>数は、実際に失敗した場合にバイトまたは 0 を刈り取りました。</returns>
      </member>
      <member name="M:LitDev.Engines.Functions.IowKitReadImmediate(System.IntPtr,System.Byte[])">
         <summary>
            直接の接続された IO-Warrior の入力端子の状態を読み込み。ピンの変化が前
            ブロックによって登録された場合、関数が True を返す。
            同時に入力の画像が !! ターゲット・データ・フィールドの値
            注意として入手可能です。この機能は、IO-Warrior 56 で動作しません。
            ブロック以上 32 ビットバック
            あります。
         </summary>
         <param name="IowHandle">IO-Warrior への有効なハンドル。</param>
         <param name="IoPinStatus">端子の状態を格納するためのターゲット・データ・フィールド。</param>
         <returns>
            新しいデータが収集されていないか、渡されたハンドルが動作していない
            された場合、
            成功した場合は True False の。
         </returns>
      </member>
      <member name="M:LitDev.Engines.Functions.IowKitSetTimeout(System.IntPtr,System.UInt32)">
         <summary>
            しっかりと IO-Warrior へのアクセスを読んでいる間にタイムアウトの制限を設定します。
            現在進行中の間にタイムアウトを、
            まだ終わっ読んアクションは、データの損失を
            につながる（レポートは失われます）。データは
            与えられた制限内に IO-Warrior で読み取ることができない場合 IowKitRead（）が失敗します。すべてのアクションが時間
            に既に送ったが、再びまだ実行されていないする必要があります前にタイマーが切れると
            （例えば I2C バスライト
            または読み取り）に送信されます。
         </summary>
         <param name="IowHandle">IO-Warrior への有効なハンドル。</param>
         <param name="Timeout">
            限度。
            iowkit.dll 説明で推奨さ 1000 ミリ秒以上。
         </param>
         <returns>成功した場合に TRUE を、失敗した場合には false。</returns>
      </member>
      <member name="M:LitDev.Engines.Functions.IowKitSetWriteTimeout(System.IntPtr,System.UInt32)">
         <summary>
            が IowKitWrite を。
            IO-Warrior への書き込みアクセス中にタイムアウトに固定限界を示すデータが所定の制限
            内に書き込むことができない場合に失敗します。タイプミスは非定型です。近くに接続し、ハードウェアをチェックし、
            エラーが発生したとき。
         </summary>
         <param name="IowHandle">IO-Warrior への有効なハンドル。</param>
         <param name="Timeout">
            限度。
            iowkit.dll 説明で推奨さ 1000 ミリ秒以上。
         </param>
         <returns>成功した場合に TRUE を、失敗した場合には false。</returns>
      </member>
      <member name="M:LitDev.Engines.Functions.IowKitCancelIo(System.IntPtr,System.UInt32)">
         <summary>
            は、が現在 IowKitRead を（）beipsielsweise ので、一般的に別のスレッドを必要とするこの方法の使用
            指定されたデータ・チャンネル（管）の上のすべての進行中のデータ転送動作を終了します
            が戻るまで受信することができます。
         </summary>
         <param name="IowHandle">IO-Warrior への有効なハンドル。</param>
         <param name="numPipe">データチャネルの数。</param>
         <returns>成功した場合は true、それ以外の場合は false。</returns>
      </member>
      <member name="M:LitDev.Engines.Functions.IowKitWrite(System.IntPtr,System.UInt32,System.Byte[],System.UInt32)">
         <summary>
            "length"（長さ）を書き込みバイトは IO-Warrior の "numPipe" データチャネルで示す方向に
            される。有効なレポート以外は、バイトの適切な数とから
            からなります選択されたデータチャネルが送信されたレポート ID が
            機能を失敗し受け入れた。
         </summary>
         <param name="IowHandle">IO-Warrior への有効なハンドル。</param>
         <param name="numPipe">データチャネルがロードされます。</param>
         <param name="buffer">バッファは、データが書き込まれるように、調製します。</param>
         <param name="length">書き込まれるバイト数。</param>
         <returns>、番号が書かれている。</returns>
      </member>
      <member name="M:LitDev.Engines.Functions.IowKitGetThreadHandle(System.IntPtr)">
         <summary>
            は IO-Warrior の I/O ピンを読み取るために使用されるスレッドのハンドルを返します。Linux は IO
            戦士の機能を実行するために Keie スレッドを使用して常にため、0
            を統合しています。
         </summary>
         <param name="IowHandle">IO-Warrior への有効なハンドル。</param>
         <returns>現在のスレッドに処理するか、または失敗の 0。</returns>
      </member>
      <member name="M:LitDev.Engines.Functions.IowKitVersion">
         <summary>
            バック iowkit.dll 文字列のバージョンを返します。
         </summary>
         <returns>バージョン番号を文字列。</returns>
      </member>
      <member name="M:LitDev.Engines.Functions.IowKitSetLegacyOpenMode(System.UInt32)">
         <summary>
            は、そのファームウェアのリビジョンは 1.0.1.0 古い IOWarrior40 を開きます。この
            ブロックを読み取ることができるシリアル番号を持っていません。
         </summary>
         <param name="legacyOpenMode">単純または複雑なモード。</param>
         <returns>true と false そうでない場合は成功しました。</returns>
      </member>
      <member name="M:LitDev.Engines.Functions.GetLastError">
         <summary>カーネルによって登録された最新のエラーを返します。</summary>
         <returns>エラーがある場合は、0 に等しくない数値を指定します。</returns>
      </member>
      <member name="F:LitDev.Engines.HIDDevice.m_oFile">
         <summary>読み書きに使用できるファイルストリーム</summary>
      </member>
      <member name="F:LitDev.Engines.HIDDevice.m_nInputReportLength">
         <summary>入力レポートの長さ：</summary>
      </member>
      <member name="F:LitDev.Engines.HIDDevice.m_nOutputReportLength">
         <summary>出力レポートの長さ：デバイスが私たちにこれを与える</summary>
      </member>
      <member name="F:LitDev.Engines.HIDDevice.m_hHandle">
         <summary>デバイスのハンドル</summary>
      </member>
      <member name="M:LitDev.Engines.HIDDevice.Dispose">
         <summary>
            メソッドを破棄する
         </summary>
      </member>
      <member name="M:LitDev.Engines.HIDDevice.Dispose(System.Boolean)">
         <summary>
            ディスポーザルは、処分とファイナライズの両方を呼びます
         </summary>
         <param name="bDisposing">処理する場合は true</param>
      </member>
      <member name="M:LitDev.Engines.HIDDevice.Initialise(System.String)">
         <summary>
            デバイスを初期化する
         </summary>
         <param name="strPath">デバイスへのパス</param>
      </member>
      <member name="M:LitDev.Engines.HIDDevice.BeginAsyncRead">
         <summary>
            非同期読み取りを開始します。この読み取りは、データの読み取り時またはデバイス
            切断されます。コールバックを使用します。
         </summary>
      </member>
      <member name="M:LitDev.Engines.HIDDevice.ReadCompleted(System.IAsyncResult)">
         <summary>
            上記のコールバック。非同期読み取りからのバックグラウンドスレッドで呼び出されるので、これで気をつけてください
         </summary>
         <param name="iResult">非同期結果パラメータ</param>
      </member>
      <member name="M:LitDev.Engines.HIDDevice.Write(LitDev.Engines.OutputReport)">
         <summary>
            出力レポートをデバイスに書き込みます。
         </summary>
         <param name="oOutRep">書き込むレポートを出力する</param>
      </member>
      <member name="M:LitDev.Engines.HIDDevice.HandleDataReceived(LitDev.Engines.InputReport)">
         <summary>
            データが受信されたときに実行されるアクションの仮想ハンドラ。オーバーライドして使用する。
         </summary>
         <param name="oInRep">受け取った入力レポート</param>
      </member>
      <member name="M:LitDev.Engines.HIDDevice.HandleDeviceRemoved">
         <summary>
            デバイスが削除されたときに実行されるアクションの仮想ハンドラ。オーバーライドして使用する。
         </summary>
      </member>
      <member name="M:LitDev.Engines.HIDDevice.GetDevicePath(System.IntPtr,LitDev.Engines.Win32Usb.DeviceInterfaceData@)">
         <summary>
            DeviceInterfaceData 構造体と InfoSet ハンドルを指定して、デバイスパスを返すヘルパーメソッド。
            'FindDevice' で使用されるので、そのメソッドをチェックして、InfoSet ハンドルと DeviceInterfaceData を取得する方法を確認してください。
         </summary>
         <param name="hInfoSet">インフォセットへのハンドル</param>
         <param name="oInterface">DeviceInterfaceData 構造体</param>
         <returns>デバイスパスまたは問題があった場合は null</returns>
      </member>
      <member name="M:LitDev.Engines.HIDDevice.FindDevice(System.Int32,System.Int32,System.Type)">
         <summary>
            PID と VID が与えられたデバイスを検索します。
         </summary>
         <param name="nVid">デバイスのベンダー ID（VID）</param>
         <param name="nPid">デバイスの製品 ID（PID）</param>
         <param name="oType">作成するデバイスクラスのタイプ</param>
         <returns>指定された型または null の新しいデバイスクラス</returns>
      </member>
      <member name="M:LitDev.Engines.HIDDevice.CreateInputReport">
         <summary>
            このデバイスの入力レポートを作成する仮想メソッド。オーバーライドして使用する。
         </summary>
         <returns>光る新しい入力レポート</returns>
      </member>
      <member name="P:LitDev.Engines.HIDDevice.OutputReportLength">
         <summary>
            出力レポート長のアクセサ
         </summary>
      </member>
      <member name="P:LitDev.Engines.HIDDevice.InputReportLength">
         <summary>
            入力レポート長のアクセサ
         </summary>
      </member>
      <member name="E:LitDev.Engines.HIDDevice.OnDeviceRemoved">
         <summary>
            デバイスが削除されたときに呼び出されるイベントハンドラ
         </summary>
      </member>
      <member name="F:LitDev.Engines.Report.m_arrBuffer">
         <summary>生レポートバイト用のバッファ</summary>
      </member>
      <member name="F:LitDev.Engines.Report.m_nLength">
         <summary>レポートの長さ</summary>
      </member>
      <member name="M:LitDev.Engines.Report.#ctor(LitDev.Engines.HIDDevice)">
         <summary>
            コンストラクタ
         </summary>
         <param name="oDev">デバイスの構築</param>
      </member>
      <member name="M:LitDev.Engines.Report.SetBuffer(System.Byte[])">
         <summary>
            生のバイト配列を設定します。
         </summary>
         <param name="arrBytes">生レポートバイト</param>
      </member>
      <member name="P:LitDev.Engines.Report.Buffer">
         <summary>
            生のバイトバッファ用のアクセサ
         </summary>
      </member>
      <member name="P:LitDev.Engines.Report.BufferLength">
         <summary>
            バッファ長のアクセサ
         </summary>
      </member>
      <member name="M:LitDev.Engines.OutputReport.#ctor(LitDev.Engines.HIDDevice)">
         <summary>
            建設。デバイスによって指示された正しい出力レポートの長さでバッファを設定する
         </summary>
         <param name="oDev">デバイスの作成</param>
      </member>
      <member name="M:LitDev.Engines.InputReport.#ctor(LitDev.Engines.HIDDevice)">
         <summary>
            建設。何もしない
         </summary>
         <param name="oDev">デバイスの作成</param>
      </member>
      <member name="M:LitDev.Engines.InputReport.SetData(System.Byte[])">
         <summary>
            生の入力レポートを与えられたバッファを設定するには、これを呼び出します。オーバーライド可能なメソッドを呼び出す
            自動的にバイトを意味構造に構文解析する必要があります。
         </summary>
         <param name="arrData">生の入力レポート。</param>
      </member>
      <member name="M:LitDev.Engines.InputReport.ProcessData">
         <summary>
            これをオーバーライドして、入力レポートを有用なものに処理します
         </summary>
      </member>
      <member name="F:LitDev.Engines.Win32Usb.WM_DEVICECHANGE">
         <summary>デバイスが挿入または削除されたときに送信される Windows メッセージ</summary>
      </member>
      <member name="F:LitDev.Engines.Win32Usb.DEVICE_ARRIVAL">
         <summary>上記の WParam：デバイスが挿入されました</summary>
      </member>
      <member name="F:LitDev.Engines.Win32Usb.DEVICE_REMOVECOMPLETE">
         <summary>上記の WParam：デバイスが削除されました</summary>
      </member>
      <member name="F:LitDev.Engines.Win32Usb.DIGCF_PRESENT">
         <summary>システムに存在するデバイスを取得するために SetupDiClassDevs で使用されます。</summary>
      </member>
      <member name="F:LitDev.Engines.Win32Usb.DIGCF_DEVICEINTERFACE">
         <summary>SetupDiClassDevs でデバイスインターフェイスの詳細を取得するために使用されます</summary>
      </member>
      <member name="F:LitDev.Engines.Win32Usb.DEVTYP_DEVICEINTERFACE">
         <summary>デバイスの挿入 / 削除メッセージの登録時に使用されます。デバイスのタイプを指定します。</summary>
      </member>
      <member name="F:LitDev.Engines.Win32Usb.DEVICE_NOTIFY_WINDOW_HANDLE">
         <summary>デバイスの挿入 / 削除メッセージを登録するときに使用されます。API 呼び出しにウィンドウハンドルを渡します</summary>
      </member>
      <member name="F:LitDev.Engines.Win32Usb.PURGE_TXABORT">
         <summary>現在の送信を中止することによって Win32 送信バッファをパージします。</summary>
      </member>
      <member name="F:LitDev.Engines.Win32Usb.PURGE_RXABORT">
         <summary>現在の受信を中止することによって Win32 受信バッファをパージします。</summary>
      </member>
      <member name="F:LitDev.Engines.Win32Usb.PURGE_TXCLEAR">
         <summary>Win32 送信バッファをクリアすることによってそれをパージします。</summary>
      </member>
      <member name="F:LitDev.Engines.Win32Usb.PURGE_RXCLEAR">
         <summary>Win32 受信バッファを消去してパージします。</summary>
      </member>
      <member name="F:LitDev.Engines.Win32Usb.GENERIC_READ">
         <summary>CreateFile：読み込み用のファイルを開く</summary>
      </member>
      <member name="F:LitDev.Engines.Win32Usb.GENERIC_WRITE">
         <summary>CreateFile：書き込み用のファイルを開く</summary>
      </member>
      <member name="F:LitDev.Engines.Win32Usb.FILE_FLAG_OVERLAPPED">
         <summary>CreateFile：重複した操作のハンドルを開く</summary>
      </member>
      <member name="F:LitDev.Engines.Win32Usb.OPEN_EXISTING">
         <summary>CreateFile："created"（作成する）リソースが存在する必要があります</summary>
      </member>
      <member name="F:LitDev.Engines.Win32Usb.ERROR_IO_PENDING">
         <summary>ReadFile / WriteFile：重複した操作が不完全です。</summary>
      </member>
      <member name="F:LitDev.Engines.Win32Usb.INFINITE">
         <summary>無限のタイムアウト</summary>
      </member>
      <member name="F:LitDev.Engines.Win32Usb.NullHandle">
         <summary>null ハンドルの単純な表現：閉じたストリームはこのハンドルを取得します。それは上位クラスの比較のために公開されていることに注意してください。</summary>
      </member>
      <member name="F:LitDev.Engines.Win32Usb.InvalidHandleValue">
         <summary>CreateFile が失敗したときに返されるハンドルの単純な表現。</summary>
      </member>
      <member name="M:LitDev.Engines.Win32Usb.HidD_GetHidGuid(System.Guid@)">
         <summary>
            Windows が HID クラスデバイスを表すために使用する GUID を取得します。
         </summary>
         <param name="gHid">Guid を取得するための out パラメータ</param>
      </member>
      <member name="M:LitDev.Engines.Win32Usb.SetupDiGetClassDevs(System.Guid@,System.String,System.IntPtr,System.UInt32)">
         <summary>
            デバイスの詳細を含む Windows 内のインフォセットメモリブロックを割り当てます。
         </summary>
         <param name="gClass">クラス guid（例：HID guid）</param>
         <param name="strEnumerator">使用されていない</param>
         <param name="hParent">使用されていない</param>
         <param name="nFlags">必要なデバイスのタイプのタイプ（DIGCF_ 定数）</param>
         <returns>インフォセットへの参照</returns>
      </member>
      <member name="M:LitDev.Engines.Win32Usb.SetupDiDestroyDeviceInfoList(System.IntPtr)">
         <summary>
            上記の呼び出しで割り当てられた InfoSet を解放します。
         </summary>
         <param name="lpInfoSet">インフォセットへの参照</param>
         <returns>成功した場合は true</returns>
      </member>
      <member name="M:LitDev.Engines.Win32Usb.SetupDiEnumDeviceInterfaces(System.IntPtr,System.IntPtr,System.Guid@,System.UInt32,LitDev.Engines.Win32Usb.DeviceInterfaceData@)">
         <summary>
            インフォセットからデバイスの DeviceInterfaceData を取得します。
         </summary>
         <param name="lpDeviceInfoSet">アクセスするインフォセット</param>
         <param name="pDeviceInfoData">使用されていない</param>
         <param name="gClass">デバイスクラス GUID</param>
         <param name="nIndex">デバイスのインフォセットへのインデックス登録</param>
         <param name="oInterfaceData">データで満たすための DeviceInterfaceData</param>
         <returns>成功した場合は true を返し、そうでない場合は false を返します（たとえば、インフォセットの最後にインデックスが渡された場合）</returns>
      </member>
      <member name="M:LitDev.Engines.Win32Usb.SetupDiGetDeviceInterfaceDetail(System.IntPtr,LitDev.Engines.Win32Usb.DeviceInterfaceData@,System.IntPtr,System.UInt32,System.UInt32@,LitDev.Engines.Win32Usb.DeviceInfoData@)">
         <summary>
            SetupDiGetDeviceInterfaceDetail  - これらの 2 つは、若干異なる場合に一緒に使用されるためオーバーロードされます
            方法とパラメータには異なる意味があります。
            DeviceInterfaceData からインターフェイスの詳細を取得します。これはデバイスのパスとほぼ同じです。
            これを 2 回呼びます。送信する必要がある構造体のサイズを取得するには（nDeviceInterfaceDetailDataSize = 0）
            必要なスペースを割り当てたときに再び表示されます。
         </summary>
         <param name="lpDeviceInfoSet">アクセスするインフォセット</param>
         <param name="oInterfaceData">使用する DeviceInterfaceData</param>
         <param name="lpDeviceInterfaceDetailData">データで満たすための DeviceInterfaceDetailData</param>
         <param name="nDeviceInterfaceDetailDataSize">上記のサイズ</param>
         <param name="nRequiredSize">上記の場合の必要サイズはゼロに設定されます</param>
         <param name="lpDeviceInfoData">使用されていない</param>
         <returns>
         </returns>
      </member>
      <member name="M:LitDev.Engines.Win32Usb.RegisterDeviceNotification(System.IntPtr,LitDev.Engines.Win32Usb.DeviceBroadcastInterface,System.UInt32)">
         <summary>
            デバイスの挿入 / 削除用のウィンドウを登録します。
         </summary>
         <param name="hwnd">メッセージを受け取るウィンドウのハンドル</param>
         <param name="oInterface">DeviceBroadcastInterrface 構造体</param>
         <param name="nFlags">DEVICE_NOTIFY_WINDOW_HANDLE に設定</param>
         <returns>登録を解除するときに使用されるハンドル</returns>
      </member>
      <member name="M:LitDev.Engines.Win32Usb.UnregisterDeviceNotification(System.IntPtr)">
         <summary>
            上から登録を解除する。
         </summary>
         <param name="hHandle">RegisterDeviceNotification の呼び出しで返されたハンドル</param>
         <returns>成功すれば真</returns>
      </member>
      <member name="M:LitDev.Engines.Win32Usb.HidD_GetPreparsedData(System.IntPtr,System.IntPtr@)">
         <summary>
            開いているデバイスから詳細を取得します。解放されなければならないメモリブロックを予約します。
         </summary>
         <param name="hFile">デバイスファイルハンドル</param>
         <param name="lpData">準備されたデータブロックへの参照</param>
         <returns>
         </returns>
      </member>
      <member name="M:LitDev.Engines.Win32Usb.HidD_FreePreparsedData(System.IntPtr@)">
         <summary>
            上記のメモリブロックを解放します。
         </summary>
         <param name="pData">GetPreparsedData の呼び出しで返された準備済みデータの参照</param>
         <returns>
         </returns>
      </member>
      <member name="M:LitDev.Engines.Win32Usb.HidP_GetCaps(System.IntPtr,LitDev.Engines.Win32Usb.HidCaps@)">
         <summary>
            準備されたデータからデバイスの機能を取得します。
         </summary>
         <param name="lpData">準備されたデータ参照</param>
         <param name="oCaps">機能を受け取る HidCaps 構造</param>
         <returns>成功した場合は true</returns>
      </member>
      <member name="M:LitDev.Engines.Win32Usb.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
         <summary>
            ファイル、シリアルポート、USB デバイスなどを作成または開く
         </summary>
         <param name="strName">開くオブジェクトへのパス</param>
         <param name="nAccess">アクセスモード。例えば読み書き</param>
         <param name="nShareMode">共有モード</param>
         <param name="lpSecurity">セキュリティの詳細（null でもかまいません）</param>
         <param name="nCreationFlags">ファイルを作成するか、開くかを指定します。</param>
         <param name="nAttributes">余分な属性はありますか？例えば開いている</param>
         <param name="lpTemplate">使用されていない</param>
         <returns>
         </returns>
      </member>
      <member name="M:LitDev.Engines.Win32Usb.CloseHandle(System.IntPtr)">
         <summary>
            ウィンドウハンドルを閉じます。ファイルハンドル、イベントハンドル、ミューテックスハンドルなど
         </summary>
         <param name="hFile">ハンドルを閉じる</param>
         <returns>成功した場合は true。</returns>
      </member>
      <member name="M:LitDev.Engines.Win32Usb.RegisterForUsbEvents(System.IntPtr,System.Guid)">
         <summary>
            デバイスの挿入 / 削除時にウィンドウメッセージを受信するウィンドウを登録します。これを呼び出す必要があります
            フォームのコンストラクタではなく、そのハンドルが作成されたときにフォームから削除されます。フォームの OnHandleCreated オーバーライドを使用します。
         </summary>
         <param name="hWnd">メッセージを受け取るウィンドウへのハンドル</param>
         <param name="gClass">メッセージを取得するデバイスのクラス</param>
         <returns>登録を解除するときに使用されるハンドル</returns>
      </member>
      <member name="M:LitDev.Engines.Win32Usb.UnregisterForUsbEvents(System.IntPtr)">
         <summary>
            通知の登録を解除します。フォームの廃棄に使用できます
         </summary>
         <param name="hHandle">RegisterForUSBEvents から返されたハンドル</param>
         <returns>成功した場合は true</returns>
      </member>
      <member name="P:LitDev.Engines.Win32Usb.HIDGuid">
         <summary>
            HID の GUID を取得するヘルパー。
         </summary>
      </member>
   </members>
</doc>