' Translate Aid J
' Version 1.2.2
' Copyright © 2017 Nonki Takahashi.  The MIT License.
' Last update 2017-06-21

debug = "False"
title = "Translate Aid J 1.2.2"
GraphicsWindow.Title = title
Not = "False=True;True=False;"
CR = Text.GetCharacter(13)
LF = Text.GetCharacter(10)
WQ = Text.GetCharacter(34)
Form()
path[1] = Program.Directory + "\LitDev.xml"
lang = 1  ' en
Open()
path[2] = Program.Directory + "\LitDev.ja.xml"
lang = 2  ' ja
Open()
LDControls.MenuClicked = OnMenuClicked
While "True"
  If menuClicked Then
    lang = 2  ' only for ja
    inner[lang] = Controls.GetTextBoxText(textInner[lang])
    UpdateNode()
    If menu = "Child" Then
      For lang = 1 To 2
        LDxml.Switch(name[lang])
        lvl[lang] = lvl[lang] + 1
        nSib[lang][lvl[lang]] = LDxml.ChildrenCount
        sib[lang][lvl[lang]] = 1
        result[lang] = LDxml.FirstChild()
        ShowNode()
      EndFor
    ElseIf menu = "Literal" Then
      For lang = 1 To 2
        LDxml.Switch(name[lang])
        FirstNode()
      EndFor
      cont = "True"
      While cont
        For lang = 1 To 2
          LDxml.Switch(name[lang])
          FindNext()
          GetLiteral()
        EndFor
        If lvl[2] = 1 Then
          cont = "False"
        Else
          RestoreLiteral()
          lang = 2
          UpdateNode()
        EndIf
      EndWhile
    ElseIf menu = "Next" Then
      For lang = 1 To 2
        LDxml.Switch(name[lang])
        FindNext()
      EndFor
    ElseIf menu = "Parent" Then
      For lang = 1 To 2
        LDxml.Switch(name[lang])
        result[lang] = LDxml.Parent()
        nSib[lang][lvl[lang]] = ""
        sib[lang][lvl[lang]] = ""
        lvl[lang] = lvl[lang] - 1
        ShowNode()
      EndFor
    ElseIf menu = "Prev" Then
      For lang = 1 To 2
        LDxml.Switch(name[lang])
        FindPrev()
      EndFor
    ElseIf menu = "Quote" Then
      lang = 2
      LDxml.Switch(name[lang])
      FirstNode()
      cont = "True"
      While cont
        FindNext()
        If lvl[lang] = 1 Then
          cont = "False"
        Else
          inner[lang] = LDText.Replace(saved[lang], "「", WQ)
          inner[lang] = LDText.Replace(inner[lang], "」", WQ)
          If debug And Text.IsSubText(saved[lang], "「") Then
            TextWindow.WriteLine("saved=" + saved[lang])
            TextWindow.WriteLine("inner=" + inner[lang])
          EndIf
          UpdateNode()
        EndIf
      EndWhile
    ElseIf menu = "Save" Then
      lang = 2
      msg = "Are you sure to save " + path[lang] + "?"
      ans = LDDialogs.Confirm(msg, "Save")
      If ans = "Yes" Then
        LDxml.Switch(name[lang])
        LDxml.Save(path[lang])
      EndIf
    ElseIf menu = "Sibling" Then
      For lang = 1 To 2
        LDxml.Switch(name[lang])
        result[lang] = LDxml.NextSibling()
        If result[lang] = "SUCCESS" Then
          sib[lang][lvl[lang]] = sib[lang][lvl[lang]] + 1
        EndIf
        ShowNode()
      EndFor
    ElseIf menu = "Space" Then
      lang = 2
      LDxml.Switch(name[lang])
      FirstNode()
      cont = "True"
      While cont
        FindNext()
        If lvl[lang] = 1 Then
          cont = "False"
        Else
          WordSpacing()
          UpdateNode()
        EndIf
      EndWhile
    EndIf
    menuClicked = "False"
  Else
    Program.Delay(200)
  EndIf
EndWhile

Sub CheckHalfWidth
  halfWidth = "True"
  For p = 1 To Text.GetLength(word)
    c = Text.GetSubText(word, p, 1)
    code = Text.GetCharacterCode(c)
    If 255 < code Then
      halfWidth = "False"
      p = Text.GetLength(word) + 1 
    EndIf
  EndFor
EndSub

Sub DumpNode
  t = ""
  For l = 1 To lvl[lang]
    If 1 < l Then
      t = Text.Append(t, ".")
    EndIf
    t = Text.Append(t, sib[lang][l])
  EndFor
  TextWindow.WriteLine(t)
EndSub

Sub FindNext
  found = "False"
  If debug Then
    TextWindow.WriteLine(path[lang])
  EndIf
  While Not[found]
    While 0 < n[lang]
      lvl[lang] = lvl[lang] + 1
      nSib[lang][lvl[lang]] = n[lang]
      sib[lang][lvl[lang]] = 1
      If debug Then
        DumpNode()
      EndIf
      result[lang] = LDxml.FirstChild()
      If result[lang] = "SUCCESS" Then
        advance = "True"
        ShowNode()
        If node[lang] = "#text" Then
          found = "True"
        EndIf
      EndIf
    EndWhile
    advance = "False"
    While Not[found] And Not[advance]
      If Not[advance] And (sib[lang][lvl[lang]] < nSib[lang][lvl[lang]]) Then
        result[lang] = LDxml.NextSibling()
        If result[lang] = "SUCCESS" Then
          advance = "True"  ' found next sibling
          sib[lang][lvl[lang]] = sib[lang][lvl[lang]] + 1
          If debug Then
            DumpNode()
          EndIf
          ShowNode()
          If node[lang] = "#text" Then
            found = "True"
          EndIf
        EndIf
      EndIf
      If Not[advance] Then
        result[lang] = LDxml.Parent()
        If result[lang] = "SUCCESS" Then
          nSib[lang][lvl[lang]] = ""
          sib[lang][lvl[lang]] = ""
          lvl[lang] = lvl[lang] - 1
          If debug Then
            DumpNode()
          EndIf
          ShowNode()
        Else
          FirstNode()
          found = "True"    ' end of xml
        EndIf
      EndIf
    EndWhile
  EndWhile
  If debug Then
    TextWindow.WriteLine("found=" + found)
    TextWindow.WriteLine("advance=" + advance)
  EndIf
EndSub

Sub FindPrev
  found = "False"
  If debug Then
    TextWindow.WriteLine(path[lang])
  EndIf
  While Not[found]
    While 0 < n[lang]
      lvl[lang] = lvl[lang] + 1
      nSib[lang][lvl[lang]] = n[lang]
      sib[lang][lvl[lang]] = n[lang]
      If debug Then
        DumpNode()
      EndIf
      result[lang] = LDxml.LastChild()
      If result[lang] = "SUCCESS" Then
        advance = "True"
        ShowNode()
        If node[lang] = "#text" Then
          found = "True"
        EndIf
      EndIf
    EndWhile
    advance = "False"
    While Not[found] And Not[advance]
      If Not[advance] And (1 < nSib[lang][lvl[lang]]) Then
        result[lang] = LDxml.PreviousSibling()
        If result[lang] = "SUCCESS" Then
          advance = "True"  ' found next sibling
          sib[lang][lvl[lang]] = sib[lang][lvl[lang]] - 1
          If debug Then
            DumpNode()
          EndIf
          ShowNode()
          If node[lang] = "#text" Then
            found = "True"
          EndIf
        EndIf
      EndIf
      If Not[advance] Then
        result[lang] = LDxml.Parent()
        If result[lang] = "SUCCESS" Then
          nSib[lang][lvl[lang]] = ""
          sib[lang][lvl[lang]] = ""
          lvl[lang] = lvl[lang] - 1
          If debug Then
            DumpNode()
          EndIf
          ShowNode()
        Else
          FirstNode()
          found = "True"    ' end of xml
        EndIf
      EndIf
    EndWhile
  EndWhile
  If debug Then
    TextWindow.WriteLine("found=" + found)
    TextWindow.WriteLine("advance=" + advance)
  EndIf
EndSub

Sub FirstNode
  lvl[lang] = 1
  nSib[lang][lvl[lang]] = 1
  sib[lang][lvl[lang]] = 1
  result[lang] = LDxml.FirstNode()
  ShowNode()
EndSub

Sub Form
  gw = 598
  gh = 428
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  GraphicsWindow.BackgroundColor = "LightGray"
  GraphicsWindow.BrushColor = "Black"
  
  menuList["File"] = "Main"
  menuList["Save"] = "File"
  menuList["Node"] = "Main"
  menuList["Next"] = "Node"
  menuList["Prev"] = "Node"
  menuList["--"] = "Node"
  menuList["Sibling"] = "Node"
  menuList["Child"] = "Node"
  menuList["Parent"] = "Node"
  menuList["Auto"] = "Main"
  menuList["Quote"] = "Auto"
  menuList["Space"] = "Auto"
  menuList["Literal"] = "Auto"
  LDControls.AddMenu(gw, 20, menuList, "", "")
  yOffset = "1=20;2=210;"
  For lang = 1 To 2
    textName[lang] = Shapes.AddText("")
    Shapes.Move(textName[lang], 10, 10 + yOffset[lang])
    textResult[lang] = Shapes.AddText("")
    Shapes.Move(textResult[lang], 110, 10 + yOffset[lang])
    GraphicsWindow.DrawText(210, 10 + yOffset[lang], "Sibling")
    textSib[lang] = Shapes.AddText("")
    Shapes.Move(textSib[lang], 260, 10 + yOffset[lang])
    GraphicsWindow.DrawText(310, 10 + yOffset[lang], "Child")
    textN[lang] = Shapes.AddText("")
    Shapes.Move(textN[lang], 360, 10 + yOffset[lang])
    textNode[lang] = Controls.AddTextBox(410, 7 + yOffset[lang])
    textInner[lang] = Controls.AddMultiLineTextBox(10, 32 + yOffset[lang])
    Controls.SetSize(textInner[lang], gw - 20, 150)
  EndFor
EndSub

Sub GetFullWidthWord
  pSave = p
  c = Text.GetSubText(saved[lang], p, 1)
  code = Text.GetCharacterCode(c)
  While (256 <= code) Or (code = 10) Or (code = 13)
    p = p + 1
    c = Text.GetSubText(saved[lang], p, 1)
    code = Text.GetCharacterCode(c)
  EndWhile
  afterBracket = "False"
  If 1 < p Then
    c = Text.GetSubText(saved[lang], p - 1, 1)
    If Text.IsSubText("（）［］。？！、：；" + CR + LF, c) Then
      afterBracket = "True"
    EndIf
  EndIf
  word = Text.GetSubText(saved[lang], pSave, p - pSave)
  If 0 < Text.GetLength(word) Then
    afterHalf = "False"
  EndIf
EndSub

Sub GetHalfWidthWord
  word = ""
  SkipSpace()
  c = Text.GetSubText(saved[lang], p, 1)
  If c = WQ Then
    q = Text.GetIndexOf(Text.GetSubTextToEnd(saved[lang], p + 1), WQ)
    word = Text.GetSubText(saved[lang], p, q + 1)
    p = p + q + 1
    c = Text.GetSubText(saved[lang], p, 1)
  Else
    code = Text.GetCharacterCode(c)
    While (code < 256) And (code <> 10) And (code <> 13) And (code <> 34) And (code <> 0)
      word = Text.Append(word, c)
      p = p + 1
      c = Text.GetSubText(saved[lang], p, 1)
      code = Text.GetCharacterCode(c)
    EndWhile
  EndIf
  If Text.IsSubText("（）［］、。？！：；" + CR + LF, c) Or (c = "") Then
    beforeBracket = "True"
  Else
    beforeBracket = "False"
  EndIf
  word = LDText.Trim(word)
  If 0 < Text.GetLength(word) Then
    afterHalf = "True"
  Else
    beforeBracket = "True"
  EndIf
EndSub

Sub GetLiteral
  literal[lang] = ""
  i = 0
  p = 1
  len = Text.GetLength(saved[lang])
  SkipSpace()
  While p <= len
    ' find open double quote
    q = Text.GetIndexOf(Text.GetSubTextToEnd(saved[lang], p), WQ)
    If q = 0 Then
      ' not found
      p = len + 1 ' exit While
    Else
      ' found open double quote
      p = p + q
      ' find close double quote
      q = Text.GetIndexOf(Text.GetSubTextToEnd(saved[lang], p), WQ)
      If q = 0 Then
        ' not found
        p = len + 1 ' exit While
      Else
        ' found close double quote
        If 1 < q Then
          i = i + 1
          literal[lang][i] = Text.GetSubText(saved[lang], p, q - 1)
        EndIf
        p = p + q
      EndIf
    EndIf
  EndWhile
EndSub

Sub OnMenuClicked
  menuClicked = "True"
  menu = LDControls.LastMenuItem
EndSub

Sub Open
  name[lang] = LDxml.Open(path[lang])
  Shapes.SetText(textName[lang], name[lang])
  FirstNode()
EndSub

Sub RestoreLiteral
  inner[2] = saved[2]
  If (literal[2] <> "") And (literal[1] <> literal[2]) Then
    For lang = 1 To 2
      nLiteral[lang] = Array.GetItemCount(literal[lang])
    EndFor
    If nLiteral[1] = nLiteral[2] Then
      For i = 1 To nLiteral[2]
        word = literal[2][i]
        CheckHalfWidth()
        If halfWidth Then
          If literal[1][i] <> literal[2][i] Then
            inner[2] = LDText.Replace(inner[2], literal[2][i], literal[1][i])
          EndIf
        Else  ' full width
          inner[2] = LDText.Replace(inner[2], literal[2][i] + WQ, literal[1][i] + WQ + "（" + literal[2][i] + "）")
        EndIf
      EndFor
    EndIf
  EndIf
  If debug Then
    If (saved[2] <> inner[2]) Then
      TextWindow.WriteLine("saved=" + saved[2])
      TextWindow.WriteLine("inner=" + inner[2])
    EndIf
    If sib[1] <> sib[2] Then
      TextWindow.Pause()
    EndIf
  EndIf
EndSub

Sub ShowNode
  t = title + " - "
  For l = 1 To lvl[lang]
    If 1 < l Then
      t = t + "."
    EndIf
    t = t + sib[lang][l]
  EndFor
  GraphicsWindow.Title = t 
  Shapes.SetText(textResult[lang], result[lang])
  Shapes.SetText(textSib[lang], sib[lang][lvl[lang]] + "/" + nSib[lang][lvl[lang]])
  n[lang] = LDxml.ChildrenCount
  Shapes.SetText(textN[lang], n[lang])
  node[lang] = LDxml.NodeName
  Controls.SetTextBoxText(textNode[lang], node[lang])
  nAttr = LDxml.AttributesCount
  If node[lang] = "#text" Then
    saved[lang] = LDxml.NodeInnerText
    Controls.SetTextBoxText(textInner[lang], saved[lang])
  ElseIf 0 < nAttr Then
    attr = LDxml.Attributes
    Controls.SetTextBoxText(textInner[lang], attr)
  Else
    Controls.SetTextBoxText(textInner[lang], "")
  EndIf
EndSub

Sub SkipSpace
  c = Text.GetSubText(saved[lang], p, 1)
  While c = " "
    p = p + 1
    c = Text.GetSubText(saved[lang], p, 1)
  EndWhile
EndSub

Sub UpdateNode
  If node[lang] = "#text" Then
    If inner[lang] <> saved[lang] Then
      LDxml.Parent()
      LDxml.AddNode(LDxml.NodeName, LDxml.Attributes, inner[lang], "Before")
      LDxml.RemoveNode()
      LDxml.FirstChild()
    EndIf
  EndIf
EndSub

Sub WordSpacing
  p = 1
  len = Text.GetLength(saved[lang])
  inner[lang] = ""
  afterBracket = "True"
  afterHalf = "Flase"
  While p <= len
    savedHalf = afterHalf
    GetHalfWidthWord()
    If (1 < p) And Not[afterBracket] And Not[savedHalf] Then
      inner[lang] = Text.Append(inner[lang], " ")
    EndIf
    inner[lang] = Text.Append(inner[lang], word)
    If (p < len) And Not[beforeBracket] Then
      inner[lang] = Text.Append(inner[lang], " ")
    EndIf
    GetFullWidthWord()
    inner[lang] = Text.Append(inner[lang], word)
  EndWhile
  If debug And (saved[lang] <> inner[lang]) Then
    TextWindow.WriteLine("saved=" + saved[lang])
    TextWindow.WriteLine("inner=" + inner[lang])
  EndIf
EndSub
    